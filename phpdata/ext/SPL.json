[
    {
        "stmtType": "Class",
        "name": "LogicException",
        "fqn": "\\LogicException",
        "type": 0,
        "extendsClass": "Exception",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "BadFunctionCallException",
        "fqn": "\\BadFunctionCallException",
        "type": 0,
        "extendsClass": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "BadMethodCallException",
        "fqn": "\\BadMethodCallException",
        "type": 0,
        "extendsClass": "BadFunctionCallException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DomainException",
        "fqn": "\\DomainException",
        "type": 0,
        "extendsClass": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "InvalidArgumentException",
        "fqn": "\\InvalidArgumentException",
        "type": 0,
        "extendsClass": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "LengthException",
        "fqn": "\\LengthException",
        "type": 0,
        "extendsClass": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "OutOfRangeException",
        "fqn": "\\OutOfRangeException",
        "type": 0,
        "extendsClass": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RuntimeException",
        "fqn": "\\RuntimeException",
        "type": 0,
        "extendsClass": "Exception",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "OutOfBoundsException",
        "fqn": "\\OutOfBoundsException",
        "type": 0,
        "extendsClass": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "OverflowException",
        "fqn": "\\OverflowException",
        "type": 0,
        "extendsClass": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RangeException",
        "fqn": "\\RangeException",
        "type": 0,
        "extendsClass": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "UnderflowException",
        "fqn": "\\UnderflowException",
        "type": 0,
        "extendsClass": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "UnexpectedValueException",
        "fqn": "\\UnexpectedValueException",
        "type": 0,
        "extendsClass": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveIteratorIterator",
        "fqn": "\\RecursiveIteratorIterator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Traversable",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": "RecursiveIteratorIterator::LEAVES_ONLY"
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.3)<br\/>\n * Construct a RecursiveIteratorIterator\n * @link http:\/\/php.net\/recursiveiteratoriterator.construct.php\n * @param Traversable $iterator <p>\n * The iterator being constructed from. Either a\n * <b>RecursiveIterator<\/b> or <b>IteratorAggregate<\/b>.\n * <\/p>\n * @param int $mode [optional] <p>\n * Optional mode. Possible values are\n * <b>RecursiveIteratorIterator::LEAVES_ONLY<\/b>\n * - The default. Lists only leaves in iteration.\n * <b>RecursiveIteratorIterator::SELF_FIRST<\/b>\n * - Lists leaves and parents in iteration with parents coming first.\n * <b>RecursiveIteratorIterator::CHILD_FIRST<\/b>\n * - Lists leaves and parents in iteration with leaves coming first.\n * <\/p>\n * @param int $flags [optional] <p>\n * Optional flag. Possible values are <b>RecursiveIteratorIterator::CATCH_GET_CHILD<\/b>\n * which will then ignore exceptions thrown in calls to <b>RecursiveIteratorIterator::getChildren<\/b>.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Rewind the iterator to the first element of the top level inner iterator\n * @link http:\/\/php.net\/recursiveiteratoriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether the current position is valid\n * @link http:\/\/php.net\/recursiveiteratoriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current position is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Access the current key\n * @link http:\/\/php.net\/recursiveiteratoriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Access the current element value\n * @link http:\/\/php.net\/recursiveiteratoriterator.current.php\n * @return mixed The current elements value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Move forward to the next element\n * @link http:\/\/php.net\/recursiveiteratoriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get the current depth of the recursive iteration\n * @link http:\/\/php.net\/recursiveiteratoriterator.getdepth.php\n * @return int The current depth of the recursive iteration.\n *\/"
            },
            {
                "name": "getSubIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "level",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * The current active sub iterator\n * @link http:\/\/php.net\/recursiveiteratoriterator.getsubiterator.php\n * @param int $level [optional] <p>\n * <\/p>\n * @return RecursiveIterator The current active sub iterator.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get inner iterator\n * @link http:\/\/php.net\/recursiveiteratoriterator.getinneriterator.php\n * @return iterator The current active sub iterator.\n *\/"
            },
            {
                "name": "beginIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Begin Iteration\n * @link http:\/\/php.net\/recursiveiteratoriterator.beginiteration.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "endIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * End Iteration\n * @link http:\/\/php.net\/recursiveiteratoriterator.enditeration.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "callHasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Has children\n * @link http:\/\/php.net\/recursiveiteratoriterator.callhaschildren.php\n * @return bool <b>TRUE<\/b> if the element has children, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "callGetChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get children\n * @link http:\/\/php.net\/recursiveiteratoriterator.callgetchildren.php\n * @return RecursiveIterator A <b>RecursiveIterator<\/b>.\n *\/"
            },
            {
                "name": "beginChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Begin children\n * @link http:\/\/php.net\/recursiveiteratoriterator.beginchildren.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "endChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * End children\n * @link http:\/\/php.net\/recursiveiteratoriterator.endchildren.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "nextElement",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Next element\n * @link http:\/\/php.net\/recursiveiteratoriterator.nextelement.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_depth",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Set max depth\n * @link http:\/\/php.net\/recursiveiteratoriterator.setmaxdepth.php\n * @param string $max_depth [optional] <p>\n * The maximum allowed depth. -1 is used\n * for any depth.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get max depth\n * @link http:\/\/php.net\/recursiveiteratoriterator.getmaxdepth.php\n * @return mixed The maximum accepted depth, or <b>FALSE<\/b> if any depth is allowed.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "LEAVES_ONLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SELF_FIRST",
                "value": 1,
                "doc": null
            },
            {
                "name": "CHILD_FIRST",
                "value": 2,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IteratorIterator",
        "fqn": "\\IteratorIterator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Traversable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an iterator from anything that is traversable.\n *\n * @link http:\/\/php.net\/iteratoriterator.construct.php\n * @param Traversable $iterator\n *   The traversable iterator.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the current value.\n *\n * @link http:\/\/php.net\/iteratoriterator.current.php\n * @return mixed The value of the current element.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the inner iterator.\n *\n * @link http:\/\/php.net\/iteratoriterator.getinneriterator.php\n * @retrun \\Traversable The inner iterator as passed to {@see \\IteratorIterator::__construct}.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the key of the current element\n *\n * @link http:\/\/php.net\/iteratoriterator.key.php\n * @return mixed The key of the current element.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Forward to the next element.\n *\n * @link http:\/\/php.net\/iteratoriterator.next.php\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rewind to the first element.\n *\n * @link http:\/\/php.net\/iteratoriterator.rewind.php\n * @return boolean <code>TRUE<\/code> if the iterator is valid, otherwise <code>FALSE<\/code>.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if the iterator is valid.\n *\n * @link http:\/\/php.net\/iteratoriterator.valid.php\n * @return boolean <code>TRUE<\/code> if the iterator is valid, otherwise <code>FALSE<\/code>.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "FilterIterator",
        "fqn": "\\FilterIterator",
        "type": 0,
        "extendsClass": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct a filterIterator\n * @link http:\/\/php.net\/filteriterator.construct.php\n * @param Iterator $iterator <p>\n * The iterator that is being filtered.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            },
            {
                "name": "accept",
                "type": 17,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element of the iterator is acceptable\n * @link http:\/\/php.net\/filteriterator.accept.php\n * @return bool <b>TRUE<\/b> if the current element is acceptable, otherwise <b>FALSE<\/b>.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveFilterIterator",
        "fqn": "\\RecursiveFilterIterator",
        "type": 0,
        "extendsClass": "FilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Create a RecursiveFilterIterator from a RecursiveIterator\n * @link http:\/\/php.net\/recursivefilteriterator.construct.php\n * @param RecursiveIterator $iterator <p>\n * The <b>RecursiveIterator<\/b> to be filtered.\n * <\/p>\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the inner iterator's current element has children\n * @link http:\/\/php.net\/recursivefilteriterator.haschildren.php\n * @return void <b>TRUE<\/b> if the inner iterator has children, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Return the inner iterator's children contained in a RecursiveFilterIterator\n * @link http:\/\/php.net\/recursivefilteriterator.getchildren.php\n * @return void a <b>RecursiveFilterIterator<\/b> containing the inner iterator's children.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            },
            {
                "name": "accept",
                "type": 17,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element of the iterator is acceptable\n * @link http:\/\/php.net\/filteriterator.accept.php\n * @return bool <b>TRUE<\/b> if the current element is acceptable, otherwise <b>FALSE<\/b>.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "CallbackFilterIterator",
        "fqn": "\\CallbackFilterIterator",
        "type": 0,
        "extendsClass": "FilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Create a filtered iterator from another iterator\n * @link http:\/\/php.net\/callbackfilteriterator.construct.php\n * @param Iterator $iterator\n * @param $callback\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Calls the callback with the current value, the current key and the inner iterator as arguments\n * @link http:\/\/php.net\/callbackfilteriterator.accept.php\n * @return string <b>TRUE<\/b> to accept the current item, or <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveCallbackFilterIterator",
        "fqn": "\\RecursiveCallbackFilterIterator",
        "type": 0,
        "extendsClass": "CallbackFilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Create a RecursiveCallbackFilterIterator from a RecursiveIterator\n * @link http:\/\/php.net\/recursivecallbackfilteriterator.construct.php\n * @param RecursiveIterator $iterator\n * @param $callback\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Check whether the inner iterator's current element has children\n * @link http:\/\/php.net\/recursivecallbackfilteriterator.haschildren.php\n * @return void <b>TRUE<\/b> if the current element has children, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Return the inner iterator's children contained in a RecursiveCallbackFilterIterator\n * @link http:\/\/php.net\/recursivecallbackfilteriterator.getchildren.php\n * @return RecursiveCallbackFilterIterator a <b>RecursiveCallbackFilterIterator<\/b> containing\n * the children.\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Calls the callback with the current value, the current key and the inner iterator as arguments\n * @link http:\/\/php.net\/callbackfilteriterator.accept.php\n * @return string <b>TRUE<\/b> to accept the current item, or <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "ParentIterator",
        "fqn": "\\ParentIterator",
        "type": 0,
        "extendsClass": "RecursiveFilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Constructs a ParentIterator\n * @link http:\/\/php.net\/parentiterator.construct.php\n * @param RecursiveIterator $iterator <p>\n * The iterator being constructed upon.\n * <\/p>\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Determines acceptability\n * @link http:\/\/php.net\/parentiterator.accept.php\n * @return bool <b>TRUE<\/b> if the current element is acceptable, otherwise <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the inner iterator's current element has children\n * @link http:\/\/php.net\/recursivefilteriterator.haschildren.php\n * @return void <b>TRUE<\/b> if the inner iterator has children, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Return the inner iterator's children contained in a RecursiveFilterIterator\n * @link http:\/\/php.net\/recursivefilteriterator.getchildren.php\n * @return void a <b>RecursiveFilterIterator<\/b> containing the inner iterator's children.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "LimitIterator",
        "fqn": "\\LimitIterator",
        "type": 0,
        "extendsClass": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct a LimitIterator\n * @link http:\/\/php.net\/limititerator.construct.php\n * @param Iterator $iterator <p>\n * The <b>Iterator<\/b> to limit.\n * <\/p>\n * @param int $offset [optional] <p>\n * Optional offset of the limit.\n * <\/p>\n * @param int $count [optional] <p>\n * Optional count of the limit.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator to the specified starting offset\n * @link http:\/\/php.net\/limititerator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/limititerator.valid.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get current key\n * @link http:\/\/php.net\/limititerator.key.php\n * @return mixed the key for the current item.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get current element\n * @link http:\/\/php.net\/limititerator.current.php\n * @return mixed the current element or <b>NULL<\/b> if there is none.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/limititerator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Seek to the given position\n * @link http:\/\/php.net\/limititerator.seek.php\n * @param int $position <p>\n * The position to seek to.\n * <\/p>\n * @return int the offset position after seeking.\n *\/"
            },
            {
                "name": "getPosition",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Return the current position\n * @link http:\/\/php.net\/limititerator.getposition.php\n * @return int The current position.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get inner iterator\n * @link http:\/\/php.net\/limititerator.getinneriterator.php\n * @return Iterator The inner iterator passed to <b>LimitIterator::__construct<\/b>.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "CachingIterator",
        "fqn": "\\CachingIterator",
        "type": 0,
        "extendsClass": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "self::CALL_TOSTRING"
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Construct a new CachingIterator object for the iterator.\n * @link http:\/\/php.net\/cachingiterator.construct.php\n * @param Iterator $iterator <p>\n * Iterator to cache\n * <\/p>\n * @param string $flags [optional] <p>\n * Bitmask of flags.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/cachingiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/cachingiterator.valid.php\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the key for the current element\n * @link http:\/\/php.net\/cachingiterator.key.php\n * @return scalar\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the current element\n * @link http:\/\/php.net\/cachingiterator.current.php\n * @return void Mixed\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/cachingiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "hasNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether the inner iterator has a valid next element\n * @link http:\/\/php.net\/cachingiterator.hasnext.php\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the string representation of the current element\n * @link http:\/\/php.net\/cachingiterator.tostring.php\n * @return void The string representation of the current element.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns the inner iterator\n * @link http:\/\/php.net\/cachingiterator.getinneriterator.php\n * @return Iterator an object implementing the Iterator interface.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get flags used\n * @link http:\/\/php.net\/cachingiterator.getflags.php\n * @return void Description...\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The setFlags purpose\n * @link http:\/\/php.net\/cachingiterator.setflags.php\n * @param bitmask $flags <p>\n * Bitmask of the flags to set.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetGet purpose\n * @link http:\/\/php.net\/cachingiterator.offsetget.php\n * @param string $index <p>\n * Description...\n * <\/p>\n * @return void Description...\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetSet purpose\n * @link http:\/\/php.net\/cachingiterator.offsetset.php\n * @param string $index <p>\n * The index of the element to be set.\n * <\/p>\n * @param string $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetUnset purpose\n * @link http:\/\/php.net\/cachingiterator.offsetunset.php\n * @param string $index <p>\n * The index of the element to be unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetExists purpose\n * @link http:\/\/php.net\/cachingiterator.offsetexists.php\n * @param string $index <p>\n * The index being checked.\n * <\/p>\n * @return void <b>TRUE<\/b> if an entry referenced by the offset exists, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getCache",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The getCache purpose\n * @link http:\/\/php.net\/cachingiterator.getcache.php\n * @return void Description...\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * The number of elements in the iterator\n * @link http:\/\/php.net\/cachingiterator.count.php\n * @return int The count of the elements iterated over.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CALL_TOSTRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_KEY",
                "value": 2,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_CURRENT",
                "value": 4,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_INNER",
                "value": 8,
                "doc": null
            },
            {
                "name": "FULL_CACHE",
                "value": 256,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveCachingIterator",
        "fqn": "\\RecursiveCachingIterator",
        "type": 0,
        "extendsClass": "CachingIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "self::CALL_TOSTRING"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct\n * @link http:\/\/php.net\/recursivecachingiterator.construct.php\n * @param Iterator $iterator <p>\n * The iterator being used.\n * <\/p>\n * @param string $flags [optional] <p>\n * The flags. Use <b>CALL_TOSTRING<\/b> to call\n * <b>RecursiveCachingIterator::__toString<\/b> for every element (the default),\n * and\/or <b>CATCH_GET_CHILD<\/b> to catch exceptions when trying to get children.\n * <\/p>\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element of the inner iterator has children\n * @link http:\/\/php.net\/recursivecachingiterator.haschildren.php\n * @return bool <b>TRUE<\/b> if the inner iterator has children, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Return the inner iterator's children as a RecursiveCachingIterator\n * @link http:\/\/php.net\/recursivecachingiterator.getchildren.php\n * @return RecursiveCachingIterator The inner iterator's children, as a RecursiveCachingIterator.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/cachingiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/cachingiterator.valid.php\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the key for the current element\n * @link http:\/\/php.net\/cachingiterator.key.php\n * @return scalar\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the current element\n * @link http:\/\/php.net\/cachingiterator.current.php\n * @return void Mixed\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/cachingiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "hasNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether the inner iterator has a valid next element\n * @link http:\/\/php.net\/cachingiterator.hasnext.php\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the string representation of the current element\n * @link http:\/\/php.net\/cachingiterator.tostring.php\n * @return void The string representation of the current element.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns the inner iterator\n * @link http:\/\/php.net\/cachingiterator.getinneriterator.php\n * @return Iterator an object implementing the Iterator interface.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get flags used\n * @link http:\/\/php.net\/cachingiterator.getflags.php\n * @return void Description...\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The setFlags purpose\n * @link http:\/\/php.net\/cachingiterator.setflags.php\n * @param bitmask $flags <p>\n * Bitmask of the flags to set.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetGet purpose\n * @link http:\/\/php.net\/cachingiterator.offsetget.php\n * @param string $index <p>\n * Description...\n * <\/p>\n * @return void Description...\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetSet purpose\n * @link http:\/\/php.net\/cachingiterator.offsetset.php\n * @param string $index <p>\n * The index of the element to be set.\n * <\/p>\n * @param string $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetUnset purpose\n * @link http:\/\/php.net\/cachingiterator.offsetunset.php\n * @param string $index <p>\n * The index of the element to be unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The offsetExists purpose\n * @link http:\/\/php.net\/cachingiterator.offsetexists.php\n * @param string $index <p>\n * The index being checked.\n * <\/p>\n * @return void <b>TRUE<\/b> if an entry referenced by the offset exists, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getCache",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * The getCache purpose\n * @link http:\/\/php.net\/cachingiterator.getcache.php\n * @return void Description...\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * The number of elements in the iterator\n * @link http:\/\/php.net\/cachingiterator.count.php\n * @return int The count of the elements iterated over.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CALL_TOSTRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_KEY",
                "value": 2,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_CURRENT",
                "value": 4,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_INNER",
                "value": 8,
                "doc": null
            },
            {
                "name": "FULL_CACHE",
                "value": 256,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "NoRewindIterator",
        "fqn": "\\NoRewindIterator",
        "type": 0,
        "extendsClass": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct a NoRewindIterator\n * @link http:\/\/php.net\/norewinditerator.construct.php\n * @param Iterator $iterator <p>\n * The iterator being used.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Prevents the rewind operation on the inner iterator.\n * @link http:\/\/php.net\/norewinditerator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Validates the iterator\n * @link http:\/\/php.net\/norewinditerator.valid.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/norewinditerator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current value\n * @link http:\/\/php.net\/norewinditerator.current.php\n * @return mixed The current value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Forward to the next element\n * @link http:\/\/php.net\/norewinditerator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/norewinditerator.getinneriterator.php\n * @return iterator The inner iterator, as passed to <b>NoRewindIterator::__construct<\/b>.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AppendIterator",
        "fqn": "\\AppendIterator",
        "type": 0,
        "extendsClass": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Constructs an AppendIterator\n * @link http:\/\/php.net\/appenditerator.construct.php\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Appends an iterator\n * @link http:\/\/php.net\/appenditerator.append.php\n * @param Iterator $iterator <p>\n * The iterator to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewinds the Iterator\n * @link http:\/\/php.net\/appenditerator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Checks validity of the current element\n * @link http:\/\/php.net\/appenditerator.valid.php\n * @return bool <b>TRUE<\/b> if the current iteration is valid, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the current key\n * @link http:\/\/php.net\/appenditerator.key.php\n * @return scalar The current key if it is valid or <b>NULL<\/b> otherwise.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the current value\n * @link http:\/\/php.net\/appenditerator.current.php\n * @return mixed The current value if it is valid or <b>NULL<\/b> otherwise.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Moves to the next element\n * @link http:\/\/php.net\/appenditerator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the inner iterator\n * @link http:\/\/php.net\/appenditerator.getinneriterator.php\n * @return Iterator The current inner iterator, or <b>NULL<\/b> if there is not one.\n *\/"
            },
            {
                "name": "getIteratorIndex",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets an index of iterators\n * @link http:\/\/php.net\/appenditerator.getiteratorindex.php\n * @return int an integer, which is the zero-based index\n * of the current inner iterator.\n *\/"
            },
            {
                "name": "getArrayIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the ArrayIterator\n * @link http:\/\/php.net\/appenditerator.getarrayiterator.php\n * @return void an <b>ArrayIterator<\/b> containing\n * the appended iterators.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "InfiniteIterator",
        "fqn": "\\InfiniteIterator",
        "type": 0,
        "extendsClass": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Constructs an InfiniteIterator\n * @link http:\/\/php.net\/infiniteiterator.construct.php\n * @param Iterator $iterator <p>\n * The iterator to infinitely iterate over.\n * <\/p>\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Moves the inner Iterator forward or rewinds it\n * @link http:\/\/php.net\/infiniteiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind to the first element\n * @link http:\/\/php.net\/iteratoriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Checks if the iterator is valid\n * @link http:\/\/php.net\/iteratoriterator.valid.php\n * @return bool <b>TRUE<\/b> if the iterator is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the key of the current element\n * @link http:\/\/php.net\/iteratoriterator.key.php\n * @return scalar The key of the current element.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current value\n * @link http:\/\/php.net\/iteratoriterator.current.php\n * @return mixed The value of the current element.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/iteratoriterator.getinneriterator.php\n * @return Traversable The inner iterator as passed to <b>IteratorIterator::__construct<\/b>.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RegexIterator",
        "fqn": "\\RegexIterator",
        "type": 0,
        "extendsClass": "FilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Create a new RegexIterator\n * @link http:\/\/php.net\/regexiterator.construct.php\n * @param Iterator $iterator\n * @param $regex\n * @param $mode [optional]\n * @param $flags [optional]\n * @param $preg_flags [optional]\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get accept status\n * @link http:\/\/php.net\/regexiterator.accept.php\n * @return bool <b>TRUE<\/b> if a match, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Returns operation mode.\n * @link http:\/\/php.net\/regexiterator.getmode.php\n * @return int the operation mode.\n *\/"
            },
            {
                "name": "setMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sets the operation mode.\n * @link http:\/\/php.net\/regexiterator.setmode.php\n * @param int $mode <p>\n * The operation mode.\n * <\/p>\n * <p>\n * The available modes are listed below. The actual\n * meanings of these modes are described in the\n * predefined constants.\n * <table>\n * <b>RegexIterator<\/b> modes\n * <tr valign=\"top\">\n * <td>value<\/td>\n * <td>constant<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>0<\/td>\n * <td>\n * RegexIterator::MATCH\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>\n * RegexIterator::GET_MATCH\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>2<\/td>\n * <td>\n * RegexIterator::ALL_MATCHES\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>3<\/td>\n * <td>\n * RegexIterator::SPLIT\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>4<\/td>\n * <td>\n * RegexIterator::REPLACE\n * <\/td>\n * <\/tr>\n * <\/table>\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get flags\n * @link http:\/\/php.net\/regexiterator.getflags.php\n * @return int the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sets the flags.\n * @link http:\/\/php.net\/regexiterator.setflags.php\n * @param int $flags <p>\n * The flags to set, a bitmask of class constants.\n * <\/p>\n * <p>\n * The available flags are listed below. The actual\n * meanings of these flags are described in the\n * predefined constants.\n * <table>\n * <b>RegexIterator<\/b> flags\n * <tr valign=\"top\">\n * <td>value<\/td>\n * <td>constant<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>\n * RegexIterator::USE_KEY\n * <\/td>\n * <\/tr>\n * <\/table>\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getPregFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Returns the regular expression flags.\n * @link http:\/\/php.net\/regexiterator.getpregflags.php\n * @return int a bitmask of the regular expression flags.\n *\/"
            },
            {
                "name": "setPregFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sets the regular expression flags.\n * @link http:\/\/php.net\/regexiterator.setpregflags.php\n * @param int $preg_flags <p>\n * The regular expression flags. See <b>RegexIterator::__construct<\/b>\n * for an overview of available flags.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getRegex",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Returns current regular expression\n * @link http:\/\/php.net\/regexiterator.getregex.php\n * @return string\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "replacement",
                "type": 1,
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "USE_KEY",
                "value": 1,
                "doc": null
            },
            {
                "name": "MATCH",
                "value": 0,
                "doc": null
            },
            {
                "name": "GET_MATCH",
                "value": 1,
                "doc": null
            },
            {
                "name": "ALL_MATCHES",
                "value": 2,
                "doc": null
            },
            {
                "name": "SPLIT",
                "value": 3,
                "doc": null
            },
            {
                "name": "REPLACE",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveRegexIterator",
        "fqn": "\\RecursiveRegexIterator",
        "type": 0,
        "extendsClass": "RegexIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Creates a new RecursiveRegexIterator.\n * @link http:\/\/php.net\/recursiveregexiterator.construct.php\n * @param RecursiveIterator $iterator\n * @param $regex\n * @param $mode [optional]\n * @param $flags [optional]\n * @param $preg_flags [optional]\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Returns whether an iterator can be obtained for the current entry.\n * @link http:\/\/php.net\/recursiveregexiterator.haschildren.php\n * @return bool <b>TRUE<\/b> if an iterator can be obtained for the current entry, otherwise returns <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Returns an iterator for the current entry.\n * @link http:\/\/php.net\/recursiveregexiterator.getchildren.php\n * @return RecursiveRegexIterator An iterator for the current entry, if it can be iterated over by the inner iterator.\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get accept status\n * @link http:\/\/php.net\/regexiterator.accept.php\n * @return bool <b>TRUE<\/b> if a match, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Returns operation mode.\n * @link http:\/\/php.net\/regexiterator.getmode.php\n * @return int the operation mode.\n *\/"
            },
            {
                "name": "setMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sets the operation mode.\n * @link http:\/\/php.net\/regexiterator.setmode.php\n * @param int $mode <p>\n * The operation mode.\n * <\/p>\n * <p>\n * The available modes are listed below. The actual\n * meanings of these modes are described in the\n * predefined constants.\n * <table>\n * <b>RegexIterator<\/b> modes\n * <tr valign=\"top\">\n * <td>value<\/td>\n * <td>constant<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>0<\/td>\n * <td>\n * RegexIterator::MATCH\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>\n * RegexIterator::GET_MATCH\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>2<\/td>\n * <td>\n * RegexIterator::ALL_MATCHES\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>3<\/td>\n * <td>\n * RegexIterator::SPLIT\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>4<\/td>\n * <td>\n * RegexIterator::REPLACE\n * <\/td>\n * <\/tr>\n * <\/table>\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get flags\n * @link http:\/\/php.net\/regexiterator.getflags.php\n * @return int the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sets the flags.\n * @link http:\/\/php.net\/regexiterator.setflags.php\n * @param int $flags <p>\n * The flags to set, a bitmask of class constants.\n * <\/p>\n * <p>\n * The available flags are listed below. The actual\n * meanings of these flags are described in the\n * predefined constants.\n * <table>\n * <b>RegexIterator<\/b> flags\n * <tr valign=\"top\">\n * <td>value<\/td>\n * <td>constant<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>\n * RegexIterator::USE_KEY\n * <\/td>\n * <\/tr>\n * <\/table>\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getPregFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Returns the regular expression flags.\n * @link http:\/\/php.net\/regexiterator.getpregflags.php\n * @return int a bitmask of the regular expression flags.\n *\/"
            },
            {
                "name": "setPregFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sets the regular expression flags.\n * @link http:\/\/php.net\/regexiterator.setpregflags.php\n * @param int $preg_flags <p>\n * The regular expression flags. See <b>RegexIterator::__construct<\/b>\n * for an overview of available flags.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getRegex",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Returns current regular expression\n * @link http:\/\/php.net\/regexiterator.getregex.php\n * @return string\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator\n * @link http:\/\/php.net\/filteriterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Check whether the current element is valid\n * @link http:\/\/php.net\/filteriterator.valid.php\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current key\n * @link http:\/\/php.net\/filteriterator.key.php\n * @return mixed The current key.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the current element value\n * @link http:\/\/php.net\/filteriterator.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move the iterator forward\n * @link http:\/\/php.net\/filteriterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get the inner iterator\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\n * @return Iterator The inner iterator.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "replacement",
                "type": 1,
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "USE_KEY",
                "value": 1,
                "doc": null
            },
            {
                "name": "MATCH",
                "value": 0,
                "doc": null
            },
            {
                "name": "GET_MATCH",
                "value": 1,
                "doc": null
            },
            {
                "name": "ALL_MATCHES",
                "value": 2,
                "doc": null
            },
            {
                "name": "SPLIT",
                "value": 3,
                "doc": null
            },
            {
                "name": "REPLACE",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "EmptyIterator",
        "fqn": "\\EmptyIterator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * The rewind() method\n * @link http:\/\/php.net\/emptyiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * The valid() method\n * @link http:\/\/php.net\/emptyiterator.valid.php\n * @return void <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * The key() method\n * @link http:\/\/php.net\/emptyiterator.key.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * The current() method\n * @link http:\/\/php.net\/emptyiterator.current.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * The next() method\n * @link http:\/\/php.net\/emptyiterator.next.php\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveTreeIterator",
        "fqn": "\\RecursiveTreeIterator",
        "type": 0,
        "extendsClass": "RecursiveIteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "it",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "RecursiveTreeIterator::BYPASS_KEY"
                    },
                    {
                        "name": "cit_flags",
                        "type": null,
                        "byRef": false,
                        "default": "CachingIterator::CATCH_GET_CHILD"
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": "RecursiveIteratorIterator::SELF_FIRST"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Construct a RecursiveTreeIterator\n * @link http:\/\/php.net\/recursivetreeiterator.construct.php\n * @param RecursiveIterator|IteratorAggregate $it <p>\n * The <b>RecursiveIterator<\/b> or <b>IteratorAggregate<\/b> to iterate over.\n * <\/p>\n * @param int $flags [optional] <p>\n * Flags may be provided which will affect the behavior of some methods.\n * A list of the flags can found under RecursiveTreeIterator predefined constants.\n * <\/p>\n * @param int $cit_flags [optional]\n * @param int $mode [optional] <p>\n * Flags to affect the behavior of the <b>RecursiveIteratorIterator<\/b> used internally.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator\n * @link http:\/\/php.net\/recursivetreeiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check validity\n * @link http:\/\/php.net\/recursivetreeiterator.valid.php\n * @return bool <b>TRUE<\/b> if the current position is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the key of the current element\n * @link http:\/\/php.net\/recursivetreeiterator.key.php\n * @return string the current key prefixed and postfixed.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get current element\n * @link http:\/\/php.net\/recursivetreeiterator.current.php\n * @return string the current element prefixed and postfixed.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to next element\n * @link http:\/\/php.net\/recursivetreeiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "beginIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Begin iteration\n * @link http:\/\/php.net\/recursivetreeiterator.beginiteration.php\n * @return RecursiveIterator A <b>RecursiveIterator<\/b>.\n *\/"
            },
            {
                "name": "endIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * End iteration\n * @link http:\/\/php.net\/recursivetreeiterator.enditeration.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "callHasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Has children\n * @link http:\/\/php.net\/recursivetreeiterator.callhaschildren.php\n * @return bool <b>TRUE<\/b> if there are children, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "callGetChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get children\n * @link http:\/\/php.net\/recursivetreeiterator.callgetchildren.php\n * @return RecursiveIterator A <b>RecursiveIterator<\/b>.\n *\/"
            },
            {
                "name": "beginChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Begin children\n * @link http:\/\/php.net\/recursivetreeiterator.beginchildren.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "endChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * End children\n * @link http:\/\/php.net\/recursivetreeiterator.endchildren.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "nextElement",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Next element\n * @link http:\/\/php.net\/recursivetreeiterator.nextelement.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getPrefix",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the prefix\n * @link http:\/\/php.net\/recursivetreeiterator.getprefix.php\n * @return string the string to place in front of current element\n *\/"
            },
            {
                "name": "setPrefixPart",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "part",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Set a part of the prefix\n * @link http:\/\/php.net\/recursivetreeiterator.setprefixpart.php\n * @param int $part <p>\n * One of the RecursiveTreeIterator::PREFIX_* constants.\n * <\/p>\n * @param string $value <p>\n * The value to assign to the part of the prefix specified in <i>part<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getEntry",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get current entry\n * @link http:\/\/php.net\/recursivetreeiterator.getentry.php\n * @return string the part of the tree built for the current element.\n *\/"
            },
            {
                "name": "getPostfix",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the postfix\n * @link http:\/\/php.net\/recursivetreeiterator.getpostfix.php\n * @return void the string to place after the current element.\n *\/"
            },
            {
                "name": "getDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get the current depth of the recursive iteration\n * @link http:\/\/php.net\/recursiveiteratoriterator.getdepth.php\n * @return int The current depth of the recursive iteration.\n *\/"
            },
            {
                "name": "getSubIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "level",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * The current active sub iterator\n * @link http:\/\/php.net\/recursiveiteratoriterator.getsubiterator.php\n * @param int $level [optional] <p>\n * <\/p>\n * @return RecursiveIterator The current active sub iterator.\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get inner iterator\n * @link http:\/\/php.net\/recursiveiteratoriterator.getinneriterator.php\n * @return iterator The current active sub iterator.\n *\/"
            },
            {
                "name": "setMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_depth",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Set max depth\n * @link http:\/\/php.net\/recursiveiteratoriterator.setmaxdepth.php\n * @param string $max_depth [optional] <p>\n * The maximum allowed depth. -1 is used\n * for any depth.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get max depth\n * @link http:\/\/php.net\/recursiveiteratoriterator.getmaxdepth.php\n * @return mixed The maximum accepted depth, or <b>FALSE<\/b> if any depth is allowed.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "LEAVES_ONLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SELF_FIRST",
                "value": 1,
                "doc": null
            },
            {
                "name": "CHILD_FIRST",
                "value": 2,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            },
            {
                "name": "BYPASS_CURRENT",
                "value": 4,
                "doc": null
            },
            {
                "name": "BYPASS_KEY",
                "value": 8,
                "doc": null
            },
            {
                "name": "PREFIX_LEFT",
                "value": 0,
                "doc": null
            },
            {
                "name": "PREFIX_MID_HAS_NEXT",
                "value": 1,
                "doc": null
            },
            {
                "name": "PREFIX_MID_LAST",
                "value": 2,
                "doc": null
            },
            {
                "name": "PREFIX_END_HAS_NEXT",
                "value": 3,
                "doc": null
            },
            {
                "name": "PREFIX_END_LAST",
                "value": 4,
                "doc": null
            },
            {
                "name": "PREFIX_RIGHT",
                "value": 5,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "ArrayObject",
        "fqn": "\\ArrayObject",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Construct a new array object\n * @link http:\/\/php.net\/arrayobject.construct.php\n * @param $array\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Returns whether the requested index exists\n * @link http:\/\/php.net\/arrayobject.offsetexists.php\n * @param mixed $index <p>\n * The index being checked.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the requested index exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Returns the value at the specified index\n * @link http:\/\/php.net\/arrayobject.offsetget.php\n * @param mixed $index <p>\n * The index with the value.\n * <\/p>\n * @return mixed The value at the specified index or <b>NULL<\/b>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Sets the value at the specified index to newval\n * @link http:\/\/php.net\/arrayobject.offsetset.php\n * @param mixed $index <p>\n * The index being set.\n * <\/p>\n * @param mixed $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Unsets the value at the specified index\n * @link http:\/\/php.net\/arrayobject.offsetunset.php\n * @param mixed $index <p>\n * The index being unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Appends the value\n * @link http:\/\/php.net\/arrayobject.append.php\n * @param mixed $value <p>\n * The value being appended.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getArrayCopy",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Creates a copy of the ArrayObject.\n * @link http:\/\/php.net\/arrayobject.getarraycopy.php\n * @return array a copy of the array. When the <b>ArrayObject<\/b> refers to an object\n * an array of the public properties of that object will be returned.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Get the number of public properties in the ArrayObject\n * @link http:\/\/php.net\/arrayobject.count.php\n * @return int The number of public properties in the <b>ArrayObject<\/b>.\n * <\/p>\n * <p>\n * When the <b>ArrayObject<\/b> is constructed from an array all properties are public.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the behavior flags.\n * @link http:\/\/php.net\/arrayobject.getflags.php\n * @return int the behavior flags of the ArrayObject.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Sets the behavior flags.\n * @link http:\/\/php.net\/arrayobject.setflags.php\n * @param int $flags <p>\n * The new ArrayObject behavior.\n * It takes on either a bitmask, or named constants. Using named\n * constants is strongly encouraged to ensure compatibility for future\n * versions.\n * <\/p>\n * <p>\n * The available behavior flags are listed below. The actual\n * meanings of these flags are described in the\n * predefined constants.\n * <table>\n * ArrayObject behavior flags\n * <tr valign=\"top\">\n * <td>value<\/td>\n * <td>constant<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>\n * ArrayObject::STD_PROP_LIST\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>2<\/td>\n * <td>\n * ArrayObject::ARRAY_AS_PROPS\n * <\/td>\n * <\/tr>\n * <\/table>\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort the entries by value\n * @link http:\/\/php.net\/arrayobject.asort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "ksort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort the entries by key\n * @link http:\/\/php.net\/arrayobject.ksort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "uasort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": "callable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort the entries with a user-defined comparison function and maintain key association\n * @link http:\/\/php.net\/arrayobject.uasort.php\n * @param callable $cmp_function <p>\n * Function <i>cmp_function<\/i> should accept two\n * parameters which will be filled by pairs of entries.\n * The comparison function must return an integer less than, equal\n * to, or greater than zero if the first argument is considered to\n * be respectively less than, equal to, or greater than the\n * second.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "uksort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": "callable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort the entries by keys using a user-defined comparison function\n * @link http:\/\/php.net\/arrayobject.uksort.php\n * @param callable $cmp_function <p>\n * The callback comparison function.\n * <\/p>\n * <p>\n * Function <i>cmp_function<\/i> should accept two\n * parameters which will be filled by pairs of entry keys.\n * The comparison function must return an integer less than, equal\n * to, or greater than zero if the first argument is considered to\n * be respectively less than, equal to, or greater than the\n * second.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "natsort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort entries using a \"natural order\" algorithm\n * @link http:\/\/php.net\/arrayobject.natsort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "natcasesort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort an array using a case insensitive \"natural order\" algorithm\n * @link http:\/\/php.net\/arrayobject.natcasesort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unserialize an ArrayObject\n * @link http:\/\/php.net\/arrayobject.unserialize.php\n * @param string $serialized <p>\n * The serialized <b>ArrayObject<\/b>.\n * <\/p>\n * @return void The unserialized <b>ArrayObject<\/b>.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Serialize an ArrayObject\n * @link http:\/\/php.net\/arrayobject.serialize.php\n * @return void The serialized representation of the <b>ArrayObject<\/b>.\n *\/"
            },
            {
                "name": "getIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Create a new iterator from an ArrayObject instance\n * @link http:\/\/php.net\/arrayobject.getiterator.php\n * @return ArrayIterator An iterator from an <b>ArrayObject<\/b>.\n *\/"
            },
            {
                "name": "exchangeArray",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "input",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Exchange the array for another one.\n * @link http:\/\/php.net\/arrayobject.exchangearray.php\n * @param mixed $input <p>\n * The new array or object to exchange with the current array.\n * <\/p>\n * @return array the old array.\n *\/"
            },
            {
                "name": "setIteratorClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator_class",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Sets the iterator classname for the ArrayObject.\n * @link http:\/\/php.net\/arrayobject.setiteratorclass.php\n * @param string $iterator_class <p>\n * The classname of the array iterator to use when iterating over this object.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getIteratorClass",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the iterator classname for the ArrayObject.\n * @link http:\/\/php.net\/arrayobject.getiteratorclass.php\n * @return string the iterator class name that is used to iterate over this object.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "STD_PROP_LIST",
                "value": 1,
                "doc": null
            },
            {
                "name": "ARRAY_AS_PROPS",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "ArrayIterator",
        "fqn": "\\ArrayIterator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": null,
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Construct an ArrayIterator\n * @link http:\/\/php.net\/arrayiterator.construct.php\n * @param mixed $array [optional] <p>\n * The array or object to be iterated on.\n * <\/p>\n * @param int $flags [optional] <p>\n * Flags to control the behaviour of the <b>ArrayIterator<\/b> object.\n * See <b>ArrayIterator::setFlags<\/b>.\n * <\/p>\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Check if offset exists\n * @link http:\/\/php.net\/arrayiterator.offsetexists.php\n * @param string $index <p>\n * The offset being checked.\n * <\/p>\n * @return void <b>TRUE<\/b> if the offset exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Get value for an offset\n * @link http:\/\/php.net\/arrayiterator.offsetget.php\n * @param string $index <p>\n * The offset to get the value from.\n * <\/p>\n * @return mixed The value at offset <i>index<\/i>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Set value for an offset\n * @link http:\/\/php.net\/arrayiterator.offsetset.php\n * @param string $index <p>\n * The index to set for.\n * <\/p>\n * @param string $newval <p>\n * The new value to store at the index.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Unset value for an offset\n * @link http:\/\/php.net\/arrayiterator.offsetunset.php\n * @param string $index <p>\n * The offset to unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Append an element\n * @link http:\/\/php.net\/arrayiterator.append.php\n * @param mixed $value <p>\n * The value to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getArrayCopy",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Get array copy\n * @link http:\/\/php.net\/arrayiterator.getarraycopy.php\n * @return array A copy of the array, or array of public properties\n * if ArrayIterator refers to an object.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Count elements\n * @link http:\/\/php.net\/arrayiterator.count.php\n * @return int The number of elements or public properties in the associated\n * array or object, respectively.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get flags\n * @link http:\/\/php.net\/arrayiterator.getflags.php\n * @return void The current flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Set behaviour flags\n * @link http:\/\/php.net\/arrayiterator.setflags.php\n * @param string $flags <p>\n * A bitmask as follows:\n * 0 = Properties of the object have their normal functionality\n * when accessed as list (var_dump, foreach, etc.).\n * 1 = Array indices can be accessed as properties in read\/write.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort array by values\n * @link http:\/\/php.net\/arrayiterator.asort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "ksort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort array by keys\n * @link http:\/\/php.net\/arrayiterator.ksort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "uasort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * User defined sort\n * @link http:\/\/php.net\/arrayiterator.uasort.php\n * @param string $cmp_function <p>\n * The compare function used for the sort.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "uksort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * User defined sort\n * @link http:\/\/php.net\/arrayiterator.uksort.php\n * @param string $cmp_function <p>\n * The compare function used for the sort.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "natsort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort an array naturally\n * @link http:\/\/php.net\/arrayiterator.natsort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "natcasesort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort an array naturally, case insensitive\n * @link http:\/\/php.net\/arrayiterator.natcasesort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unserialize\n * @link http:\/\/php.net\/arrayiterator.unserialize.php\n * @param string $serialized <p>\n * The serialized ArrayIterator object to be unserialized.\n * <\/p>\n * @return string The <b>ArrayIterator<\/b>.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Serialize\n * @link http:\/\/php.net\/arrayiterator.serialize.php\n * @return string The serialized <b>ArrayIterator<\/b>.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Rewind array back to the start\n * @link http:\/\/php.net\/arrayiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Return current array entry\n * @link http:\/\/php.net\/arrayiterator.current.php\n * @return mixed The current array entry.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Return current array key\n * @link http:\/\/php.net\/arrayiterator.key.php\n * @return mixed The current array key.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Move to next entry\n * @link http:\/\/php.net\/arrayiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Check whether array contains more entries\n * @link http:\/\/php.net\/arrayiterator.valid.php\n * @return bool No value is returned.\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Seek to position\n * @link http:\/\/php.net\/arrayiterator.seek.php\n * @param int $position <p>\n * The position to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "STD_PROP_LIST",
                "value": 1,
                "doc": null
            },
            {
                "name": "ARRAY_AS_PROPS",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveArrayIterator",
        "fqn": "\\RecursiveArrayIterator",
        "type": 0,
        "extendsClass": "ArrayIterator",
        "methods": [
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns whether current entry is an array or an object.\n * @link http:\/\/php.net\/recursivearrayiterator.haschildren.php\n * @return bool <b>TRUE<\/b> if the current entry is an array or an object,\n * otherwise <b>FALSE<\/b> is returned.\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns an iterator for the current entry if it is an array or an object.\n * @link http:\/\/php.net\/recursivearrayiterator.getchildren.php\n * @return RecursiveArrayIterator An iterator for the current entry, if it is an array or object.\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": null,
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Construct an ArrayIterator\n * @link http:\/\/php.net\/arrayiterator.construct.php\n * @param mixed $array [optional] <p>\n * The array or object to be iterated on.\n * <\/p>\n * @param int $flags [optional] <p>\n * Flags to control the behaviour of the <b>ArrayIterator<\/b> object.\n * See <b>ArrayIterator::setFlags<\/b>.\n * <\/p>\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Check if offset exists\n * @link http:\/\/php.net\/arrayiterator.offsetexists.php\n * @param string $index <p>\n * The offset being checked.\n * <\/p>\n * @return void <b>TRUE<\/b> if the offset exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Get value for an offset\n * @link http:\/\/php.net\/arrayiterator.offsetget.php\n * @param string $index <p>\n * The offset to get the value from.\n * <\/p>\n * @return mixed The value at offset <i>index<\/i>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Set value for an offset\n * @link http:\/\/php.net\/arrayiterator.offsetset.php\n * @param string $index <p>\n * The index to set for.\n * <\/p>\n * @param string $newval <p>\n * The new value to store at the index.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Unset value for an offset\n * @link http:\/\/php.net\/arrayiterator.offsetunset.php\n * @param string $index <p>\n * The offset to unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Append an element\n * @link http:\/\/php.net\/arrayiterator.append.php\n * @param mixed $value <p>\n * The value to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getArrayCopy",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Get array copy\n * @link http:\/\/php.net\/arrayiterator.getarraycopy.php\n * @return array A copy of the array, or array of public properties\n * if ArrayIterator refers to an object.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Count elements\n * @link http:\/\/php.net\/arrayiterator.count.php\n * @return int The number of elements or public properties in the associated\n * array or object, respectively.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get flags\n * @link http:\/\/php.net\/arrayiterator.getflags.php\n * @return void The current flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Set behaviour flags\n * @link http:\/\/php.net\/arrayiterator.setflags.php\n * @param string $flags <p>\n * A bitmask as follows:\n * 0 = Properties of the object have their normal functionality\n * when accessed as list (var_dump, foreach, etc.).\n * 1 = Array indices can be accessed as properties in read\/write.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort array by values\n * @link http:\/\/php.net\/arrayiterator.asort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "ksort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort array by keys\n * @link http:\/\/php.net\/arrayiterator.ksort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "uasort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * User defined sort\n * @link http:\/\/php.net\/arrayiterator.uasort.php\n * @param string $cmp_function <p>\n * The compare function used for the sort.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "uksort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * User defined sort\n * @link http:\/\/php.net\/arrayiterator.uksort.php\n * @param string $cmp_function <p>\n * The compare function used for the sort.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "natsort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort an array naturally\n * @link http:\/\/php.net\/arrayiterator.natsort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "natcasesort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Sort an array naturally, case insensitive\n * @link http:\/\/php.net\/arrayiterator.natcasesort.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unserialize\n * @link http:\/\/php.net\/arrayiterator.unserialize.php\n * @param string $serialized <p>\n * The serialized ArrayIterator object to be unserialized.\n * <\/p>\n * @return string The <b>ArrayIterator<\/b>.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Serialize\n * @link http:\/\/php.net\/arrayiterator.serialize.php\n * @return string The serialized <b>ArrayIterator<\/b>.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Rewind array back to the start\n * @link http:\/\/php.net\/arrayiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Return current array entry\n * @link http:\/\/php.net\/arrayiterator.current.php\n * @return mixed The current array entry.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Return current array key\n * @link http:\/\/php.net\/arrayiterator.key.php\n * @return mixed The current array key.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Move to next entry\n * @link http:\/\/php.net\/arrayiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Check whether array contains more entries\n * @link http:\/\/php.net\/arrayiterator.valid.php\n * @return bool No value is returned.\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.0.0)<br\/>\n * Seek to position\n * @link http:\/\/php.net\/arrayiterator.seek.php\n * @param int $position <p>\n * The position to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CHILD_ARRAYS_ONLY",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplFileInfo",
        "fqn": "\\SplFileInfo",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "file_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Construct a new SplFileInfo object\n * @link http:\/\/php.net\/splfileinfo.construct.php\n * @param string $file_name <p>\n * Path to the file.\n * <\/p>\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the filename\n * @link http:\/\/php.net\/splfileinfo.getfilename.php\n * @return string The filename.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/splfileinfo.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the base name of the file\n * @link http:\/\/php.net\/splfileinfo.getbasename.php\n * @param string $suffix [optional] <p>\n * Optional suffix to omit from the base name returned.\n * <\/p>\n * @return string the base name without path information.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Returns the path to the file as a string\n * @link http:\/\/php.net\/splfileinfo.tostring.php\n * @return void the path to the file.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DirectoryIterator",
        "fqn": "\\DirectoryIterator",
        "type": 0,
        "extendsClass": "SplFileInfo",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Constructs a new directory iterator from a path\n * @link http:\/\/php.net\/directoryiterator.construct.php\n * @param $path\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return file name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/directoryiterator.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Get base name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\n * @param string $suffix [optional] <p>\n * If the base name ends in <i>suffix<\/i>,\n * this will be cut.\n * <\/p>\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Determine if current DirectoryIterator item is '.' or '..'\n * @link http:\/\/php.net\/directoryiterator.isdot.php\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\n * otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Rewind the DirectoryIterator back to the start\n * @link http:\/\/php.net\/directoryiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether current DirectoryIterator position is a valid file\n * @link http:\/\/php.net\/directoryiterator.valid.php\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the key for the current DirectoryIterator item\n * @link http:\/\/php.net\/directoryiterator.key.php\n * @return string The key for the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return the current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.current.php\n * @return DirectoryIterator The current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Move forward to next DirectoryIterator item\n * @link http:\/\/php.net\/directoryiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Seek to a DirectoryIterator item\n * @link http:\/\/php.net\/directoryiterator.seek.php\n * @param int $position <p>\n * The zero-based numeric position to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get file name as a string\n * @link http:\/\/php.net\/directoryiterator.tostring.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "FilesystemIterator",
        "fqn": "\\FilesystemIterator",
        "type": 0,
        "extendsClass": "DirectoryIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Constructs a new filesystem iterator\n * @link http:\/\/php.net\/filesystemiterator.construct.php\n * @param string $path <p>\n * The path of the filesystem item to be iterated over.\n * <\/p>\n * @param int $flags [optional] <p>\n * Flags may be provided which will affect the behavior of some methods.\n * A list of the flags can found under FilesystemIterator predefined constants.\n * They can also be set later with <b>FilesystemIterator::setFlags<\/b>\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewinds back to the beginning\n * @link http:\/\/php.net\/filesystemiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next file\n * @link http:\/\/php.net\/filesystemiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Retrieve the key for the current file\n * @link http:\/\/php.net\/filesystemiterator.key.php\n * @return string the pathname or filename depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * The current file\n * @link http:\/\/php.net\/filesystemiterator.current.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the handling flags\n * @link http:\/\/php.net\/filesystemiterator.getflags.php\n * @return int The integer value of the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets handling flags\n * @link http:\/\/php.net\/filesystemiterator.setflags.php\n * @param int $flags [optional] <p>\n * The handling flags to set.\n * See the FilesystemIterator constants.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return file name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/directoryiterator.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Get base name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\n * @param string $suffix [optional] <p>\n * If the base name ends in <i>suffix<\/i>,\n * this will be cut.\n * <\/p>\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Determine if current DirectoryIterator item is '.' or '..'\n * @link http:\/\/php.net\/directoryiterator.isdot.php\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\n * otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether current DirectoryIterator position is a valid file\n * @link http:\/\/php.net\/directoryiterator.valid.php\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Seek to a DirectoryIterator item\n * @link http:\/\/php.net\/directoryiterator.seek.php\n * @param int $position <p>\n * The zero-based numeric position to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get file name as a string\n * @link http:\/\/php.net\/directoryiterator.tostring.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveDirectoryIterator",
        "fqn": "\\RecursiveDirectoryIterator",
        "type": 0,
        "extendsClass": "FilesystemIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Constructs a RecursiveDirectoryIterator\n * @link http:\/\/php.net\/recursivedirectoryiterator.construct.php\n * @param string $path <p>\n * The path of the directory to be iterated over.\n * <\/p>\n * @param int $flags [optional] <p>\n * Flags may be provided which will affect the behavior of some methods.\n * A list of the flags can found under\n * FilesystemIterator predefined constants.\n * They can also be set later with <b>FilesystemIterator::setFlags<\/b>.\n * <\/p>\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allow_links",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns whether current entry is a directory and not '.' or '..'\n * @link http:\/\/php.net\/recursivedirectoryiterator.haschildren.php\n * @param bool $allow_links [optional] <p>\n * <\/p>\n * @return bool whether the current entry is a directory, but not '.' or '..'\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns an iterator for the current entry if it is a directory\n * @link http:\/\/php.net\/recursivedirectoryiterator.getchildren.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator\n * constants.\n *\/"
            },
            {
                "name": "getSubPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get sub path\n * @link http:\/\/php.net\/recursivedirectoryiterator.getsubpath.php\n * @return string The sub path (sub directory).\n *\/"
            },
            {
                "name": "getSubPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get sub path and name\n * @link http:\/\/php.net\/recursivedirectoryiterator.getsubpathname.php\n * @return string The sub path (sub directory) and filename.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewinds back to the beginning\n * @link http:\/\/php.net\/filesystemiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next file\n * @link http:\/\/php.net\/filesystemiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Retrieve the key for the current file\n * @link http:\/\/php.net\/filesystemiterator.key.php\n * @return string the pathname or filename depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * The current file\n * @link http:\/\/php.net\/filesystemiterator.current.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the handling flags\n * @link http:\/\/php.net\/filesystemiterator.getflags.php\n * @return int The integer value of the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets handling flags\n * @link http:\/\/php.net\/filesystemiterator.setflags.php\n * @param int $flags [optional] <p>\n * The handling flags to set.\n * See the FilesystemIterator constants.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return file name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/directoryiterator.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Get base name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\n * @param string $suffix [optional] <p>\n * If the base name ends in <i>suffix<\/i>,\n * this will be cut.\n * <\/p>\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Determine if current DirectoryIterator item is '.' or '..'\n * @link http:\/\/php.net\/directoryiterator.isdot.php\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\n * otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether current DirectoryIterator position is a valid file\n * @link http:\/\/php.net\/directoryiterator.valid.php\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Seek to a DirectoryIterator item\n * @link http:\/\/php.net\/directoryiterator.seek.php\n * @param int $position <p>\n * The zero-based numeric position to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get file name as a string\n * @link http:\/\/php.net\/directoryiterator.tostring.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "GlobIterator",
        "fqn": "\\GlobIterator",
        "type": 0,
        "extendsClass": "FilesystemIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Construct a directory using glob\n * @link http:\/\/php.net\/globiterator.construct.php\n * @param string $path <p>\n * The path of the directory.\n * <\/p>\n * @param int $flags [optional] <p>\n * Option flags, the flags may be a bitmask of the\n * <b>FilesystemIterator<\/b> constants.\n * <\/p>\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the number of directories and files\n * @link http:\/\/php.net\/globiterator.count.php\n * @return int The number of returned directories and files, as an\n * integer.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewinds back to the beginning\n * @link http:\/\/php.net\/filesystemiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next file\n * @link http:\/\/php.net\/filesystemiterator.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Retrieve the key for the current file\n * @link http:\/\/php.net\/filesystemiterator.key.php\n * @return string the pathname or filename depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * The current file\n * @link http:\/\/php.net\/filesystemiterator.current.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get the handling flags\n * @link http:\/\/php.net\/filesystemiterator.getflags.php\n * @return int The integer value of the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets handling flags\n * @link http:\/\/php.net\/filesystemiterator.setflags.php\n * @param int $flags [optional] <p>\n * The handling flags to set.\n * See the FilesystemIterator constants.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Return file name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/directoryiterator.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Get base name of current DirectoryIterator item.\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\n * @param string $suffix [optional] <p>\n * If the base name ends in <i>suffix<\/i>,\n * this will be cut.\n * <\/p>\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Determine if current DirectoryIterator item is '.' or '..'\n * @link http:\/\/php.net\/directoryiterator.isdot.php\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\n * otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Check whether current DirectoryIterator position is a valid file\n * @link http:\/\/php.net\/directoryiterator.valid.php\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Seek to a DirectoryIterator item\n * @link http:\/\/php.net\/directoryiterator.seek.php\n * @param int $position <p>\n * The zero-based numeric position to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get file name as a string\n * @link http:\/\/php.net\/directoryiterator.tostring.php\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplFileObject",
        "fqn": "\\SplFileObject",
        "type": 0,
        "extendsClass": "SplFileInfo",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct a new file object.\n * @link http:\/\/php.net\/splfileobject.construct.php\n * @param string $filename <p>\n * The file to read.\n * <\/p>\n * A URL can be used as a\n * filename with this function if the fopen wrappers have been enabled.\n * See <b>fopen<\/b> for more details on how to specify the\n * filename. See the for links to information\n * about what abilities the various wrappers have, notes on their usage,\n * and information on any predefined variables they may\n * provide.\n * @param string $open_mode [optional] <p>\n * The mode in which to open the file. See <b>fopen<\/b> for a list of allowed modes.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * Whether to search in the include_path for <i>filename<\/i>.\n * <\/p>\n * @param resource $context [optional] <p>\n * A valid context resource created with <b>stream_context_create<\/b>.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the file to the first line\n * @link http:\/\/php.net\/splfileobject.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "eof",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Reached end of file\n * @link http:\/\/php.net\/splfileobject.eof.php\n * @return bool <b>TRUE<\/b> if file is at EOF, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Not at EOF\n * @link http:\/\/php.net\/splfileobject.valid.php\n * @return bool <b>TRUE<\/b> if not reached EOF, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "fgets",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets line from file\n * @link http:\/\/php.net\/splfileobject.fgets.php\n * @return string a string containing the next line from the file, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "fgetcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets line from file and parse as CSV fields\n * @link http:\/\/php.net\/splfileobject.fgetcsv.php\n * @param string $delimiter [optional] <p>\n * The field delimiter (one character only). Defaults as a comma or the value set using <b>SplFileObject::setCsvControl<\/b>.\n * <\/p>\n * @param string $enclosure [optional] <p>\n * The field enclosure character (one character only). Defaults as a double quotation mark or the value set using <b>SplFileObject::setCsvControl<\/b>.\n * <\/p>\n * @param string $escape [optional] <p>\n * The escape character (one character only). Defaults as a backslash (\\) or the value set using <b>SplFileObject::setCsvControl<\/b>.\n * <\/p>\n * @return array an indexed array containing the fields read, or <b>FALSE<\/b> on error.\n * <\/p>\n * <p>\n * A blank line in a CSV file will be returned as an array\n * comprising a single <b>NULL<\/b> field unless using <b>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE<\/b>,\n * in which case empty lines are skipped.\n *\/"
            },
            {
                "name": "fputcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Write a field array as a CSV line\n * @link http:\/\/php.net\/splfileobject.fputcsv.php\n * @param array $fields <p>\n * An array of values.\n * <\/p>\n * @param string $delimiter [optional] <p>\n * The optional <i>delimiter<\/i> parameter sets the field\n * delimiter (one character only).\n * <\/p>\n * @param string $enclosure [optional] <p>\n * The optional <i>enclosure<\/i> parameter sets the field\n * enclosure (one character only).\n * <\/p>\n * @return int the length of the written string or <b>FALSE<\/b> on failure.\n * <\/p>\n * <p>\n * Returns <b>FALSE<\/b>, and does not write the CSV line to the file, if the\n * <i>delimiter<\/i> or <i>enclosure<\/i>\n * parameter is not a single character.\n *\/"
            },
            {
                "name": "setCsvControl",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Set the delimiter and enclosure character for CSV\n * @link http:\/\/php.net\/splfileobject.setcsvcontrol.php\n * @param string $delimiter [optional] <p>\n * The field delimiter (one character only).\n * <\/p>\n * @param string $enclosure [optional] <p>\n * The field enclosure character (one character only).\n * <\/p>\n * @param string $escape [optional] <p>\n * The field escape character (one character only).\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getCsvControl",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get the delimiter and enclosure character for CSV\n * @link http:\/\/php.net\/splfileobject.getcsvcontrol.php\n * @return array an indexed array containing the delimiter and enclosure character.\n *\/"
            },
            {
                "name": "flock",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "operation",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "wouldblock",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Portable file locking\n * @link http:\/\/php.net\/splfileobject.flock.php\n * @param int $operation <p>\n * <i>operation<\/i> is one of the following:\n * <b>LOCK_SH<\/b> to acquire a shared lock (reader).\n * @param int $wouldblock [optional] <p>\n * Set to <b>TRUE<\/b> if the lock would block (EWOULDBLOCK errno condition).\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "fflush",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Flushes the output to the file\n * @link http:\/\/php.net\/splfileobject.fflush.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "ftell",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Return current file position\n * @link http:\/\/php.net\/splfileobject.ftell.php\n * @return int the position of the file pointer as an integer, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "fseek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "whence",
                        "type": null,
                        "byRef": false,
                        "default": "SEEK_SET"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Seek to a position\n * @link http:\/\/php.net\/splfileobject.fseek.php\n * @param int $offset <p>\n * The offset. A negative value can be used to move backwards through the file which\n * is useful when SEEK_END is used as the <i>whence<\/i> value.\n * <\/p>\n * @param int $whence [optional] <p>\n * <i>whence<\/i> values are:\n * <b>SEEK_SET<\/b> - Set position equal to <i>offset<\/i> bytes.\n * <b>SEEK_CUR<\/b> - Set position to current location plus <i>offset<\/i>.\n * <b>SEEK_END<\/b> - Set position to end-of-file plus <i>offset<\/i>.\n * <\/p>\n * <p>\n * If <i>whence<\/i> is not specified, it is assumed to be <b>SEEK_SET<\/b>.\n * <\/p>\n * @return int 0 if the seek was successful, -1 otherwise. Note that seeking\n * past EOF is not considered an error.\n *\/"
            },
            {
                "name": "fgetc",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets character from file\n * @link http:\/\/php.net\/splfileobject.fgetc.php\n * @return string a string containing a single character read from the file or <b>FALSE<\/b> on EOF.\n *\/"
            },
            {
                "name": "fpassthru",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Output all remaining data on a file pointer\n * @link http:\/\/php.net\/splfileobject.fpassthru.php\n * @return int the number of characters read from <i>handle<\/i>\n * and passed through to the output.\n *\/"
            },
            {
                "name": "fgetss",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allowable_tags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets line from file and strip HTML tags\n * @link http:\/\/php.net\/splfileobject.fgetss.php\n * @param string $allowable_tags [optional] <p>\n * Optional parameter to specify tags which should not be stripped.\n * <\/p>\n * @return string a string containing the next line of the file with HTML and PHP\n * code stripped, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "fscanf",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "_",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Parses input from file according to a format\n * @link http:\/\/php.net\/splfileobject.fscanf.php\n * @param string $format <p>\n * The specified format as described in the <b>sprintf<\/b> documentation.\n * <\/p>\n * @param mixed $_ [optional] <p>\n * The optional assigned values.\n * <\/p>\n * @return mixed If only one parameter is passed to this method, the values parsed will be\n * returned as an array. Otherwise, if optional parameters are passed, the\n * function will return the number of assigned values. The optional\n * parameters must be passed by reference.\n *\/"
            },
            {
                "name": "fwrite",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "length",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Write to file\n * @link http:\/\/php.net\/splfileobject.fwrite.php\n * @param string $str <p>\n * The string to be written to the file.\n * <\/p>\n * @param int $length [optional] <p>\n * If the <i>length<\/i> argument is given, writing will\n * stop after <i>length<\/i> bytes have been written or\n * the end of <i>string<\/i> is reached, whichever comes\n * first.\n * <\/p>\n * @return int the number of bytes written, or <b>NULL<\/b> on error.\n *\/"
            },
            {
                "name": "fstat",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets information about the file\n * @link http:\/\/php.net\/splfileobject.fstat.php\n * @return array an array with the statistics of the file; the format of the array\n * is described in detail on the <b>stat<\/b> manual page.\n *\/"
            },
            {
                "name": "ftruncate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Truncates the file to a given length\n * @link http:\/\/php.net\/splfileobject.ftruncate.php\n * @param int $size <p>\n * The size to truncate to.\n * <\/p>\n * <p>\n * If <i>size<\/i> is larger than the file it is extended with null bytes.\n * <\/p>\n * <p>\n * If <i>size<\/i> is smaller than the file, the extra data will be lost.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Retrieve current line of file\n * @link http:\/\/php.net\/splfileobject.current.php\n * @return string|array Retrieves the current line of the file. If the <b>SplFileObject::READ_CSV<\/b> flag is set, this method returns an array containing the current line parsed as CSV data.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get line number\n * @link http:\/\/php.net\/splfileobject.key.php\n * @return int the current line number.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Read next line\n * @link http:\/\/php.net\/splfileobject.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Sets flags for the SplFileObject\n * @link http:\/\/php.net\/splfileobject.setflags.php\n * @param int $flags <p>\n * Bit mask of the flags to set. See\n * SplFileObject constants\n * for the available flags.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets flags for the SplFileObject\n * @link http:\/\/php.net\/splfileobject.getflags.php\n * @return int an integer representing the flags.\n *\/"
            },
            {
                "name": "setMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_len",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Set maximum line length\n * @link http:\/\/php.net\/splfileobject.setmaxlinelen.php\n * @param int $max_len <p>\n * The maximum length of a line.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get maximum line length\n * @link http:\/\/php.net\/splfileobject.getmaxlinelen.php\n * @return int the maximum line length if one has been set with\n * <b>SplFileObject::setMaxLineLen<\/b>, default is 0.\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * SplFileObject does not have children\n * @link http:\/\/php.net\/splfileobject.haschildren.php\n * @return bool <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * No purpose\n * @link http:\/\/php.net\/splfileobject.getchildren.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "line_pos",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Seek to specified line\n * @link http:\/\/php.net\/splfileobject.seek.php\n * @param int $line_pos <p>\n * The zero-based line number to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getCurrentLine",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Alias of <b>SplFileObject::fgets<\/b>\n * @link http:\/\/php.net\/splfileobject.getcurrentline.php\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Alias of <b>SplFileObject::current<\/b>\n * @link http:\/\/php.net\/splfileobject.tostring.php\n * @return void\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the filename\n * @link http:\/\/php.net\/splfileinfo.getfilename.php\n * @return string The filename.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/splfileinfo.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the base name of the file\n * @link http:\/\/php.net\/splfileinfo.getbasename.php\n * @param string $suffix [optional] <p>\n * Optional suffix to omit from the base name returned.\n * <\/p>\n * @return string the base name without path information.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DROP_NEW_LINE",
                "value": 1,
                "doc": null
            },
            {
                "name": "READ_AHEAD",
                "value": 2,
                "doc": null
            },
            {
                "name": "SKIP_EMPTY",
                "value": 4,
                "doc": null
            },
            {
                "name": "READ_CSV",
                "value": 8,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplTempFileObject",
        "fqn": "\\SplTempFileObject",
        "type": 0,
        "extendsClass": "SplFileObject",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_memory",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Construct a new temporary file object\n * @link http:\/\/php.net\/spltempfileobject.construct.php\n * @param int $max_memory [optional] <p>\n * The maximum amount of memory (in bytes, default is 2 MB) for\n * the temporary file to use. If the temporary file exceeds this\n * size, it will be moved to a file in the system's temp directory.\n * <\/p>\n * <p>\n * If <i>max_memory<\/i> is negative, only memory\n * will be used. If <i>max_memory<\/i> is zero,\n * no memory will be used.\n * <\/p>\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the file to the first line\n * @link http:\/\/php.net\/splfileobject.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "eof",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Reached end of file\n * @link http:\/\/php.net\/splfileobject.eof.php\n * @return bool <b>TRUE<\/b> if file is at EOF, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Not at EOF\n * @link http:\/\/php.net\/splfileobject.valid.php\n * @return bool <b>TRUE<\/b> if not reached EOF, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "fgets",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets line from file\n * @link http:\/\/php.net\/splfileobject.fgets.php\n * @return string a string containing the next line from the file, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "fgetcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets line from file and parse as CSV fields\n * @link http:\/\/php.net\/splfileobject.fgetcsv.php\n * @param string $delimiter [optional] <p>\n * The field delimiter (one character only). Defaults as a comma or the value set using <b>SplFileObject::setCsvControl<\/b>.\n * <\/p>\n * @param string $enclosure [optional] <p>\n * The field enclosure character (one character only). Defaults as a double quotation mark or the value set using <b>SplFileObject::setCsvControl<\/b>.\n * <\/p>\n * @param string $escape [optional] <p>\n * The escape character (one character only). Defaults as a backslash (\\) or the value set using <b>SplFileObject::setCsvControl<\/b>.\n * <\/p>\n * @return array an indexed array containing the fields read, or <b>FALSE<\/b> on error.\n * <\/p>\n * <p>\n * A blank line in a CSV file will be returned as an array\n * comprising a single <b>NULL<\/b> field unless using <b>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE<\/b>,\n * in which case empty lines are skipped.\n *\/"
            },
            {
                "name": "fputcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Write a field array as a CSV line\n * @link http:\/\/php.net\/splfileobject.fputcsv.php\n * @param array $fields <p>\n * An array of values.\n * <\/p>\n * @param string $delimiter [optional] <p>\n * The optional <i>delimiter<\/i> parameter sets the field\n * delimiter (one character only).\n * <\/p>\n * @param string $enclosure [optional] <p>\n * The optional <i>enclosure<\/i> parameter sets the field\n * enclosure (one character only).\n * <\/p>\n * @return int the length of the written string or <b>FALSE<\/b> on failure.\n * <\/p>\n * <p>\n * Returns <b>FALSE<\/b>, and does not write the CSV line to the file, if the\n * <i>delimiter<\/i> or <i>enclosure<\/i>\n * parameter is not a single character.\n *\/"
            },
            {
                "name": "setCsvControl",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Set the delimiter and enclosure character for CSV\n * @link http:\/\/php.net\/splfileobject.setcsvcontrol.php\n * @param string $delimiter [optional] <p>\n * The field delimiter (one character only).\n * <\/p>\n * @param string $enclosure [optional] <p>\n * The field enclosure character (one character only).\n * <\/p>\n * @param string $escape [optional] <p>\n * The field escape character (one character only).\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getCsvControl",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get the delimiter and enclosure character for CSV\n * @link http:\/\/php.net\/splfileobject.getcsvcontrol.php\n * @return array an indexed array containing the delimiter and enclosure character.\n *\/"
            },
            {
                "name": "flock",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "operation",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "wouldblock",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Portable file locking\n * @link http:\/\/php.net\/splfileobject.flock.php\n * @param int $operation <p>\n * <i>operation<\/i> is one of the following:\n * <b>LOCK_SH<\/b> to acquire a shared lock (reader).\n * @param int $wouldblock [optional] <p>\n * Set to <b>TRUE<\/b> if the lock would block (EWOULDBLOCK errno condition).\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "fflush",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Flushes the output to the file\n * @link http:\/\/php.net\/splfileobject.fflush.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "ftell",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Return current file position\n * @link http:\/\/php.net\/splfileobject.ftell.php\n * @return int the position of the file pointer as an integer, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "fseek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "whence",
                        "type": null,
                        "byRef": false,
                        "default": "SEEK_SET"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Seek to a position\n * @link http:\/\/php.net\/splfileobject.fseek.php\n * @param int $offset <p>\n * The offset. A negative value can be used to move backwards through the file which\n * is useful when SEEK_END is used as the <i>whence<\/i> value.\n * <\/p>\n * @param int $whence [optional] <p>\n * <i>whence<\/i> values are:\n * <b>SEEK_SET<\/b> - Set position equal to <i>offset<\/i> bytes.\n * <b>SEEK_CUR<\/b> - Set position to current location plus <i>offset<\/i>.\n * <b>SEEK_END<\/b> - Set position to end-of-file plus <i>offset<\/i>.\n * <\/p>\n * <p>\n * If <i>whence<\/i> is not specified, it is assumed to be <b>SEEK_SET<\/b>.\n * <\/p>\n * @return int 0 if the seek was successful, -1 otherwise. Note that seeking\n * past EOF is not considered an error.\n *\/"
            },
            {
                "name": "fgetc",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets character from file\n * @link http:\/\/php.net\/splfileobject.fgetc.php\n * @return string a string containing a single character read from the file or <b>FALSE<\/b> on EOF.\n *\/"
            },
            {
                "name": "fpassthru",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Output all remaining data on a file pointer\n * @link http:\/\/php.net\/splfileobject.fpassthru.php\n * @return int the number of characters read from <i>handle<\/i>\n * and passed through to the output.\n *\/"
            },
            {
                "name": "fgetss",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allowable_tags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets line from file and strip HTML tags\n * @link http:\/\/php.net\/splfileobject.fgetss.php\n * @param string $allowable_tags [optional] <p>\n * Optional parameter to specify tags which should not be stripped.\n * <\/p>\n * @return string a string containing the next line of the file with HTML and PHP\n * code stripped, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "fscanf",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "_",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Parses input from file according to a format\n * @link http:\/\/php.net\/splfileobject.fscanf.php\n * @param string $format <p>\n * The specified format as described in the <b>sprintf<\/b> documentation.\n * <\/p>\n * @param mixed $_ [optional] <p>\n * The optional assigned values.\n * <\/p>\n * @return mixed If only one parameter is passed to this method, the values parsed will be\n * returned as an array. Otherwise, if optional parameters are passed, the\n * function will return the number of assigned values. The optional\n * parameters must be passed by reference.\n *\/"
            },
            {
                "name": "fwrite",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "length",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Write to file\n * @link http:\/\/php.net\/splfileobject.fwrite.php\n * @param string $str <p>\n * The string to be written to the file.\n * <\/p>\n * @param int $length [optional] <p>\n * If the <i>length<\/i> argument is given, writing will\n * stop after <i>length<\/i> bytes have been written or\n * the end of <i>string<\/i> is reached, whichever comes\n * first.\n * <\/p>\n * @return int the number of bytes written, or <b>NULL<\/b> on error.\n *\/"
            },
            {
                "name": "fstat",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets information about the file\n * @link http:\/\/php.net\/splfileobject.fstat.php\n * @return array an array with the statistics of the file; the format of the array\n * is described in detail on the <b>stat<\/b> manual page.\n *\/"
            },
            {
                "name": "ftruncate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Truncates the file to a given length\n * @link http:\/\/php.net\/splfileobject.ftruncate.php\n * @param int $size <p>\n * The size to truncate to.\n * <\/p>\n * <p>\n * If <i>size<\/i> is larger than the file it is extended with null bytes.\n * <\/p>\n * <p>\n * If <i>size<\/i> is smaller than the file, the extra data will be lost.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Retrieve current line of file\n * @link http:\/\/php.net\/splfileobject.current.php\n * @return string|array Retrieves the current line of the file. If the <b>SplFileObject::READ_CSV<\/b> flag is set, this method returns an array containing the current line parsed as CSV data.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get line number\n * @link http:\/\/php.net\/splfileobject.key.php\n * @return int the current line number.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Read next line\n * @link http:\/\/php.net\/splfileobject.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Sets flags for the SplFileObject\n * @link http:\/\/php.net\/splfileobject.setflags.php\n * @param int $flags <p>\n * Bit mask of the flags to set. See\n * SplFileObject constants\n * for the available flags.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets flags for the SplFileObject\n * @link http:\/\/php.net\/splfileobject.getflags.php\n * @return int an integer representing the flags.\n *\/"
            },
            {
                "name": "setMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_len",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Set maximum line length\n * @link http:\/\/php.net\/splfileobject.setmaxlinelen.php\n * @param int $max_len <p>\n * The maximum length of a line.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Get maximum line length\n * @link http:\/\/php.net\/splfileobject.getmaxlinelen.php\n * @return int the maximum line length if one has been set with\n * <b>SplFileObject::setMaxLineLen<\/b>, default is 0.\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * SplFileObject does not have children\n * @link http:\/\/php.net\/splfileobject.haschildren.php\n * @return bool <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * No purpose\n * @link http:\/\/php.net\/splfileobject.getchildren.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "line_pos",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Seek to specified line\n * @link http:\/\/php.net\/splfileobject.seek.php\n * @param int $line_pos <p>\n * The zero-based line number to seek to.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getCurrentLine",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Alias of <b>SplFileObject::fgets<\/b>\n * @link http:\/\/php.net\/splfileobject.getcurrentline.php\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Alias of <b>SplFileObject::current<\/b>\n * @link http:\/\/php.net\/splfileobject.tostring.php\n * @return void\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path without filename\n * @link http:\/\/php.net\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the filename\n * @link http:\/\/php.net\/splfileinfo.getfilename.php\n * @return string The filename.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Gets the file extension\n * @link http:\/\/php.net\/splfileinfo.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the base name of the file\n * @link http:\/\/php.net\/splfileinfo.getbasename.php\n * @param string $suffix [optional] <p>\n * Optional suffix to omit from the base name returned.\n * <\/p>\n * @return string the base name without path information.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the path to the file\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file permissions\n * @link http:\/\/php.net\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode for the file\n * @link http:\/\/php.net\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file size\n * @link http:\/\/php.net\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the owner of the file\n * @link http:\/\/php.net\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the file group\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets last access time of the file\n * @link http:\/\/php.net\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the last modified time\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets the inode change time\n * @link http:\/\/php.net\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets file type\n * @link http:\/\/php.net\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the entry is writable\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if file is readable\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is executable\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the object references a regular file\n * @link http:\/\/php.net\/splfileinfo.isfile.php\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a directory\n * @link http:\/\/php.net\/splfileinfo.isdir.php\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Tells if the file is a link\n * @link http:\/\/php.net\/splfileinfo.islink.php\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets the target of a link\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Gets absolute path to file\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the file\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileInfo object for the path\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\n * @param string $class_name [optional] <p>\n * Name of an <b>SplFileInfo<\/b> derived class to use.\n * <\/p>\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Gets an SplFileObject object for the file\n * @link http:\/\/php.net\/splfileinfo.openfile.php\n * @param string $open_mode [optional] <p>\n * The mode for opening the file. See the <b>fopen<\/b>\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param bool $use_include_path [optional] <p>\n * When set to <b>TRUE<\/b>, the filename is also\n * searched for within the include_path\n * <\/p>\n * @param resource $context [optional] <p>\n * Refer to the context\n * section of the manual for a description of contexts.\n * <\/p>\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\n * @param string $class_name [optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.2)<br\/>\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\n * @param string $class_name [optional] <p>\n * The class name to use.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DROP_NEW_LINE",
                "value": 1,
                "doc": null
            },
            {
                "name": "READ_AHEAD",
                "value": 2,
                "doc": null
            },
            {
                "name": "SKIP_EMPTY",
                "value": 4,
                "doc": null
            },
            {
                "name": "READ_CSV",
                "value": 8,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplDoublyLinkedList",
        "fqn": "\\SplDoublyLinkedList",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "pop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Pops a node from the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.pop.php\n * @return mixed The value of the popped node.\n *\/"
            },
            {
                "name": "shift",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Shifts a node from the beginning of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.shift.php\n * @return mixed The value of the shifted node.\n *\/"
            },
            {
                "name": "push",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Pushes an element at the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.push.php\n * @param mixed $value <p>\n * The value to push.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unshift",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Prepends the doubly linked list with an element\n * @link http:\/\/php.net\/spldoublylinkedlist.unshift.php\n * @param mixed $value <p>\n * The value to unshift.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.top.php\n * @return mixed The value of the last node.\n *\/"
            },
            {
                "name": "bottom",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the beginning of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.bottom.php\n * @return mixed The value of the first node.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the doubly linked list is empty.\n * @link http:\/\/php.net\/spldoublylinkedlist.isempty.php\n * @return bool whether the doubly linked list is empty.\n *\/"
            },
            {
                "name": "setIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the mode of iteration\n * @link http:\/\/php.net\/spldoublylinkedlist.setiteratormode.php\n * @param int $mode <p>\n * There are two orthogonal sets of modes that can be set:\n * <\/p>\n * The direction of the iteration (either one or the other):\n * <b>SplDoublyLinkedList::IT_MODE_LIFO<\/b> (Stack style)\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the mode of iteration\n * @link http:\/\/php.net\/spldoublylinkedlist.getiteratormode.php\n * @return int the different modes and flags that affect the iteration.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the doubly linked list.\n * @link http:\/\/php.net\/spldoublylinkedlist.count.php\n * @return int the number of elements in the doubly linked list.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns whether the requested $index exists\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetexists.php\n * @param mixed $index <p>\n * The index being checked.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the value at the specified $index\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetget.php\n * @param mixed $index <p>\n * The index with the value.\n * <\/p>\n * @return mixed The value at the specified <i>index<\/i>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the value at the specified $index to $newval\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetset.php\n * @param mixed $index <p>\n * The index being set.\n * <\/p>\n * @param mixed $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unsets the value at the specified $index\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetunset.php\n * @param mixed $index <p>\n * The index being unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start\n * @link http:\/\/php.net\/spldoublylinkedlist.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current array entry\n * @link http:\/\/php.net\/spldoublylinkedlist.current.php\n * @return mixed The current node value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/spldoublylinkedlist.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to next entry\n * @link http:\/\/php.net\/spldoublylinkedlist.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "prev",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to previous entry\n * @link http:\/\/php.net\/spldoublylinkedlist.prev.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the doubly linked list contains more nodes\n * @link http:\/\/php.net\/spldoublylinkedlist.valid.php\n * @return bool <b>TRUE<\/b> if the doubly linked list contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Unserializes the storage\n * @link http:\/\/php.net\/spldoublylinkedlist.unserialize.php\n * @param string $serialized <p>\n * The serialized string.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Serializes the storage\n * @link http:\/\/php.net\/spldoublylinkedlist.serialize.php\n * @return string The serialized string.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "IT_MODE_LIFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "IT_MODE_FIFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "IT_MODE_DELETE",
                "value": 1,
                "doc": null
            },
            {
                "name": "IT_MODE_KEEP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplQueue",
        "fqn": "\\SplQueue",
        "type": 0,
        "extendsClass": "SplDoublyLinkedList",
        "methods": [
            {
                "name": "enqueue",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Adds an element to the queue.\n * @link http:\/\/php.net\/splqueue.enqueue.php\n * @param mixed $value <p>\n * The value to enqueue.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "dequeue",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Dequeues a node from the queue\n * @link http:\/\/php.net\/splqueue.dequeue.php\n * @return mixed The value of the dequeued node.\n *\/"
            },
            {
                "name": "pop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Pops a node from the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.pop.php\n * @return mixed The value of the popped node.\n *\/"
            },
            {
                "name": "shift",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Shifts a node from the beginning of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.shift.php\n * @return mixed The value of the shifted node.\n *\/"
            },
            {
                "name": "push",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Pushes an element at the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.push.php\n * @param mixed $value <p>\n * The value to push.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unshift",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Prepends the doubly linked list with an element\n * @link http:\/\/php.net\/spldoublylinkedlist.unshift.php\n * @param mixed $value <p>\n * The value to unshift.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.top.php\n * @return mixed The value of the last node.\n *\/"
            },
            {
                "name": "bottom",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the beginning of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.bottom.php\n * @return mixed The value of the first node.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the doubly linked list is empty.\n * @link http:\/\/php.net\/spldoublylinkedlist.isempty.php\n * @return bool whether the doubly linked list is empty.\n *\/"
            },
            {
                "name": "setIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the mode of iteration\n * @link http:\/\/php.net\/spldoublylinkedlist.setiteratormode.php\n * @param int $mode <p>\n * There are two orthogonal sets of modes that can be set:\n * <\/p>\n * The direction of the iteration (either one or the other):\n * <b>SplDoublyLinkedList::IT_MODE_LIFO<\/b> (Stack style)\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the mode of iteration\n * @link http:\/\/php.net\/spldoublylinkedlist.getiteratormode.php\n * @return int the different modes and flags that affect the iteration.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the doubly linked list.\n * @link http:\/\/php.net\/spldoublylinkedlist.count.php\n * @return int the number of elements in the doubly linked list.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns whether the requested $index exists\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetexists.php\n * @param mixed $index <p>\n * The index being checked.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the value at the specified $index\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetget.php\n * @param mixed $index <p>\n * The index with the value.\n * <\/p>\n * @return mixed The value at the specified <i>index<\/i>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the value at the specified $index to $newval\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetset.php\n * @param mixed $index <p>\n * The index being set.\n * <\/p>\n * @param mixed $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unsets the value at the specified $index\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetunset.php\n * @param mixed $index <p>\n * The index being unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start\n * @link http:\/\/php.net\/spldoublylinkedlist.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current array entry\n * @link http:\/\/php.net\/spldoublylinkedlist.current.php\n * @return mixed The current node value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/spldoublylinkedlist.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to next entry\n * @link http:\/\/php.net\/spldoublylinkedlist.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "prev",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to previous entry\n * @link http:\/\/php.net\/spldoublylinkedlist.prev.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the doubly linked list contains more nodes\n * @link http:\/\/php.net\/spldoublylinkedlist.valid.php\n * @return bool <b>TRUE<\/b> if the doubly linked list contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Unserializes the storage\n * @link http:\/\/php.net\/spldoublylinkedlist.unserialize.php\n * @param string $serialized <p>\n * The serialized string.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Serializes the storage\n * @link http:\/\/php.net\/spldoublylinkedlist.serialize.php\n * @return string The serialized string.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "IT_MODE_LIFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "IT_MODE_FIFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "IT_MODE_DELETE",
                "value": 1,
                "doc": null
            },
            {
                "name": "IT_MODE_KEEP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplStack",
        "fqn": "\\SplStack",
        "type": 0,
        "extendsClass": "SplDoublyLinkedList",
        "methods": [
            {
                "name": "pop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Pops a node from the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.pop.php\n * @return mixed The value of the popped node.\n *\/"
            },
            {
                "name": "shift",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Shifts a node from the beginning of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.shift.php\n * @return mixed The value of the shifted node.\n *\/"
            },
            {
                "name": "push",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Pushes an element at the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.push.php\n * @param mixed $value <p>\n * The value to push.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unshift",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Prepends the doubly linked list with an element\n * @link http:\/\/php.net\/spldoublylinkedlist.unshift.php\n * @param mixed $value <p>\n * The value to unshift.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the end of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.top.php\n * @return mixed The value of the last node.\n *\/"
            },
            {
                "name": "bottom",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the beginning of the doubly linked list\n * @link http:\/\/php.net\/spldoublylinkedlist.bottom.php\n * @return mixed The value of the first node.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the doubly linked list is empty.\n * @link http:\/\/php.net\/spldoublylinkedlist.isempty.php\n * @return bool whether the doubly linked list is empty.\n *\/"
            },
            {
                "name": "setIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the mode of iteration\n * @link http:\/\/php.net\/spldoublylinkedlist.setiteratormode.php\n * @param int $mode <p>\n * There are two orthogonal sets of modes that can be set:\n * <\/p>\n * The direction of the iteration (either one or the other):\n * <b>SplDoublyLinkedList::IT_MODE_LIFO<\/b> (Stack style)\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the mode of iteration\n * @link http:\/\/php.net\/spldoublylinkedlist.getiteratormode.php\n * @return int the different modes and flags that affect the iteration.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the doubly linked list.\n * @link http:\/\/php.net\/spldoublylinkedlist.count.php\n * @return int the number of elements in the doubly linked list.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns whether the requested $index exists\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetexists.php\n * @param mixed $index <p>\n * The index being checked.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the value at the specified $index\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetget.php\n * @param mixed $index <p>\n * The index with the value.\n * <\/p>\n * @return mixed The value at the specified <i>index<\/i>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the value at the specified $index to $newval\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetset.php\n * @param mixed $index <p>\n * The index being set.\n * <\/p>\n * @param mixed $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unsets the value at the specified $index\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetunset.php\n * @param mixed $index <p>\n * The index being unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start\n * @link http:\/\/php.net\/spldoublylinkedlist.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current array entry\n * @link http:\/\/php.net\/spldoublylinkedlist.current.php\n * @return mixed The current node value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/spldoublylinkedlist.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to next entry\n * @link http:\/\/php.net\/spldoublylinkedlist.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "prev",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to previous entry\n * @link http:\/\/php.net\/spldoublylinkedlist.prev.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the doubly linked list contains more nodes\n * @link http:\/\/php.net\/spldoublylinkedlist.valid.php\n * @return bool <b>TRUE<\/b> if the doubly linked list contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Unserializes the storage\n * @link http:\/\/php.net\/spldoublylinkedlist.unserialize.php\n * @param string $serialized <p>\n * The serialized string.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Serializes the storage\n * @link http:\/\/php.net\/spldoublylinkedlist.serialize.php\n * @return string The serialized string.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "IT_MODE_LIFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "IT_MODE_FIFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "IT_MODE_DELETE",
                "value": 1,
                "doc": null
            },
            {
                "name": "IT_MODE_KEEP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplHeap",
        "fqn": "\\SplHeap",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Extracts a node from top of the heap and sift up.\n * @link http:\/\/php.net\/splheap.extract.php\n * @return mixed The value of the extracted node.\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Inserts an element in the heap by sifting it up.\n * @link http:\/\/php.net\/splheap.insert.php\n * @param mixed $value <p>\n * The value to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the top of the heap\n * @link http:\/\/php.net\/splheap.top.php\n * @return mixed The value of the node on the top.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the heap.\n * @link http:\/\/php.net\/splheap.count.php\n * @return int the number of elements in the heap.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the heap is empty.\n * @link http:\/\/php.net\/splheap.isempty.php\n * @return bool whether the heap is empty.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start (no-op)\n * @link http:\/\/php.net\/splheap.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node pointed by the iterator\n * @link http:\/\/php.net\/splheap.current.php\n * @return mixed The current node value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/splheap.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next node\n * @link http:\/\/php.net\/splheap.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the heap contains more nodes\n * @link http:\/\/php.net\/splheap.valid.php\n * @return bool <b>TRUE<\/b> if the heap contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Recover from the corrupted state and allow further actions on the heap.\n * @link http:\/\/php.net\/splheap.recoverfromcorruption.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "compare",
                "type": 18,
                "byRef": false,
                "params": [
                    {
                        "name": "value1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Compare elements in order to place them correctly in the heap while sifting up.\n * @link http:\/\/php.net\/splheap.compare.php\n * @param mixed $value1 <p>\n * The value of the first node being compared.\n * <\/p>\n * @param mixed $value2 <p>\n * The value of the second node being compared.\n * <\/p>\n * @return int Result of the comparison, positive integer if <i>value1<\/i> is greater than <i>value2<\/i>, 0 if they are equal, negative integer otherwise.\n * <\/p>\n * <p>\n * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplMinHeap",
        "fqn": "\\SplMinHeap",
        "type": 0,
        "extendsClass": "SplHeap",
        "methods": [
            {
                "name": "compare",
                "type": 2,
                "byRef": false,
                "params": [
                    {
                        "name": "value1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Compare elements in order to place them correctly in the heap while sifting up.\n * @link http:\/\/php.net\/splminheap.compare.php\n * @param mixed $value1 <p>\n * The value of the first node being compared.\n * <\/p>\n * @param mixed $value2 <p>\n * The value of the second node being compared.\n * <\/p>\n * @return int Result of the comparison, positive integer if <i>value1<\/i> is lower than <i>value2<\/i>, 0 if they are equal, negative integer otherwise.\n * <\/p>\n * <p>\n * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n *\/"
            },
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Extracts a node from top of the heap and sift up.\n * @link http:\/\/php.net\/splheap.extract.php\n * @return mixed The value of the extracted node.\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Inserts an element in the heap by sifting it up.\n * @link http:\/\/php.net\/splheap.insert.php\n * @param mixed $value <p>\n * The value to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the top of the heap\n * @link http:\/\/php.net\/splheap.top.php\n * @return mixed The value of the node on the top.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the heap.\n * @link http:\/\/php.net\/splheap.count.php\n * @return int the number of elements in the heap.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the heap is empty.\n * @link http:\/\/php.net\/splheap.isempty.php\n * @return bool whether the heap is empty.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start (no-op)\n * @link http:\/\/php.net\/splheap.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node pointed by the iterator\n * @link http:\/\/php.net\/splheap.current.php\n * @return mixed The current node value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/splheap.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next node\n * @link http:\/\/php.net\/splheap.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the heap contains more nodes\n * @link http:\/\/php.net\/splheap.valid.php\n * @return bool <b>TRUE<\/b> if the heap contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Recover from the corrupted state and allow further actions on the heap.\n * @link http:\/\/php.net\/splheap.recoverfromcorruption.php\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplMaxHeap",
        "fqn": "\\SplMaxHeap",
        "type": 0,
        "extendsClass": "SplHeap",
        "methods": [
            {
                "name": "compare",
                "type": 2,
                "byRef": false,
                "params": [
                    {
                        "name": "value1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Compare elements in order to place them correctly in the heap while sifting up.\n * @link http:\/\/php.net\/splmaxheap.compare.php\n * @param mixed $value1 <p>\n * The value of the first node being compared.\n * <\/p>\n * @param mixed $value2 <p>\n * The value of the second node being compared.\n * <\/p>\n * @return int Result of the comparison, positive integer if <i>value1<\/i> is greater than <i>value2<\/i>, 0 if they are equal, negative integer otherwise.\n * <\/p>\n * <p>\n * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\n *\/"
            },
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Extracts a node from top of the heap and sift up.\n * @link http:\/\/php.net\/splheap.extract.php\n * @return mixed The value of the extracted node.\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Inserts an element in the heap by sifting it up.\n * @link http:\/\/php.net\/splheap.insert.php\n * @param mixed $value <p>\n * The value to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the top of the heap\n * @link http:\/\/php.net\/splheap.top.php\n * @return mixed The value of the node on the top.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the heap.\n * @link http:\/\/php.net\/splheap.count.php\n * @return int the number of elements in the heap.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the heap is empty.\n * @link http:\/\/php.net\/splheap.isempty.php\n * @return bool whether the heap is empty.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start (no-op)\n * @link http:\/\/php.net\/splheap.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node pointed by the iterator\n * @link http:\/\/php.net\/splheap.current.php\n * @return mixed The current node value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/splheap.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next node\n * @link http:\/\/php.net\/splheap.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the heap contains more nodes\n * @link http:\/\/php.net\/splheap.valid.php\n * @return bool <b>TRUE<\/b> if the heap contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Recover from the corrupted state and allow further actions on the heap.\n * @link http:\/\/php.net\/splheap.recoverfromcorruption.php\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplPriorityQueue",
        "fqn": "\\SplPriorityQueue",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "compare",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "priority1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "priority2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Compare priorities in order to place elements correctly in the heap while sifting up.\n * @link http:\/\/php.net\/splpriorityqueue.compare.php\n * @param mixed $priority1 <p>\n * The priority of the first node being compared.\n * <\/p>\n * @param mixed $priority2 <p>\n * The priority of the second node being compared.\n * <\/p>\n * @return int Result of the comparison, positive integer if <i>priority1<\/i> is greater than <i>priority2<\/i>, 0 if they are equal, negative integer otherwise.\n * <\/p>\n * <p>\n * Multiple elements with the same priority will get dequeued in no particular order.\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "priority",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Inserts an element in the queue by sifting it up.\n * @link http:\/\/php.net\/splpriorityqueue.insert.php\n * @param mixed $value <p>\n * The value to insert.\n * <\/p>\n * @param mixed $priority <p>\n * The associated priority.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setExtractFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the mode of extraction\n * @link http:\/\/php.net\/splpriorityqueue.setextractflags.php\n * @param int $flags <p>\n * Defines what is extracted by <b>SplPriorityQueue::current<\/b>,\n * <b>SplPriorityQueue::top<\/b> and\n * <b>SplPriorityQueue::extract<\/b>.\n * <\/p>\n * <b>SplPriorityQueue::EXTR_DATA<\/b> (0x00000001): Extract the data\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Peeks at the node from the top of the queue\n * @link http:\/\/php.net\/splpriorityqueue.top.php\n * @return mixed The value or priority (or both) of the top node, depending on the extract flag.\n *\/"
            },
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Extracts a node from top of the heap and sift up.\n * @link http:\/\/php.net\/splpriorityqueue.extract.php\n * @return mixed The value or priority (or both) of the extracted node, depending on the extract flag.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Counts the number of elements in the queue.\n * @link http:\/\/php.net\/splpriorityqueue.count.php\n * @return int the number of elements in the queue.\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether the queue is empty.\n * @link http:\/\/php.net\/splpriorityqueue.isempty.php\n * @return bool whether the queue is empty.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start (no-op)\n * @link http:\/\/php.net\/splpriorityqueue.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node pointed by the iterator\n * @link http:\/\/php.net\/splpriorityqueue.current.php\n * @return mixed The value or priority (or both) of the current node, depending on the extract flag.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current node index\n * @link http:\/\/php.net\/splpriorityqueue.key.php\n * @return mixed The current node index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to the next node\n * @link http:\/\/php.net\/splpriorityqueue.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the queue contains more nodes\n * @link http:\/\/php.net\/splpriorityqueue.valid.php\n * @return bool <b>TRUE<\/b> if the queue contains any more nodes, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Recover from the corrupted state and allow further actions on the queue.\n * @link http:\/\/php.net\/splpriorityqueue.recoverfromcorruption.php\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "EXTR_BOTH",
                "value": 3,
                "doc": null
            },
            {
                "name": "EXTR_PRIORITY",
                "value": 2,
                "doc": null
            },
            {
                "name": "EXTR_DATA",
                "value": 1,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplFixedArray",
        "fqn": "\\SplFixedArray",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Constructs a new fixed array\n * @link http:\/\/php.net\/splfixedarray.construct.php\n * @param $size [optional]\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the size of the array\n * @link http:\/\/php.net\/splfixedarray.count.php\n * @return int the size of the array.\n *\/"
            },
            {
                "name": "toArray",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns a PHP array from the fixed array\n * @link http:\/\/php.net\/splfixedarray.toarray.php\n * @return array a PHP array, similar to the fixed array.\n *\/"
            },
            {
                "name": "fromArray",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "save_indexes",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Import a PHP array in a <b>SplFixedArray<\/b> instance\n * @link http:\/\/php.net\/splfixedarray.fromarray.php\n * @param array $array <p>\n * The array to import.\n * <\/p>\n * @param bool $save_indexes [optional] <p>\n * Try to save the numeric indexes used in the original array.\n * <\/p>\n * @return SplFixedArray an instance of <b>SplFixedArray<\/b>\n * containing the array content.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Gets the size of the array\n * @link http:\/\/php.net\/splfixedarray.getsize.php\n * @return int the size of the array, as an integer.\n *\/"
            },
            {
                "name": "setSize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Change the size of an array\n * @link http:\/\/php.net\/splfixedarray.setsize.php\n * @param int $size <p>\n * The new array size. This should be a value between 0 and <b>PHP_INT_MAX<\/b>.\n * <\/p>\n * @return int No value is returned.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns whether the requested index exists\n * @link http:\/\/php.net\/splfixedarray.offsetexists.php\n * @param int $index <p>\n * The index being checked.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the value at the specified index\n * @link http:\/\/php.net\/splfixedarray.offsetget.php\n * @param int $index <p>\n * The index with the value.\n * <\/p>\n * @return mixed The value at the specified <i>index<\/i>.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets a new value at a specified index\n * @link http:\/\/php.net\/splfixedarray.offsetset.php\n * @param int $index <p>\n * The index being set.\n * <\/p>\n * @param mixed $newval <p>\n * The new value for the <i>index<\/i>.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Unsets the value at the specified $index\n * @link http:\/\/php.net\/splfixedarray.offsetunset.php\n * @param int $index <p>\n * The index being unset.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewind iterator back to the start\n * @link http:\/\/php.net\/splfixedarray.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current array entry\n * @link http:\/\/php.net\/splfixedarray.current.php\n * @return mixed The current element value.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Return current array index\n * @link http:\/\/php.net\/splfixedarray.key.php\n * @return int The current array index.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Move to next entry\n * @link http:\/\/php.net\/splfixedarray.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Check whether the array contains more elements\n * @link http:\/\/php.net\/splfixedarray.valid.php\n * @return bool <b>TRUE<\/b> if the array contains any more elements, <b>FALSE<\/b> otherwise.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplObjectStorage",
        "fqn": "\\SplObjectStorage",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "attach",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Adds an object in the storage\n * @link http:\/\/php.net\/splobjectstorage.attach.php\n * @param object $object <p>\n * The object to add.\n * <\/p>\n * @param mixed $data [optional] <p>\n * The data to associate with the object.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "detach",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Removes an object from the storage\n * @link http:\/\/php.net\/splobjectstorage.detach.php\n * @param object $object <p>\n * The object to remove.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "contains",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Checks if the storage contains a specific object\n * @link http:\/\/php.net\/splobjectstorage.contains.php\n * @param object $object <p>\n * The object to look for.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the object is in the storage, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "addAll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "storage",
                        "type": "SplObjectStorage",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Adds all objects from another storage\n * @link http:\/\/php.net\/splobjectstorage.addall.php\n * @param SplObjectStorage $storage <p>\n * The storage you want to import.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "removeAll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "storage",
                        "type": "SplObjectStorage",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Removes objects contained in another storage from the current storage\n * @link http:\/\/php.net\/splobjectstorage.removeall.php\n * @param SplObjectStorage $storage <p>\n * The storage containing the elements to remove.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "removeAllExcept",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "storage",
                        "type": "SplObjectStorage",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.6)<br\/>\n * Removes all objects except for those contained in another storage from the current storage\n * @link http:\/\/php.net\/splobjectstorage.removeallexcept.php\n * @param SplObjectStorage $storage <p>\n * The storage containing the elements to retain in the current storage.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getInfo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the data associated with the current iterator entry\n * @link http:\/\/php.net\/splobjectstorage.getinfo.php\n * @return mixed The data associated with the current iterator position.\n *\/"
            },
            {
                "name": "setInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets the data associated with the current iterator entry\n * @link http:\/\/php.net\/splobjectstorage.setinfo.php\n * @param mixed $data <p>\n * The data to associate with the current iterator entry.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "getHash",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.4.0)<br\/>\n * Calculate a unique identifier for the contained objects\n * @link http:\/\/php.net\/splobjectstorage.gethash.php\n * @param object $object <p>\n * The object whose identifier is to be calculated.\n * <\/p>\n * @return string A string with the calculated identifier.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns the number of objects in the storage\n * @link http:\/\/php.net\/splobjectstorage.count.php\n * @return int The number of objects in the storage.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Rewind the iterator to the first storage element\n * @link http:\/\/php.net\/splobjectstorage.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns if the current iterator entry is valid\n * @link http:\/\/php.net\/splobjectstorage.valid.php\n * @return bool <b>TRUE<\/b> if the iterator entry is valid, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns the index at which the iterator currently is\n * @link http:\/\/php.net\/splobjectstorage.key.php\n * @return int The index corresponding to the position of the iterator.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Returns the current storage entry\n * @link http:\/\/php.net\/splobjectstorage.current.php\n * @return object The object at the current iterator position.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Move to the next entry\n * @link http:\/\/php.net\/splobjectstorage.next.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Unserializes a storage from its string representation\n * @link http:\/\/php.net\/splobjectstorage.unserialize.php\n * @param string $serialized <p>\n * The serialized representation of a storage.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.2)<br\/>\n * Serializes the storage\n * @link http:\/\/php.net\/splobjectstorage.serialize.php\n * @return string A string representing the storage.\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks whether an object exists in the storage\n * @link http:\/\/php.net\/splobjectstorage.offsetexists.php\n * @param object $object <p>\n * The object to look for.\n * <\/p>\n * @return bool <b>TRUE<\/b> if the object exists in the storage,\n * and <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Associates data to an object in the storage\n * @link http:\/\/php.net\/splobjectstorage.offsetset.php\n * @param object $object <p>\n * The object to associate data with.\n * <\/p>\n * @param mixed $data [optional] <p>\n * The data to associate with the object.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Removes an object from the storage\n * @link http:\/\/php.net\/splobjectstorage.offsetunset.php\n * @param object $object <p>\n * The object to remove.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns the data associated with an object\n * @link http:\/\/php.net\/splobjectstorage.offsetget.php\n * @param object $object <p>\n * The object to look for.\n * <\/p>\n * @return mixed The data previously associated with the object in the storage.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MultipleIterator",
        "fqn": "\\MultipleIterator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Constructs a new MultipleIterator\n * @link http:\/\/php.net\/multipleiterator.construct.php\n * @param $flags\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Gets the flag information\n * @link http:\/\/php.net\/multipleiterator.getflags.php\n * @return void Information about the flags, as an integer.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Sets flags\n * @link http:\/\/php.net\/multipleiterator.setflags.php\n * @param int $flags <p>\n * The flags to set, according to the\n * Flag Constants\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "attachIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "infos",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Attaches iterator information\n * @link http:\/\/php.net\/multipleiterator.attachiterator.php\n * @param Iterator $iterator <p>\n * The new iterator to attach.\n * <\/p>\n * @param string $infos [optional] <p>\n * The associative information for the Iterator, which must be an\n * integer, a string, or <b>NULL<\/b>.\n * <\/p>\n * @return void Description...\n *\/"
            },
            {
                "name": "detachIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Detaches an iterator\n * @link http:\/\/php.net\/multipleiterator.detachiterator.php\n * @param Iterator $iterator <p>\n * The iterator to detach.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "containsIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks if an iterator is attached\n * @link http:\/\/php.net\/multipleiterator.containsiterator.php\n * @param Iterator $iterator <p>\n * The iterator to check.\n * <\/p>\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "countIterators",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Gets the number of attached iterator instances\n * @link http:\/\/php.net\/multipleiterator.countiterators.php\n * @return void The number of attached iterator instances (as an integer).\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Rewinds all attached iterator instances\n * @link http:\/\/php.net\/multipleiterator.rewind.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Checks the validity of sub iterators\n * @link http:\/\/php.net\/multipleiterator.valid.php\n * @return void <b>TRUE<\/b> if one or all sub iterators are valid depending on flags,\n * otherwise <b>FALSE<\/b>\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Gets the registered iterator instances\n * @link http:\/\/php.net\/multipleiterator.key.php\n * @return array An array of all registered iterator instances,\n * or <b>FALSE<\/b> if no sub iterator is attached.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Gets the registered iterator instances\n * @link http:\/\/php.net\/multipleiterator.current.php\n * @return array An array containing the current values of each attached iterator,\n * or <b>FALSE<\/b> if no iterators are attached.\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Moves all attached iterator instances forward\n * @link http:\/\/php.net\/multipleiterator.next.php\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "MIT_NEED_ANY",
                "value": 0,
                "doc": null
            },
            {
                "name": "MIT_NEED_ALL",
                "value": 1,
                "doc": null
            },
            {
                "name": "MIT_KEYS_NUMERIC",
                "value": 0,
                "doc": null
            },
            {
                "name": "MIT_KEYS_ASSOC",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_classes",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload",
        "params": [
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "file_extensions",
                "type": null,
                "byRef": false,
                "default": "spl_autoload_extensions()"
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_extensions",
        "params": [
            {
                "name": "file_extensions",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_register",
        "params": [
            {
                "name": "autoload_function",
                "type": "callable",
                "byRef": false,
                "default": null
            },
            {
                "name": "throw",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "prepend",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_unregister",
        "params": [
            {
                "name": "autoload_function",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_functions",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_call",
        "params": [
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "class_parents",
        "params": [
            {
                "name": "class",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "autoload",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "class_implements",
        "params": [
            {
                "name": "class",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "autoload",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "class_uses",
        "params": [
            {
                "name": "class",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "autoload",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_object_hash",
        "params": [
            {
                "name": "obj",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "iterator_to_array",
        "params": [
            {
                "name": "iterator",
                "type": "Traversable",
                "byRef": false,
                "default": ""
            },
            {
                "name": "use_keys",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "iterator_count",
        "params": [
            {
                "name": "iterator",
                "type": "Traversable",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "iterator_apply",
        "params": [
            {
                "name": "iterator",
                "type": "Traversable",
                "byRef": false,
                "default": ""
            },
            {
                "name": "function",
                "type": "callable",
                "byRef": false,
                "default": ""
            },
            {
                "name": "args",
                "type": "array",
                "byRef": false,
                "default": null
            }
        ]
    }
]
