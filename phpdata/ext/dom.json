[
    {
        "stmtType": "Class",
        "name": "DOMException",
        "fqn": "\\DOMException",
        "type": 0,
        "extendsClass": "Exception",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct the exception\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\n * @param $message [optional]\n * @param $code [optional]\n * @param $previous [optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the Exception message\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\n * @return string the Exception message as a string.\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the Exception code\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\n * @return mixed the exception code as integer in\n * <b>Exception<\/b> but possibly as other type in\n * <b>Exception<\/b> descendants (for example as\n * string in <b>PDOException<\/b>).\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the file in which the exception occurred\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\n * @return string the filename in which the exception was created.\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the line in which the exception occurred\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\n * @return int the line number where the exception was created.\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the stack trace\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\n * @return array the Exception stack trace as an array.\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns previous Exception\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\n * @return Exception the previous <b>Exception<\/b> if available\n * or <b>NULL<\/b> otherwise.\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the stack trace as a string\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\n * @return string the Exception stack trace as a string.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * String representation of the exception\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\n * @return string the string representation of the exception.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "type": 2,
                "doc": null
            },
            {
                "name": "file",
                "type": 2,
                "doc": null
            },
            {
                "name": "line",
                "type": 2,
                "doc": null
            },
            {
                "name": "code",
                "type": 1,
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMStringList",
        "fqn": "\\DOMStringList",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $index\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNameList",
        "fqn": "\\DOMNameList",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $index\n *\/"
            },
            {
                "name": "getNamespaceURI",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $index\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMImplementationList",
        "fqn": "\\DOMImplementationList",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $index\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMImplementationSource",
        "fqn": "\\DOMImplementationSource",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "getDomimplementation",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "features",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $features\n *\/"
            },
            {
                "name": "getDomimplementations",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "features",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $features\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMImplementation",
        "fqn": "\\DOMImplementation",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "hasFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Test if the DOM implementation implements a specific feature\n * @link http:\/\/php.net\/manual\/en\/domimplementation.hasfeature.php\n * @param string $feature <p>\n * The feature to test.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test. In\n * level 2, this can be either 2.0 or\n * 1.0.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "createDocumentType",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "publicId",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "systemId",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates an empty DOMDocumentType object\n * @link http:\/\/php.net\/manual\/en\/domimplementation.createdocumenttype.php\n * @param string $qualifiedName [optional] <p>\n * The qualified name of the document type to create.\n * <\/p>\n * @param string $publicId [optional] <p>\n * The external subset public identifier.\n * <\/p>\n * @param string $systemId [optional] <p>\n * The external subset system identifier.\n * <\/p>\n * @return DOMDocumentType A new <b>DOMDocumentType<\/b> node with its\n * ownerDocument set to <b>NULL<\/b>.\n *\/"
            },
            {
                "name": "createDocument",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "doctype",
                        "type": "DOMDocumentType",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a DOMDocument object of the specified type with its document element\n * @link http:\/\/php.net\/manual\/en\/domimplementation.createdocument.php\n * @param string $namespaceURI [optional] <p>\n * The namespace URI of the document element to create.\n * <\/p>\n * @param string $qualifiedName [optional] <p>\n * The qualified name of the document element to create.\n * <\/p>\n * @param DOMDocumentType $doctype [optional] <p>\n * The type of document to create or <b>NULL<\/b>.\n * <\/p>\n * @return DOMDocument A new <b>DOMDocument<\/b> object. If\n * <i>namespaceURI<\/i>, <i>qualifiedName<\/i>,\n * and <i>doctype<\/i> are null, the returned\n * <b>DOMDocument<\/b> is empty with no document element\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNode",
        "fqn": "\\DOMNode",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "nodeName",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Returns the most accurate name for the current node type<\/p>\n * @var string\n *\/"
            },
            {
                "name": "nodeValue",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The value of this node, depending on its type<\/p>\n * @var string\n *\/"
            },
            {
                "name": "nodeType",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Gets the type of the node. One of the predefined <b>XML_xxx_NODE constants<\/b><\/p>\n * @var int\n *\/"
            },
            {
                "name": "parentNode",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The parent of this node<\/p>\n * @var DOMNode\n *\/"
            },
            {
                "name": "childNodes",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * A <b>DOMNodeList<\/b> that contains all\n * children of this node. If there are no children, this is an empty\n * <b>DOMNodeList<\/b>.\n * <\/p>\n * @var DOMNodeList\n *\/"
            },
            {
                "name": "firstChild",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The first child of this node. If there is no such node, this\n * returns <b><code>NULL<\/code><\/b>.\n * <\/p>\n * @var DOMNode\n *\/"
            },
            {
                "name": "lastChild",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The last child of this node. If there is no such node, this returns <b><code>NULL<\/code><\/b>.<\/p>\n * @var DOMNode\n *\/"
            },
            {
                "name": "previousSibling",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The node immediately preceding this node. If there is no such\n * node, this returns <b><code>NULL<\/code><\/b>.\n * <\/p>\n * @var DOMNode\n *\/"
            },
            {
                "name": "nextSibling",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The node immediately following this node. If there is no such\n * node, this returns <b><code>NULL<\/code><\/b>.\n * <\/p>\n * @var DOMNode\n *\/"
            },
            {
                "name": "attributes",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * A <b>DOMNamedNodeMap<\/b> containing the\n * attributes of this node (if it is a <b>DOMElement<\/b>)\n * or <b><code>NULL<\/code><\/b> otherwise.\n * <\/p>\n * @var DOMNamedNodeMap\n *\/"
            },
            {
                "name": "ownerDocument",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The <b>DOMDocument<\/b> object associated with this node.<\/p>\n * @var DOMDocument\n *\/"
            },
            {
                "name": "namespaceURI",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The namespace URI of this node, or <b><code>NULL<\/code><\/b> if it is unspecified.<\/p>\n * @var string\n *\/"
            },
            {
                "name": "prefix",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The namespace prefix of this node, or <b><code>NULL<\/code><\/b> if it is unspecified.<\/p>\n * @var string\n *\/"
            },
            {
                "name": "localName",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Returns the local part of the qualified name of this node.<\/p>\n * @var string\n *\/"
            },
            {
                "name": "baseURI",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The absolute base URI of this node or <b><code>NULL<\/code><\/b> if the implementation\n * wasn't able to obtain an absolute URI.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "textContent",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">This attribute returns the text content of this node and its descendants.<\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNameSpaceNode",
        "fqn": "\\DOMNameSpaceNode",
        "type": 0,
        "extendsClass": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDocumentFragment",
        "fqn": "\\DOMDocumentFragment",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "appendXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Append raw XML data\n * @link http:\/\/php.net\/manual\/en\/domdocumentfragment.appendxml.php\n * @param string $data <p>\n * XML to append.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDocument",
        "fqn": "\\DOMDocument",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "createElement",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new element node\n * @link http:\/\/php.net\/manual\/en\/domdocument.createelement.php\n * @param string $name <p>\n * The tag name of the element.\n * <\/p>\n * @param string $value [optional] <p>\n * The value of the element. By default, an empty element will be created.\n * The value can also be set later with DOMElement::$nodeValue.\n * <\/p>\n * @return DOMElement a new instance of class <b>DOMElement<\/b> or <b>FALSE<\/b>\n * if an error occurred.\n *\/"
            },
            {
                "name": "createDocumentFragment",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new document fragment\n * @link http:\/\/php.net\/manual\/en\/domdocument.createdocumentfragment.php\n * @return DOMDocumentFragment The new <b>DOMDocumentFragment<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createTextNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "content",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new text node\n * @link http:\/\/php.net\/manual\/en\/domdocument.createtextnode.php\n * @param string $content <p>\n * The content of the text.\n * <\/p>\n * @return DOMText The new <b>DOMText<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createComment",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new comment node\n * @link http:\/\/php.net\/manual\/en\/domdocument.createcomment.php\n * @param string $data <p>\n * The content of the comment.\n * <\/p>\n * @return DOMComment The new <b>DOMComment<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createCDATASection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new cdata node\n * @link http:\/\/php.net\/manual\/en\/domdocument.createcdatasection.php\n * @param string $data <p>\n * The content of the cdata.\n * <\/p>\n * @return DOMCDATASection The new <b>DOMCDATASection<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createProcessingInstruction",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "target",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates new PI node\n * @link http:\/\/php.net\/manual\/en\/domdocument.createprocessinginstruction.php\n * @param string $target <p>\n * The target of the processing instruction.\n * <\/p>\n * @param string $data [optional] <p>\n * The content of the processing instruction.\n * <\/p>\n * @return DOMProcessingInstruction The new <b>DOMProcessingInstruction<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new attribute\n * @link http:\/\/php.net\/manual\/en\/domdocument.createattribute.php\n * @param string $name <p>\n * The name of the attribute.\n * <\/p>\n * @return DOMAttr The new <b>DOMAttr<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createEntityReference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new entity reference node\n * @link http:\/\/php.net\/manual\/en\/domdocument.createentityreference.php\n * @param string $name <p>\n * The content of the entity reference, e.g. the entity reference minus\n * the leading &#38;#38; and the trailing\n * ; characters.\n * <\/p>\n * @return DOMEntityReference The new <b>DOMEntityReference<\/b> or <b>FALSE<\/b> if an error\n * occurred.\n *\/"
            },
            {
                "name": "getElementsByTagName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Searches for all elements with given local tag name\n * @link http:\/\/php.net\/manual\/en\/domdocument.getelementsbytagname.php\n * @param string $name <p>\n * The local name (without namespace) of the tag to match on. The special value *\n * matches all tags.\n * <\/p>\n * @return DOMNodeList A new <b>DOMNodeList<\/b> object containing all the matched\n * elements.\n *\/"
            },
            {
                "name": "importNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "importedNode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Import node into current document\n * @link http:\/\/php.net\/manual\/en\/domdocument.importnode.php\n * @param DOMNode $importedNode <p>\n * The node to import.\n * <\/p>\n * @param bool $deep [optional] <p>\n * If set to <b>TRUE<\/b>, this method will recursively import the subtree under\n * the <i>importedNode<\/i>.\n * <\/p>\n * <p>\n * To copy the nodes attributes <i>deep<\/i> needs to be set to <b>TRUE<\/b>\n * <\/p>\n * @return DOMNode The copied node or <b>FALSE<\/b>, if it cannot be copied.\n *\/"
            },
            {
                "name": "createElementNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new element node with an associated namespace\n * @link http:\/\/php.net\/manual\/en\/domdocument.createelementns.php\n * @param string $namespaceURI <p>\n * The URI of the namespace.\n * <\/p>\n * @param string $qualifiedName <p>\n * The qualified name of the element, as prefix:tagname.\n * <\/p>\n * @param string $value [optional] <p>\n * The value of the element. By default, an empty element will be created.\n * You can also set the value later with DOMElement::$nodeValue.\n * <\/p>\n * @return DOMElement The new <b>DOMElement<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "createAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Create new attribute node with an associated namespace\n * @link http:\/\/php.net\/manual\/en\/domdocument.createattributens.php\n * @param string $namespaceURI <p>\n * The URI of the namespace.\n * <\/p>\n * @param string $qualifiedName <p>\n * The tag name and prefix of the attribute, as prefix:tagname.\n * <\/p>\n * @return DOMAttr The new <b>DOMAttr<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "getElementsByTagNameNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Searches for all elements with given tag name in specified namespace\n * @link http:\/\/php.net\/manual\/en\/domdocument.getelementsbytagnamens.php\n * @param string $namespaceURI <p>\n * The namespace URI of the elements to match on.\n * The special value * matches all namespaces.\n * <\/p>\n * @param string $localName <p>\n * The local name of the elements to match on.\n * The special value * matches all local names.\n * <\/p>\n * @return DOMNodeList A new <b>DOMNodeList<\/b> object containing all the matched\n * elements.\n *\/"
            },
            {
                "name": "getElementById",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "elementId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Searches for an element with a certain id\n * @link http:\/\/php.net\/manual\/en\/domdocument.getelementbyid.php\n * @param string $elementId <p>\n * The unique id value for an element.\n * <\/p>\n * @return DOMElement the <b>DOMElement<\/b> or <b>NULL<\/b> if the element is\n * not found.\n *\/"
            },
            {
                "name": "adoptNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $source\n *\/"
            },
            {
                "name": "normalizeDocument",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the document\n * @link http:\/\/php.net\/manual\/en\/domdocument.normalizedocument.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "renameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $node\n * @param $namespaceURI\n * @param $qualifiedName\n *\/"
            },
            {
                "name": "load",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Load XML from a file\n * @link http:\/\/php.net\/manual\/en\/domdocument.load.php\n * @param string $filename <p>\n * The path to the XML document.\n * <\/p>\n * @param int $options [optional] <p>\n * Bitwise OR\n * of the libxml option constants.\n * <\/p>\n * @return mixed <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure. If called statically, returns a\n * <b>DOMDocument<\/b> or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "save",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Dumps the internal XML tree back into a file\n * @link http:\/\/php.net\/manual\/en\/domdocument.save.php\n * @param string $filename <p>\n * The path to the saved XML document.\n * <\/p>\n * @param int $options [optional] <p>\n * Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.\n * <\/p>\n * @return int the number of bytes written or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "loadXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Load XML from a string\n * @link http:\/\/php.net\/manual\/en\/domdocument.loadxml.php\n * @param string $source <p>\n * The string containing the XML.\n * <\/p>\n * @param int $options [optional] <p>\n * Bitwise OR\n * of the libxml option constants.\n * <\/p>\n * @return mixed <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure. If called statically, returns a\n * <b>DOMDocument<\/b> or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "saveXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Dumps the internal XML tree back into a string\n * @link http:\/\/php.net\/manual\/en\/domdocument.savexml.php\n * @param DOMNode $node [optional] <p>\n * Use this parameter to output only a specific node without XML declaration\n * rather than the entire document.\n * <\/p>\n * @param int $options [optional] <p>\n * Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.\n * <\/p>\n * @return string the XML, or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "encoding",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new DOMDocument object\n * @link http:\/\/php.net\/manual\/en\/domdocument.construct.php\n * @param string $version [optional] <p>\n * The version number of the document as part of the XML declaration.\n * <\/p>\n * @param string $encoding [optional] <p>\n * The encoding of the document as part of the XML declaration.\n * <\/p>\n *\/"
            },
            {
                "name": "validate",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Validates the document based on its DTD\n * @link http:\/\/php.net\/manual\/en\/domdocument.validate.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * If the document have no DTD attached, this method will return <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "xinclude",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Substitutes XIncludes in a DOMDocument Object\n * @link http:\/\/php.net\/manual\/en\/domdocument.xinclude.php\n * @param int $options [optional] <p>\n * libxml parameters. Available\n * since PHP 5.1.0 and Libxml 2.6.7.\n * <\/p>\n * @return int the number of XIncludes in the document, -1 if some processing failed,\n * or <b>FALSE<\/b> if there were no substitutions.\n *\/"
            },
            {
                "name": "loadHTML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Load HTML from a string\n * @link http:\/\/php.net\/manual\/en\/domdocument.loadhtml.php\n * @param string $source <p>\n * The HTML string.\n * <\/p>\n * @param int $options [optional] <p>\n * Since PHP 5.4.0 and Libxml 2.6.0, you may also use the\n * <i>options<\/i> parameter to specify additional Libxml parameters.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure. If called statically, returns a\n * <b>DOMDocument<\/b> or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "loadHTMLFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Load HTML from a file\n * @link http:\/\/php.net\/manual\/en\/domdocument.loadhtmlfile.php\n * @param string $filename <p>\n * The path to the HTML file.\n * <\/p>\n * @param int $options [optional] <p>\n * Since PHP 5.4.0 and Libxml 2.6.0, you may also use the\n * <i>options<\/i> parameter to specify additional Libxml parameters.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure. If called statically, returns a\n * <b>DOMDocument<\/b> or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "saveHTML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Dumps the internal document into a string using HTML formatting\n * @link http:\/\/php.net\/manual\/en\/domdocument.savehtml.php\n * @param DOMNode $node [optional] <p>\n * Optional parameter to output a subset of the document.\n * <\/p>\n * @return string the HTML, or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "saveHTMLFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Dumps the internal document into a file using HTML formatting\n * @link http:\/\/php.net\/manual\/en\/domdocument.savehtmlfile.php\n * @param string $filename <p>\n * The path to the saved HTML document.\n * <\/p>\n * @return int the number of bytes written or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "schemaValidate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Validates a document based on a schema\n * @link http:\/\/php.net\/manual\/en\/domdocument.schemavalidate.php\n * @param string $filename <p>\n * The path to the schema.\n * <\/p>\n * @param int $flags [optional] <p>\n * A bitmask of Libxml schema validation flags. Currently the only supported value is LIBXML_SCHEMA_CREATE. Available since PHP 5.5.2 and Libxml 2.6.14.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "schemaValidateSource",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Validates a document based on a schema\n * @link http:\/\/php.net\/manual\/en\/domdocument.schemavalidatesource.php\n * @param string $source <p>\n * A string containing the schema.\n * <\/p>\n * @param int $flags [optional] <p>\n * A bitmask of Libxml schema validation flags. Currently the only supported value is LIBXML_SCHEMA_CREATE. Available since PHP 5.5.2 and Libxml 2.6.14.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "relaxNGValidate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Performs relaxNG validation on the document\n * @link http:\/\/php.net\/manual\/en\/domdocument.relaxngvalidate.php\n * @param string $filename <p>\n * The RNG file.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "relaxNGValidateSource",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Performs relaxNG validation on the document\n * @link http:\/\/php.net\/manual\/en\/domdocument.relaxngvalidatesource.php\n * @param string $source <p>\n * A string containing the RNG schema.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "registerNodeClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "baseclass",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "extendedclass",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Register extended class used to create base node type\n * @link http:\/\/php.net\/manual\/en\/domdocument.registernodeclass.php\n * @param string $baseclass <p>\n * The DOM class that you want to extend. You can find a list of these\n * classes in the chapter introduction.\n * <\/p>\n * @param string $extendedclass <p>\n * Your extended class name. If <b>NULL<\/b> is provided, any previously\n * registered class extending <i>baseclass<\/i> will\n * be removed.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "actualEncoding",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Deprecated. Actual encoding of the document,\n * is a readonly equivalent to\n * encoding.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "config",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Deprecated. Configuration used when\n * <b>DOMDocument::normalizeDocument()<\/b> is\n * invoked.\n * <\/p>\n * @var DOMConfiguration\n *\/"
            },
            {
                "name": "doctype",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The Document Type Declaration associated with this document.<\/p>\n * @var DOMDocumentType\n *\/"
            },
            {
                "name": "documentElement",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * This is a convenience attribute that allows direct access to the\n * child node that is the document element of the document.\n * <\/p>\n * @var DOMElement\n *\/"
            },
            {
                "name": "documentURI",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The location of the document or <b><code>NULL<\/code><\/b> if undefined.<\/p>\n * @var string\n *\/"
            },
            {
                "name": "encoding",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Encoding of the document, as specified by the XML declaration. This\n * attribute is not present in the final DOM Level 3 specification, but\n * is the only way of manipulating XML document encoding in this\n * implementation.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "formatOutput",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Nicely formats output with indentation and extra space.<\/p>\n * @var bool\n *\/"
            },
            {
                "name": "implementation",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The <b>DOMImplementation<\/b> object that handles\n * this document.\n * <\/p>\n * @var DOMImplementation\n *\/"
            },
            {
                "name": "preserveWhiteSpace",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Do not remove redundant white space. Default to <b><code>TRUE<\/code><\/b>.<\/p>\n * @var bool\n *\/"
            },
            {
                "name": "recover",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Proprietary. Enables recovery mode, i.e. trying\n * to parse non-well formed documents. This attribute is not part of\n * the DOM specification and is specific to libxml.\n * <\/p>\n * @var bool\n *\/"
            },
            {
                "name": "resolveExternals",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Set it to <b><code>TRUE<\/code><\/b> to load external entities from a doctype\n * declaration. This is useful for including character entities in\n * your XML document.\n * <\/p>\n * @var bool\n *\/"
            },
            {
                "name": "standalone",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Deprecated. Whether or not the document is\n * standalone, as specified by the XML declaration, corresponds to\n * xmlStandalone.\n * <\/p>\n * @var bool\n *\/"
            },
            {
                "name": "strictErrorChecking",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Throws <b>DOMException<\/b> on errors. Default to <b><code>TRUE<\/code><\/b>.<\/p>\n * @var bool\n *\/"
            },
            {
                "name": "substituteEntities",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Proprietary. Whether or not to substitute\n * entities. This attribute is not part of\n * the DOM specification and is specific to libxml.\n * <\/p>\n * @var bool\n *\/"
            },
            {
                "name": "validateOnParse",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Loads and validates against the DTD. Default to <b><code>FALSE<\/code><\/b>.<\/p>\n * @var bool\n *\/"
            },
            {
                "name": "version",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Deprecated. Version of XML, corresponds to\n * xmlVersion.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "xmlEncoding",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * An attribute specifying, as part of the XML declaration, the\n * encoding of this document. This is <b><code>NULL<\/code><\/b> when unspecified or when it\n * is not known, such as when the Document was created in memory.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "xmlStandalone",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * An attribute specifying, as part of the XML declaration, whether\n * this document is standalone. This is <b><code>FALSE<\/code><\/b> when unspecified.\n * <\/p>\n * @var bool\n *\/"
            },
            {
                "name": "xmlVersion",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * An attribute specifying, as part of the XML declaration, the\n * version number of this document. If there is no declaration and if\n * this document supports the \"XML\" feature, the value is \"1.0\".\n * <\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNodeList",
        "fqn": "\\DOMNodeList",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Retrieves a node specified by index\n * @link http:\/\/php.net\/manual\/en\/domnodelist.item.php\n * @param int $index <p>\n * Index of the node into the collection.\n * <\/p>\n * @return DOMNode The node at the <i>index<\/i>th position in the\n * <b>DOMNodeList<\/b>, or <b>NULL<\/b> if that is not a valid\n * index.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "length",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The number of nodes in the list. The range of valid child node\n * indices is 0 to length - 1 inclusive.\n * <\/p>\n * @var int\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNamedNodeMap",
        "fqn": "\\DOMNamedNodeMap",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "getNamedItem",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Retrieves a node specified by name\n * @link http:\/\/php.net\/manual\/en\/domnamednodemap.getnameditem.php\n * @param string $name <p>\n * The nodeName of the node to retrieve.\n * <\/p>\n * @return DOMNode A node (of any type) with the specified nodeName, or\n * <b>NULL<\/b> if no node is found.\n *\/"
            },
            {
                "name": "setNamedItem",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "removeNamedItem",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $name [optional]\n *\/"
            },
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Retrieves a node specified by index\n * @link http:\/\/php.net\/manual\/en\/domnamednodemap.item.php\n * @param int $index <p>\n * Index into this map.\n * <\/p>\n * @return DOMNode The node at the <i>index<\/i>th position in the map, or <b>NULL<\/b>\n * if that is not a valid index (greater than or equal to the number of nodes\n * in this map).\n *\/"
            },
            {
                "name": "getNamedItemNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Retrieves a node specified by local name and namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnamednodemap.getnameditemns.php\n * @param string $namespaceURI <p>\n * The namespace URI of the node to retrieve.\n * <\/p>\n * @param string $localName <p>\n * The local name of the node to retrieve.\n * <\/p>\n * @return DOMNode A node (of any type) with the specified local name and namespace URI, or\n * <b>NULL<\/b> if no node is found.\n *\/"
            },
            {
                "name": "setNamedItemNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg [optional]\n *\/"
            },
            {
                "name": "removeNamedItemNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $namespaceURI [optional]\n * @param $localName [optional]\n *\/"
            }
        ],
        "properties": [
            {
                "name": "length",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The number of nodes in the map. The range of valid child node\n * indices is 0 to length - 1 inclusive.\n * <\/p>\n * @var int\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMCharacterData",
        "fqn": "\\DOMCharacterData",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Extracts a range of data from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param int $offset <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param int $count <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of <i>offset<\/i>\n * and <i>count<\/i> exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Append the string to the end of the character data of the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param string $data <p>\n * The string to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param int $offset <p>\n * The character offset at which to insert.\n * <\/p>\n * @param string $data <p>\n * The string to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Remove a range of characters from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param int $offset <p>\n * The offset from which to start removing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to delete. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param int $offset <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to replace. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param string $data <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "data",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The contents of the node.<\/p>\n * @var string\n *\/"
            },
            {
                "name": "length",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The length of the contents.<\/p>\n * @var int\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMAttr",
        "fqn": "\\DOMAttr",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "isId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if attribute is a defined ID\n * @link http:\/\/php.net\/manual\/en\/domattr.isid.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new <b>DOMAttr<\/b> object\n * @link http:\/\/php.net\/manual\/en\/domattr.construct.php\n * @param string $name <p>\n * The tag name of the attribute.\n * <\/p>\n * @param string $value [optional] <p>\n * The value of the attribute.\n * <\/p>\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "name",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The name of the attribute<\/p>\n * @var string\n *\/"
            },
            {
                "name": "ownerElement",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The element which contains the attribute<\/p>\n * @var DOMElement\n *\/"
            },
            {
                "name": "schemaTypeInfo",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Not implemented yet, always is <b><code>NULL<\/code><\/b><\/p>\n * @var bool\n *\/"
            },
            {
                "name": "specified",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Not implemented yet, always is <b><code>NULL<\/code><\/b><\/p>\n * @var bool\n *\/"
            },
            {
                "name": "value",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The value of the attribute<\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMElement",
        "fqn": "\\DOMElement",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns value of attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.getattribute.php\n * @param string $name <p>\n * The name of the attribute.\n * <\/p>\n * @return string The value of the attribute, or an empty string if no attribute with the\n * given <i>name<\/i> is found.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.setattribute.php\n * @param string $name <p>\n * The name of the attribute.\n * <\/p>\n * @param string $value <p>\n * The value of the attribute.\n * <\/p>\n * @return DOMAttr The new <b>DOMAttr<\/b> or <b>FALSE<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "removeAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.removeattribute.php\n * @param string $name <p>\n * The name of the attribute.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns attribute node\n * @link http:\/\/php.net\/manual\/en\/domelement.getattributenode.php\n * @param string $name <p>\n * The name of the attribute.\n * <\/p>\n * @return DOMAttr The attribute node.\n *\/"
            },
            {
                "name": "setAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new attribute node to element\n * @link http:\/\/php.net\/manual\/en\/domelement.setattributenode.php\n * @param DOMAttr $attr <p>\n * The attribute node.\n * <\/p>\n * @return DOMAttr old node if the attribute has been replaced or <b>NULL<\/b>.\n *\/"
            },
            {
                "name": "removeAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.removeattributenode.php\n * @param DOMAttr $oldnode <p>\n * The attribute node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getElementsByTagName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets elements by tagname\n * @link http:\/\/php.net\/manual\/en\/domelement.getelementsbytagname.php\n * @param string $name <p>\n * The tag name. Use * to return all elements within\n * the element tree.\n * <\/p>\n * @return DOMNodeList This function returns a new instance of the class\n * <b>DOMNodeList<\/b> of all matched elements.\n *\/"
            },
            {
                "name": "getAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns value of attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.getattributens.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @param string $localName <p>\n * The local name.\n * <\/p>\n * @return string The value of the attribute, or an empty string if no attribute with the\n * given <i>localName<\/i> and <i>namespaceURI<\/i>\n * is found.\n *\/"
            },
            {
                "name": "setAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.setattributens.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @param string $qualifiedName <p>\n * The qualified name of the attribute, as prefix:tagname.\n * <\/p>\n * @param string $value <p>\n * The value of the attribute.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "removeAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes attribute\n * @link http:\/\/php.net\/manual\/en\/domelement.removeattributens.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @param string $localName <p>\n * The local name.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getAttributeNodeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Returns attribute node\n * @link http:\/\/php.net\/manual\/en\/domelement.getattributenodens.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @param string $localName <p>\n * The local name.\n * <\/p>\n * @return DOMAttr The attribute node.\n *\/"
            },
            {
                "name": "setAttributeNodeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new attribute node to element\n * @link http:\/\/php.net\/manual\/en\/domelement.setattributenodens.php\n * @param DOMAttr $attr <p>\n * The attribute node.\n * <\/p>\n * @return DOMAttr the old node if the attribute has been replaced.\n *\/"
            },
            {
                "name": "getElementsByTagNameNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Get elements by namespaceURI and localName\n * @link http:\/\/php.net\/manual\/en\/domelement.getelementsbytagnamens.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @param string $localName <p>\n * The local name. Use * to return all elements within\n * the element tree.\n * <\/p>\n * @return DOMNodeList This function returns a new instance of the class\n * <b>DOMNodeList<\/b> of all matched elements in the order in\n * which they are encountered in a preorder traversal of this element tree.\n *\/"
            },
            {
                "name": "hasAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks to see if attribute exists\n * @link http:\/\/php.net\/manual\/en\/domelement.hasattribute.php\n * @param string $name <p>\n * The attribute name.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks to see if attribute exists\n * @link http:\/\/php.net\/manual\/en\/domelement.hasattributens.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @param string $localName <p>\n * The local name.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "setIdAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Declares the attribute specified by name to be of type ID\n * @link http:\/\/php.net\/manual\/en\/domelement.setidattribute.php\n * @param string $name <p>\n * The name of the attribute.\n * <\/p>\n * @param bool $isId <p>\n * Set it to <b>TRUE<\/b> if you want <i>name<\/i> to be of type\n * ID, <b>FALSE<\/b> otherwise.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setIdAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Declares the attribute specified by local name and namespace URI to be of type ID\n * @link http:\/\/php.net\/manual\/en\/domelement.setidattributens.php\n * @param string $namespaceURI <p>\n * The namespace URI of the attribute.\n * <\/p>\n * @param string $localName <p>\n * The local name of the attribute, as prefix:tagname.\n * <\/p>\n * @param bool $isId <p>\n * Set it to <b>TRUE<\/b> if you want <i>name<\/i> to be of type\n * ID, <b>FALSE<\/b> otherwise.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "setIdAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Declares the attribute specified by node to be of type ID\n * @link http:\/\/php.net\/manual\/en\/domelement.setidattributenode.php\n * @param DOMAttr $attr <p>\n * The attribute node.\n * <\/p>\n * @param bool $isId <p>\n * Set it to <b>TRUE<\/b> if you want <i>name<\/i> to be of type\n * ID, <b>FALSE<\/b> otherwise.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new DOMElement object\n * @link http:\/\/php.net\/manual\/en\/domelement.construct.php\n * @param string $name <p>\n * The tag name of the element. When also passing in namespaceURI, the element name\n * may take a prefix to be associated with the URI.\n * <\/p>\n * @param string $value [optional] <p>\n * The value of the element.\n * <\/p>\n * @param string $namespaceURI [optional] <p>\n * A namespace URI to create the element within a specific namespace.\n * <\/p>\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "schemaTypeInfo",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">Not implemented yet, always return <b><code>NULL<\/code><\/b><\/p>\n * @var bool\n *\/"
            },
            {
                "name": "tagName",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The element name<\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMText",
        "fqn": "\\DOMText",
        "type": 0,
        "extendsClass": "DOMCharacterData",
        "methods": [
            {
                "name": "splitText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Breaks this node into two nodes at the specified offset\n * @link http:\/\/php.net\/manual\/en\/domtext.splittext.php\n * @param int $offset <p>\n * The offset at which to split, starting from 0.\n * <\/p>\n * @return DOMText The new node of the same type, which contains all the content at and after the\n * <i>offset<\/i>.\n *\/"
            },
            {
                "name": "isWhitespaceInElementContent",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates whether this text node contains whitespace\n * @link http:\/\/php.net\/manual\/en\/domtext.iswhitespaceinelementcontent.php\n * @return bool <b>TRUE<\/b> if node contains zero or more whitespace characters and\n * nothing else. Returns <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isElementContentWhitespace",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "replaceWholeText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "content",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $content\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new <b>DOMText<\/b> object\n * @link http:\/\/php.net\/manual\/en\/domtext.construct.php\n * @param $value [optional]\n *\/"
            },
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Extracts a range of data from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param int $offset <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param int $count <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of <i>offset<\/i>\n * and <i>count<\/i> exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Append the string to the end of the character data of the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param string $data <p>\n * The string to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param int $offset <p>\n * The character offset at which to insert.\n * <\/p>\n * @param string $data <p>\n * The string to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Remove a range of characters from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param int $offset <p>\n * The offset from which to start removing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to delete. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param int $offset <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to replace. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param string $data <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "wholeText",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * Holds all the text of logically-adjacent (not separated by Element,\n * Comment or Processing Instruction) Text nodes.\n * <\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMComment",
        "fqn": "\\DOMComment",
        "type": 0,
        "extendsClass": "DOMCharacterData",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new DOMComment object\n * @link http:\/\/php.net\/manual\/en\/domcomment.construct.php\n * @param string $value [optional] <p>\n * The value of the comment.\n * <\/p>\n *\/"
            },
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Extracts a range of data from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param int $offset <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param int $count <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of <i>offset<\/i>\n * and <i>count<\/i> exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Append the string to the end of the character data of the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param string $data <p>\n * The string to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param int $offset <p>\n * The character offset at which to insert.\n * <\/p>\n * @param string $data <p>\n * The string to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Remove a range of characters from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param int $offset <p>\n * The offset from which to start removing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to delete. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param int $offset <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to replace. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param string $data <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMTypeinfo",
        "fqn": "\\DOMTypeinfo",
        "type": 0,
        "extendsClass": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMUserDataHandler",
        "fqn": "\\DOMUserDataHandler",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "handle",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDomError",
        "fqn": "\\DOMDomError",
        "type": 0,
        "extendsClass": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMErrorHandler",
        "fqn": "\\DOMErrorHandler",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "handleError",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "error",
                        "type": "DOMDomError",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMDomError $error\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMLocator",
        "fqn": "\\DOMLocator",
        "type": 0,
        "extendsClass": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMConfiguration",
        "fqn": "\\DOMConfiguration",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "setParameter",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $name\n * @param $value\n *\/"
            },
            {
                "name": "getParameter",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $name [optional]\n *\/"
            },
            {
                "name": "canSetParameter",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $name [optional]\n * @param $value [optional]\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMCdataSection",
        "fqn": "\\DOMCdataSection",
        "type": 0,
        "extendsClass": "DOMText",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Constructs a new DOMCdataSection object\n * @link http:\/\/php.net\/manual\/en\/domcdatasection.construct.php\n * @param $value\n *\/"
            },
            {
                "name": "splitText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Breaks this node into two nodes at the specified offset\n * @link http:\/\/php.net\/manual\/en\/domtext.splittext.php\n * @param int $offset <p>\n * The offset at which to split, starting from 0.\n * <\/p>\n * @return DOMText The new node of the same type, which contains all the content at and after the\n * <i>offset<\/i>.\n *\/"
            },
            {
                "name": "isWhitespaceInElementContent",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates whether this text node contains whitespace\n * @link http:\/\/php.net\/manual\/en\/domtext.iswhitespaceinelementcontent.php\n * @return bool <b>TRUE<\/b> if node contains zero or more whitespace characters and\n * nothing else. Returns <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "isElementContentWhitespace",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "replaceWholeText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "content",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $content\n *\/"
            },
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Extracts a range of data from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param int $offset <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param int $count <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of <i>offset<\/i>\n * and <i>count<\/i> exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Append the string to the end of the character data of the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param string $data <p>\n * The string to append.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param int $offset <p>\n * The character offset at which to insert.\n * <\/p>\n * @param string $data <p>\n * The string to insert.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Remove a range of characters from the node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param int $offset <p>\n * The offset from which to start removing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to delete. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param int $offset <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param int $count <p>\n * The number of characters to replace. If the sum of\n * <i>offset<\/i> and <i>count<\/i> exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param string $data <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDocumentType",
        "fqn": "\\DOMDocumentType",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "publicId",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">The public identifier of the external subset.<\/p>\n * @var string\n *\/"
            },
            {
                "name": "systemId",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The system identifier of the external subset. This may be an\n * absolute URI or not.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "name",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The name of DTD; i.e., the name immediately following the\n * DOCTYPE keyword.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "entities",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * A <b>DOMNamedNodeMap<\/b> containing the general\n * entities, both external and internal, declared in the DTD.\n * <\/p>\n * @var DOMNamedNodeMap\n *\/"
            },
            {
                "name": "notations",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * A <b>DOMNamedNodeMap<\/b> containing the notations\n * declared in the DTD.\n * <\/p>\n * @var DOMNamedNodeMap\n *\/"
            },
            {
                "name": "internalSubset",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The internal subset as a string, or null if there is none. This\n * does not contain the delimiting square brackets.\n * <\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNotation",
        "fqn": "\\DOMNotation",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "publicId",
                "type": 1,
                "doc": "\/**\n * <p><\/p>\n * @var string\n *\/"
            },
            {
                "name": "systemId",
                "type": 1,
                "doc": "\/**\n * <p><\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMEntity",
        "fqn": "\\DOMEntity",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "publicId",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The public identifier associated with the entity if specified, and\n * <b><code>NULL<\/code><\/b> otherwise.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "systemId",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * The system identifier associated with the entity if specified, and\n * <b><code>NULL<\/code><\/b> otherwise. This may be an absolute URI or not.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "notationName",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * For unparsed entities, the name of the notation for the entity. For\n * parsed entities, this is <b><code>NULL<\/code><\/b>.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "actualEncoding",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * An attribute specifying the encoding used for this entity at the\n * time of parsing, when it is an external parsed entity. This is\n * <b><code>NULL<\/code><\/b> if it an entity from the internal subset or if it is not\n * known.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "encoding",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * An attribute specifying, as part of the text declaration, the\n * encoding of this entity, when it is an external parsed entity. This\n * is <b><code>NULL<\/code><\/b> otherwise.\n * <\/p>\n * @var string\n *\/"
            },
            {
                "name": "version",
                "type": 1,
                "doc": "\/**\n * <p style=\"margin-top:0;\">\n * An attribute specifying, as part of the text declaration, the\n * version number of this entity, when it is an external parsed\n * entity. This is <b><code>NULL<\/code><\/b> otherwise.\n * <\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMEntityReference",
        "fqn": "\\DOMEntityReference",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new DOMEntityReference object\n * @link http:\/\/php.net\/manual\/en\/domentityreference.construct.php\n * @param string $name <p>\n * The name of the entity reference.\n * <\/p>\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMProcessingInstruction",
        "fqn": "\\DOMProcessingInstruction",
        "type": 0,
        "extendsClass": "DOMNode",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new <b>DOMProcessingInstruction<\/b> object\n * @link http:\/\/php.net\/manual\/en\/domprocessinginstruction.construct.php\n * @param string $name <p>\n * The tag name of the processing instruction.\n * <\/p>\n * @param string $value [optional] <p>\n * The value of the processing instruction.\n * <\/p>\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds a new child before a reference node\n * @link http:\/\/php.net\/manual\/en\/domnode.insertbefore.php\n * @param DOMNode $newnode <p>\n * The new node.\n * <\/p>\n * @param DOMNode $refnode [optional] <p>\n * The reference node. If not supplied, <i>newnode<\/i> is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Replaces a child\n * @link http:\/\/php.net\/manual\/en\/domnode.replacechild.php\n * @param DOMNode $newnode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param DOMNode $oldnode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or <b>FALSE<\/b> if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Removes child from list of children\n * @link http:\/\/php.net\/manual\/en\/domnode.removechild.php\n * @param DOMNode $oldnode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Adds new child at the end of the children\n * @link http:\/\/php.net\/manual\/en\/domnode.appendchild.php\n * @param DOMNode $newnode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has children\n * @link http:\/\/php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Clones a node\n * @link http:\/\/php.net\/manual\/en\/domnode.clonenode.php\n * @param bool $deep [optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to <b>FALSE<\/b>.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Normalizes the node\n * @link http:\/\/php.net\/manual\/en\/domnode.normalize.php\n * @return void No value is returned.\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if feature is supported for specified version\n * @link http:\/\/php.net\/manual\/en\/domnode.issupported.php\n * @param string $feature <p>\n * The feature to test. See the example of\n * <b>DOMImplementation::hasFeature<\/b> for a\n * list of features.\n * <\/p>\n * @param string $version <p>\n * The version number of the <i>feature<\/i> to test.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if node has attributes\n * @link http:\/\/php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $other\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Indicates if two nodes are the same node\n * @link http:\/\/php.net\/manual\/en\/domnode.issamenode.php\n * @param DOMNode $node <p>\n * The compared node.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupprefix.php\n * @param string $namespaceURI <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param string $namespaceURI <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return <b>TRUE<\/b> if <i>namespaceURI<\/i> is the default\n * namespace, <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param string $prefix <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param DOMNode $arg\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $feature\n * @param $version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n * @param $data\n * @param $handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Get an XPath for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or <b>NULL<\/b> in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Get line number for a node\n * @link http:\/\/php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a string\n * @link http:\/\/php.net\/manual\/en\/domnode.c14n.php\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or <b>FALSE<\/b> on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.2.0)<br\/>\n * Canonicalize nodes to a file\n * @link http:\/\/php.net\/manual\/en\/domnode.c14nfile.php\n * @param string $uri <p>\n * Path to write the output to.\n * <\/p>\n * @param bool $exclusive [optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param bool $with_comments [optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param array $xpath [optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param array $ns_prefixes [optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or <b>FALSE<\/b> on failure\n *\/"
            }
        ],
        "properties": [
            {
                "name": "target",
                "type": 1,
                "doc": "\/**\n * <p><\/p>\n * @var string\n *\/"
            },
            {
                "name": "data",
                "type": 1,
                "doc": "\/**\n * <p><\/p>\n * @var string\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMStringExtend",
        "fqn": "\\DOMStringExtend",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "findOffset16",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset32",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $offset32\n *\/"
            },
            {
                "name": "findOffset32",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset16",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $offset16\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMXPath",
        "fqn": "\\DOMXPath",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "doc",
                        "type": "DOMDocument",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Creates a new <b>DOMXPath<\/b> object\n * @link http:\/\/php.net\/manual\/en\/domxpath.construct.php\n * @param DOMDocument $doc <p>\n * The <b>DOMDocument<\/b> associated with the\n * <b>DOMXPath<\/b>.\n * <\/p>\n *\/"
            },
            {
                "name": "registerNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Registers the namespace with the <b>DOMXPath<\/b> object\n * @link http:\/\/php.net\/manual\/en\/domxpath.registernamespace.php\n * @param string $prefix <p>\n * The prefix.\n * <\/p>\n * @param string $namespaceURI <p>\n * The URI of the namespace.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "query",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "expression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "contextnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "registerNodeNS",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5)<br\/>\n * Evaluates the given XPath expression\n * @link http:\/\/php.net\/manual\/en\/domxpath.query.php\n * @param string $expression <p>\n * The XPath expression to execute.\n * <\/p>\n * @param DOMNode $contextnode [optional] <p>\n * The optional <i>contextnode<\/i> can be specified for\n * doing relative XPath queries. By default, the queries are relative to\n * the root element.\n * <\/p>\n * @param bool $registerNodeNS [optional] <p>\n * The optional <i>registerNodeNS<\/i> can be specified to\n * disable automatic registration of the context node.\n * <\/p>\n * @return DOMNodeList a <b>DOMNodeList<\/b> containing all nodes matching\n * the given XPath <i>expression<\/i>. Any expression which\n * does not return nodes will return an empty\n * <b>DOMNodeList<\/b>.\n * <\/p>\n * <p>\n * If the <i>expression<\/i> is malformed or the\n * <i>contextnode<\/i> is invalid,\n * <b>DOMXPath::query<\/b> returns <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "evaluate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "expression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "contextnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "registerNodeNS",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Evaluates the given XPath expression and returns a typed result if possible\n * @link http:\/\/php.net\/manual\/en\/domxpath.evaluate.php\n * @param string $expression <p>\n * The XPath expression to execute.\n * <\/p>\n * @param DOMNode $contextnode [optional] <p>\n * The optional <i>contextnode<\/i> can be specified for\n * doing relative XPath queries. By default, the queries are relative to\n * the root element.\n * <\/p>\n * @param bool $registerNodeNS [optional] <p>\n * The optional <i>registerNodeNS<\/i> can be specified to\n * disable automatic registration of the context node.\n * <\/p>\n * @return mixed a typed result if possible or a <b>DOMNodeList<\/b>\n * containing all nodes matching the given XPath <i>expression<\/i>.\n * <\/p>\n * <p>\n * If the <i>expression<\/i> is malformed or the\n * <i>contextnode<\/i> is invalid,\n * <b>DOMXPath::evaluate<\/b> returns <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "registerPhpFunctions",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "restrict",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Register PHP functions as XPath functions\n * @link http:\/\/php.net\/manual\/en\/domxpath.registerphpfunctions.php\n * @param mixed $restrict [optional] <p>\n * Use this parameter to only allow certain functions to be called from XPath.\n * <\/p>\n * <p>\n * This parameter can be either a string (a function name) or\n * an array of function names.\n * <\/p>\n * @return void No value is returned.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "document",
                "type": 1,
                "doc": "\/**\n * <p><\/p>\n * @var DOMDocument\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "dom_import_simplexml",
        "params": [
            {
                "name": "node",
                "type": "SimpleXMLElement",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Constant",
        "name": "XML_ELEMENT_NODE",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NODE",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "XML_TEXT_NODE",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "XML_CDATA_SECTION_NODE",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "XML_ENTITY_REF_NODE",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "XML_ENTITY_NODE",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "XML_PI_NODE",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "XML_COMMENT_NODE",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "XML_DOCUMENT_NODE",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "XML_DOCUMENT_TYPE_NODE",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "XML_DOCUMENT_FRAG_NODE",
        "value": 11
    },
    {
        "stmtType": "Constant",
        "name": "XML_NOTATION_NODE",
        "value": 12
    },
    {
        "stmtType": "Constant",
        "name": "XML_HTML_DOCUMENT_NODE",
        "value": 13
    },
    {
        "stmtType": "Constant",
        "name": "XML_DTD_NODE",
        "value": 14
    },
    {
        "stmtType": "Constant",
        "name": "XML_ELEMENT_DECL_NODE",
        "value": 15
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_DECL_NODE",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "XML_ENTITY_DECL_NODE",
        "value": 17
    },
    {
        "stmtType": "Constant",
        "name": "XML_NAMESPACE_DECL_NODE",
        "value": 18
    },
    {
        "stmtType": "Constant",
        "name": "XML_LOCAL_NAMESPACE",
        "value": 18
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_CDATA",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_ID",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_IDREF",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_IDREFS",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_ENTITY",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NMTOKEN",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NMTOKENS",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_ENUMERATION",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NOTATION",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "DOM_PHP_ERR",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INDEX_SIZE_ERR",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "DOMSTRING_SIZE_ERR",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "DOM_HIERARCHY_REQUEST_ERR",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "DOM_WRONG_DOCUMENT_ERR",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_CHARACTER_ERR",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NO_DATA_ALLOWED_ERR",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NO_MODIFICATION_ALLOWED_ERR",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NOT_FOUND_ERR",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NOT_SUPPORTED_ERR",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INUSE_ATTRIBUTE_ERR",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_STATE_ERR",
        "value": 11
    },
    {
        "stmtType": "Constant",
        "name": "DOM_SYNTAX_ERR",
        "value": 12
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_MODIFICATION_ERR",
        "value": 13
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NAMESPACE_ERR",
        "value": 14
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_ACCESS_ERR",
        "value": 15
    },
    {
        "stmtType": "Constant",
        "name": "DOM_VALIDATION_ERR",
        "value": 16
    }
]
