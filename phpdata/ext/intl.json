[
    {
        "stmtType": "Class",
        "name": "Collator",
        "fqn": "\\Collator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Create a collator\n * @link http:\/\/php.net\/collator.construct.php\n * @param $arg1\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Create a collator\n * @link http:\/\/php.net\/collator.create.php\n * @param string $locale <p>\n * The locale containing the required collation rules. Special values for\n * locales can be passed in - if null is passed for the locale, the\n * default locale collation rules will be used. If empty string (\"\") or\n * \"root\" are passed, UCA rules will be used.\n * <\/p>\n * @return Collator Return new instance of <b>Collator<\/b> object, or <b>NULL<\/b>\n * on error.\n *\/"
            },
            {
                "name": "compare",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "str2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Compare two Unicode strings\n * @link http:\/\/php.net\/collator.compare.php\n * @param string $str1 <p>\n * The first string to compare.\n * <\/p>\n * @param string $str2 <p>\n * The second string to compare.\n * <\/p>\n * @return int Return comparison result:<\/p>\n * <p>\n * <p>\n * 1 if <i>str1<\/i> is greater than\n * <i>str2<\/i> ;\n * <\/p>\n * <p>\n * 0 if <i>str1<\/i> is equal to\n * <i>str2<\/i>;\n * <\/p>\n * <p>\n * -1 if <i>str1<\/i> is less than\n * <i>str2<\/i> .\n * <\/p>\n * On error\n * boolean\n * <b>FALSE<\/b>\n * is returned.\n *\/"
            },
            {
                "name": "sort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arr",
                        "type": "array",
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "sort_flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Sort array using specified collator\n * @link http:\/\/php.net\/collator.sort.php\n * @param array $arr <p>\n * Array of strings to sort.\n * <\/p>\n * @param int $sort_flag [optional] <p>\n * Optional sorting type, one of the following:\n * <\/p>\n * <p>\n * <p>\n * <b>Collator::SORT_REGULAR<\/b>\n * - compare items normally (don't change types)\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "sortWithSortKeys",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arr",
                        "type": "array",
                        "byRef": true,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Sort array using specified collator and sort keys\n * @link http:\/\/php.net\/collator.sortwithsortkeys.php\n * @param array $arr <p>Array of strings to sort<\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arr",
                        "type": "array",
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "sort_flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Sort array maintaining index association\n * @link http:\/\/php.net\/collator.asort.php\n * @param array $arr <p>Array of strings to sort.<\/p>\n * @param int $sort_flag [optional] <p>\n * Optional sorting type, one of the following:\n * <p>\n * <b>Collator::SORT_REGULAR<\/b>\n * - compare items normally (don't change types)\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get collation attribute value\n * @link http:\/\/php.net\/collator.getattribute.php\n * @param int $attr <p>\n * Attribute to get value for.\n * <\/p>\n * @return int Attribute value, or boolean <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "val",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set collation attribute\n * @link http:\/\/php.net\/collator.setattribute.php\n * @param int $attr <p>Attribute.<\/p>\n * @param int $val <p>\n * Attribute value.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getStrength",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get current collation strength\n * @link http:\/\/php.net\/collator.getstrength.php\n * @return int current collation strength, or boolean <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "setStrength",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "strength",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set collation strength\n * @link http:\/\/php.net\/collator.setstrength.php\n * @param int $strength <p>Strength to set.<\/p>\n * <p>\n * Possible values are:\n * <p>\n * <b>Collator::PRIMARY<\/b>\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the locale name of the collator\n * @link http:\/\/php.net\/collator.getlocale.php\n * @param int $type [optional] <p>\n * You can choose between valid and actual locale (\n * <b>Locale::VALID_LOCALE<\/b> and\n * <b>Locale::ACTUAL_LOCALE<\/b>,\n * respectively). The default is the actual locale.\n * <\/p>\n * @return string Real locale name from which the collation data comes. If the collator was\n * instantiated from rules or an error occurred, returns\n * boolean <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get collator's last error code\n * @link http:\/\/php.net\/collator.geterrorcode.php\n * @return int Error code returned by the last Collator API function call.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get text for collator's last error code\n * @link http:\/\/php.net\/collator.geterrormessage.php\n * @return string Description of an error occurred in the last Collator API function call.\n *\/"
            },
            {
                "name": "getSortKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.11, PECL intl &gt;= 1.0.3)<br\/>\n * Get sorting key for a string\n * @link http:\/\/php.net\/collator.getsortkey.php\n * @param string $str <p>\n * The string to produce the key from.\n * <\/p>\n * @return string the collation key for the string. Collation keys can be compared directly instead of strings.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DEFAULT_VALUE",
                "value": null,
                "doc": null
            },
            {
                "name": "PRIMARY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SECONDARY",
                "value": 1,
                "doc": null
            },
            {
                "name": "TERTIARY",
                "value": 2,
                "doc": null
            },
            {
                "name": "DEFAULT_STRENGTH",
                "value": 2,
                "doc": null
            },
            {
                "name": "QUATERNARY",
                "value": 3,
                "doc": null
            },
            {
                "name": "IDENTICAL",
                "value": 15,
                "doc": null
            },
            {
                "name": "OFF",
                "value": 16,
                "doc": null
            },
            {
                "name": "ON",
                "value": 17,
                "doc": null
            },
            {
                "name": "SHIFTED",
                "value": 20,
                "doc": null
            },
            {
                "name": "NON_IGNORABLE",
                "value": 21,
                "doc": null
            },
            {
                "name": "LOWER_FIRST",
                "value": 24,
                "doc": null
            },
            {
                "name": "UPPER_FIRST",
                "value": 25,
                "doc": null
            },
            {
                "name": "FRENCH_COLLATION",
                "value": 0,
                "doc": "\/**\n * <p>\n * Sort strings with different accents from the back of the string. This\n * attribute is automatically set to\n * On\n * for the French locales and a few others. Users normally would not need\n * to explicitly set this attribute. There is a string comparison\n * performance cost when it is set On,\n * but sort key length is unaffected. Possible values are:\n * <b>Collator::ON<\/b>\n * <b>Collator::OFF<\/b)<default)\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * <p>\n * FRENCH_COLLATION rules\n * <p>\n * F=OFF cote &lt; cot\u00e9 &lt; c\u00f4te &lt; c\u00f4t\u00e9\n * F=ON cote &lt; c\u00f4te &lt; cot\u00e9 &lt; c\u00f4t\u00e9\n * <\/p>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "ALTERNATE_HANDLING",
                "value": 1,
                "doc": "\/**\n * <p>\n * The Alternate attribute is used to control the handling of the so called\n * variable characters in the UCA: whitespace, punctuation and symbols. If\n * Alternate is set to NonIgnorable\n * (N), then differences among these characters are of the same importance\n * as differences among letters. If Alternate is set to\n * Shifted\n * (S), then these characters are of only minor importance. The\n * Shifted value is often used in combination with\n * Strength\n * set to Quaternary. In such a case, whitespace, punctuation, and symbols\n * are considered when comparing strings, but only if all other aspects of\n * the strings (base letters, accents, and case) are identical. If\n * Alternate is not set to Shifted, then there is no difference between a\n * Strength of 3 and a Strength of 4. For more information and examples,\n * see Variable_Weighting in the\n * UCA.\n * The reason the Alternate values are not simply\n * On and Off\n * is that additional Alternate values may be added in the future. The UCA\n * option Blanked is expressed with Strength set to 3, and Alternate set to\n * Shifted. The default for most locales is NonIgnorable. If Shifted is\n * selected, it may be slower if there are many strings that are the same\n * except for punctuation; sort key length will not be affected unless the\n * strength level is also increased.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::NON_IGNORABLE<\/b)<default)\n * <b>Collator::SHIFTED<\/b>\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * <p>\n * ALTERNATE_HANDLING rules\n * <p>\n * S=3, A=N di Silva &lt; Di Silva &lt; diSilva &lt; U.S.A. &lt; USA\n * S=3, A=S di Silva = diSilva &lt; Di Silva &lt; U.S.A. = USA\n * S=4, A=S di Silva &lt; diSilva &lt; Di Silva &lt; U.S.A. &lt; USA\n * <\/p>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "CASE_FIRST",
                "value": 2,
                "doc": "\/**\n * <p>\n * The Case_First attribute is used to control whether uppercase letters\n * come before lowercase letters or vice versa, in the absence of other\n * differences in the strings. The possible values are\n * Uppercase_First\n * (U) and Lowercase_First\n * (L), plus the standard Default\n * and Off.\n * There is almost no difference between the Off and Lowercase_First\n * options in terms of results, so typically users will not use\n * Lowercase_First: only Off or Uppercase_First. (People interested in the\n * detailed differences between X and L should consult the Collation\n * Customization). Specifying either L or U won't affect string comparison\n * performance, but will affect the sort key length.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::OFF<\/b)<default)\n * <b>Collator::LOWER_FIRST<\/b>\n * <b>Collator::UPPER_FIRST<\/b>\n * <b>Collator:DEFAULT<\/b>\n * <\/p>\n * <p>\n * CASE_FIRST rules\n * <p>\n * C=X or C=L \"china\" &lt; \"China\" &lt; \"denmark\" &lt; \"Denmark\"\n * C=U \"China\" &lt; \"china\" &lt; \"Denmark\" &lt; \"denmark\"\n * <\/p>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "CASE_LEVEL",
                "value": 3,
                "doc": "\/**\n * <p>\n * The Case_Level attribute is used when ignoring accents but not case. In\n * such a situation, set Strength to be Primary,\n * and Case_Level to be On.\n * In most locales, this setting is Off by default. There is a small\n * string comparison performance and sort key impact if this attribute is\n * set to be On.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::OFF<\/b)<default)\n * <b>Collator::ON<\/b>\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * <p>\n * CASE_LEVEL rules\n * <p>\n * S=1, E=X role = Role = r\u00f4le\n * S=1, E=O role = r\u00f4le &lt; Role\n * <\/p>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "NORMALIZATION_MODE",
                "value": 4,
                "doc": "\/**\n * <p>\n * The Normalization setting determines whether text is thoroughly\n * normalized or not in comparison. Even if the setting is off (which is\n * the default for many locales), text as represented in common usage will\n * compare correctly (for details, see UTN #5). Only if the accent marks\n * are in noncanonical order will there be a problem. If the setting is\n * On,\n * then the best results are guaranteed for all possible text input.\n * There is a medium string comparison performance cost if this attribute\n * is On,\n * depending on the frequency of sequences that require normalization.\n * There is no significant effect on sort key length. If the input text is\n * known to be in NFD or NFKD normalization forms, there is no need to\n * enable this Normalization option.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::OFF<\/b)<default)\n * <b>Collator::ON<\/b>\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "STRENGTH",
                "value": 5,
                "doc": "\/**\n * <p>\n * The ICU Collation Service supports many levels of comparison (named\n * \"Levels\", but also known as \"Strengths\"). Having these categories\n * enables ICU to sort strings precisely according to local conventions.\n * However, by allowing the levels to be selectively employed, searching\n * for a string in text can be performed with various matching conditions.\n * For more detailed information, see\n * <b>collator_set_strength<\/b> chapter.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::PRIMARY<\/b>\n * <b>Collator::SECONDARY<\/b>\n * <b>Collator::TERTIARY<\/b)<default)\n * <b>Collator::QUATERNARY<\/b>\n * <b>Collator::IDENTICAL<\/b>\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "HIRAGANA_QUATERNARY_MODE",
                "value": 6,
                "doc": "\/**\n * <p>\n * Compatibility with JIS x 4061 requires the introduction of an additional\n * level to distinguish Hiragana and Katakana characters. If compatibility\n * with that standard is required, then this attribute should be set\n * On,\n * and the strength set to Quaternary. This will affect sort key length\n * and string comparison string comparison performance.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::OFF<\/b)<default)\n * <b>Collator::ON<\/b>\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "NUMERIC_COLLATION",
                "value": 7,
                "doc": "\/**\n * <p>\n * When turned on, this attribute generates a collation key for the numeric\n * value of substrings of digits. This is a way to get '100' to sort AFTER\n * '2'.\n * <\/p>\n * <p>\n * Possible values are:\n * <b>Collator::OFF<\/b)<default)\n * <b>Collator::ON<\/b>\n * <b>Collator::DEFAULT_VALUE<\/b>\n * <\/p>\n * @link http:\/\/php.net\/intl.collator-constants.php\n *\/"
            },
            {
                "name": "SORT_REGULAR",
                "value": 0,
                "doc": null
            },
            {
                "name": "SORT_STRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "SORT_NUMERIC",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "NumberFormatter",
        "fqn": "\\NumberFormatter",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "style",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a number formatter.\n *\n * @param string $locale\n *   Locale in which the number would be formatted (locale name, e.g. <code>\"en_CA\"<\/code>).\n * @param integer $style\n *   Style of the formatting, one of the format style constants. If {@see \\NumberFormatter::PATTERN_DECIMAL} or\n *   {@see \\NumberFormatter::PATTERN_RULEBASED} is passed then the number format is opened using the given\n *   <var>$pattern<\/var>, which must conform to the syntax described in {@link http:\/\/www.icu-project.org\/apiref\/icu4c\/classDecimalFormat.html#details\n *   ICU DecimalFormat documentation} or {@link http:\/\/www.icu-project.org\/apiref\/icu4c\/classRuleBasedNumberFormat.html#details\n *   ICU RuleBasedNumberFormat documentation}, respectively.\n * @param string $pattern [optional]\n *   Pattern string if the chosen <var>$style<\/var> requires a pattern.\n * @since 5.3.0\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "style",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Create a number formatter\n * @link http:\/\/php.net\/numberformatter.create.php\n * @param string $locale <p>\n * Locale in which the number would be formatted (locale name, e.g. en_CA).\n * <\/p>\n * @param int $style <p>\n * Style of the formatting, one of the\n * format style constants. If\n * <b>NumberFormatter::PATTERN_DECIMAL<\/b>\n * or <b>NumberFormatter::PATTERN_RULEBASED<\/b>\n * is passed then the number format is opened using the given pattern,\n * which must conform to the syntax described in\n * ICU DecimalFormat\n * documentation or\n * ICU RuleBasedNumberFormat\n * documentation, respectively.\n * <\/p>\n * @param string $pattern [optional] <p>\n * Pattern string if the chosen style requires a pattern.\n * <\/p>\n * @return NumberFormatter <b>NumberFormatter<\/b> object or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "format",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Format a number\n * @link http:\/\/php.net\/numberformatter.format.php\n * @param number $value <p>\n * The value to format. Can be integer or float,\n * other values will be converted to a numeric value.\n * <\/p>\n * @param int $type [optional] <p>\n * The\n * formatting type to use.\n * <\/p>\n * @return string the string containing formatted value, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "parse",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Parse a number\n * @link http:\/\/php.net\/numberformatter.parse.php\n * @param string $value\n * @param int $type [optional] <p>\n * The\n * formatting type to use. By default,\n * <b>NumberFormatter::TYPE_DOUBLE<\/b> is used.\n * <\/p>\n * @param int $position [optional] <p>\n * Offset in the string at which to begin parsing. On return, this value\n * will hold the offset at which parsing ended.\n * <\/p>\n * @return mixed The value of the parsed number or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "formatCurrency",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "currency",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Format a currency value\n * @link http:\/\/php.net\/numberformatter.formatcurrency.php\n * @param float $value <p>\n * The numeric currency value.\n * <\/p>\n * @param string $currency <p>\n * The 3-letter ISO 4217 currency code indicating the currency to use.\n * <\/p>\n * @return string String representing the formatted currency value.\n *\/"
            },
            {
                "name": "parseCurrency",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "currency",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Parse a currency number\n * @link http:\/\/php.net\/numberformatter.parsecurrency.php\n * @param string $value\n * @param string $currency <p>\n * Parameter to receive the currency name (3-letter ISO 4217 currency\n * code).\n * <\/p>\n * @param int $position [optional] <p>\n * Offset in the string at which to begin parsing. On return, this value\n * will hold the offset at which parsing ended.\n * <\/p>\n * @return float The parsed numeric value or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set an attribute\n * @link http:\/\/php.net\/numberformatter.setattribute.php\n * @param int $attr <p>\n * Attribute specifier - one of the\n * numeric attribute constants.\n * <\/p>\n * @param int $value <p>\n * The attribute value.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get an attribute\n * @link http:\/\/php.net\/numberformatter.getattribute.php\n * @param int $attr <p>\n * Attribute specifier - one of the\n * numeric attribute constants.\n * <\/p>\n * @return int Return attribute value on success, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "setTextAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set a text attribute\n * @link http:\/\/php.net\/numberformatter.settextattribute.php\n * @param int $attr <p>\n * Attribute specifier - one of the\n * text attribute\n * constants.\n * <\/p>\n * @param string $value <p>\n * Text for the attribute value.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getTextAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get a text attribute\n * @link http:\/\/php.net\/numberformatter.gettextattribute.php\n * @param int $attr <p>\n * Attribute specifier - one of the\n * text attribute constants.\n * <\/p>\n * @return string Return attribute value on success, or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "setSymbol",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set a symbol value\n * @link http:\/\/php.net\/numberformatter.setsymbol.php\n * @param int $attr <p>\n * Symbol specifier, one of the\n * format symbol constants.\n * <\/p>\n * @param string $value <p>\n * Text for the symbol.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getSymbol",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get a symbol value\n * @link http:\/\/php.net\/numberformatter.getsymbol.php\n * @param int $attr <p>\n * Symbol specifier, one of the\n * format symbol constants.\n * <\/p>\n * @return string The symbol string or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "setPattern",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set formatter pattern\n * @link http:\/\/php.net\/numberformatter.setpattern.php\n * @param string $pattern <p>\n * Pattern in syntax described in\n * ICU DecimalFormat\n * documentation.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getPattern",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get formatter pattern\n * @link http:\/\/php.net\/numberformatter.getpattern.php\n * @return string Pattern string that is used by the formatter, or <b>FALSE<\/b> if an error happens.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get formatter locale\n * @link http:\/\/php.net\/numberformatter.getlocale.php\n * @param int $type [optional] <p>\n * You can choose between valid and actual locale (\n * <b>Locale::VALID_LOCALE<\/b>,\n * <b>Locale::ACTUAL_LOCALE<\/b>,\n * respectively). The default is the actual locale.\n * <\/p>\n * @return string The locale name used to create the formatter.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get formatter's last error code.\n * @link http:\/\/php.net\/numberformatter.geterrorcode.php\n * @return int error code from last formatter call.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get formatter's last error message.\n * @link http:\/\/php.net\/numberformatter.geterrormessage.php\n * @return string error message from last formatter call.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "PATTERN_DECIMAL",
                "value": 0,
                "doc": "\/**\n * Decimal format defined by pattern\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DECIMAL",
                "value": 1,
                "doc": "\/**\n * Decimal format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "CURRENCY",
                "value": 2,
                "doc": "\/**\n * Currency format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PERCENT",
                "value": 3,
                "doc": "\/**\n * Percent format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "SCIENTIFIC",
                "value": 4,
                "doc": "\/**\n * Scientific format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "SPELLOUT",
                "value": 5,
                "doc": "\/**\n * Spellout rule-based format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ORDINAL",
                "value": 6,
                "doc": "\/**\n * Ordinal rule-based format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DURATION",
                "value": 7,
                "doc": "\/**\n * Duration rule-based format\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PATTERN_RULEBASED",
                "value": 9,
                "doc": "\/**\n * Rule-based format defined by pattern\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "IGNORE",
                "value": 0,
                "doc": "\/**\n * Alias for PATTERN_DECIMAL\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DEFAULT_STYLE",
                "value": 1,
                "doc": "\/**\n * Default format for the locale\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_CEILING",
                "value": 0,
                "doc": "\/**\n * Rounding mode to round towards positive infinity.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_FLOOR",
                "value": 1,
                "doc": "\/**\n * Rounding mode to round towards negative infinity.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_DOWN",
                "value": 2,
                "doc": "\/**\n * Rounding mode to round towards zero.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_UP",
                "value": 3,
                "doc": "\/**\n * Rounding mode to round away from zero.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_HALFEVEN",
                "value": 4,
                "doc": "\/**\n * Rounding mode to round towards the \"nearest neighbor\" unless both\n * neighbors are equidistant, in which case, round towards the even\n * neighbor.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_HALFDOWN",
                "value": 5,
                "doc": "\/**\n * Rounding mode to round towards \"nearest neighbor\" unless both neighbors\n * are equidistant, in which case round down.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUND_HALFUP",
                "value": 6,
                "doc": "\/**\n * Rounding mode to round towards \"nearest neighbor\" unless both neighbors\n * are equidistant, in which case round up.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PAD_BEFORE_PREFIX",
                "value": 0,
                "doc": "\/**\n * Pad characters inserted before the prefix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PAD_AFTER_PREFIX",
                "value": 1,
                "doc": "\/**\n * Pad characters inserted after the prefix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PAD_BEFORE_SUFFIX",
                "value": 2,
                "doc": "\/**\n * Pad characters inserted before the suffix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PAD_AFTER_SUFFIX",
                "value": 3,
                "doc": "\/**\n * Pad characters inserted after the suffix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PARSE_INT_ONLY",
                "value": 0,
                "doc": "\/**\n * Parse integers only.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "GROUPING_USED",
                "value": 1,
                "doc": "\/**\n * Use grouping separator.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DECIMAL_ALWAYS_SHOWN",
                "value": 2,
                "doc": "\/**\n * Always show decimal point.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MAX_INTEGER_DIGITS",
                "value": 3,
                "doc": "\/**\n * Maximum integer digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MIN_INTEGER_DIGITS",
                "value": 4,
                "doc": "\/**\n * Minimum integer digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "INTEGER_DIGITS",
                "value": 5,
                "doc": "\/**\n * Integer digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MAX_FRACTION_DIGITS",
                "value": 6,
                "doc": "\/**\n * Maximum fraction digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MIN_FRACTION_DIGITS",
                "value": 7,
                "doc": "\/**\n * Minimum fraction digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "FRACTION_DIGITS",
                "value": 8,
                "doc": "\/**\n * Fraction digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MULTIPLIER",
                "value": 9,
                "doc": "\/**\n * Multiplier.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "GROUPING_SIZE",
                "value": 10,
                "doc": "\/**\n * Grouping size.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUNDING_MODE",
                "value": 11,
                "doc": "\/**\n * Rounding Mode.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ROUNDING_INCREMENT",
                "value": 12,
                "doc": "\/**\n * Rounding increment.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "FORMAT_WIDTH",
                "value": 13,
                "doc": "\/**\n * The width to which the output of format() is padded.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PADDING_POSITION",
                "value": 14,
                "doc": "\/**\n * The position at which padding will take place. See pad position\n * constants for possible argument values.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "SECONDARY_GROUPING_SIZE",
                "value": 15,
                "doc": "\/**\n * Secondary grouping size.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "SIGNIFICANT_DIGITS_USED",
                "value": 16,
                "doc": "\/**\n * Use significant digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MIN_SIGNIFICANT_DIGITS",
                "value": 17,
                "doc": "\/**\n * Minimum significant digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MAX_SIGNIFICANT_DIGITS",
                "value": 18,
                "doc": "\/**\n * Maximum significant digits.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "LENIENT_PARSE",
                "value": 19,
                "doc": "\/**\n * Lenient parse mode used by rule-based formats.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "POSITIVE_PREFIX",
                "value": 0,
                "doc": "\/**\n * Positive prefix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "POSITIVE_SUFFIX",
                "value": 1,
                "doc": "\/**\n * Positive suffix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "NEGATIVE_PREFIX",
                "value": 2,
                "doc": "\/**\n * Negative prefix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "NEGATIVE_SUFFIX",
                "value": 3,
                "doc": "\/**\n * Negative suffix.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PADDING_CHARACTER",
                "value": 4,
                "doc": "\/**\n * The character used to pad to the format width.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "CURRENCY_CODE",
                "value": 5,
                "doc": "\/**\n * The ISO currency code.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DEFAULT_RULESET",
                "value": 6,
                "doc": "\/**\n * The default rule set. This is only available with rule-based\n * formatters.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PUBLIC_RULESETS",
                "value": 7,
                "doc": "\/**\n * The public rule sets. This is only available with rule-based\n * formatters. This is a read-only attribute. The public rulesets are\n * returned as a single string, with each ruleset name delimited by ';'\n * (semicolon).\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DECIMAL_SEPARATOR_SYMBOL",
                "value": 0,
                "doc": "\/**\n * The decimal separator.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "GROUPING_SEPARATOR_SYMBOL",
                "value": 1,
                "doc": "\/**\n * The grouping separator.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PATTERN_SEPARATOR_SYMBOL",
                "value": 2,
                "doc": "\/**\n * The pattern separator.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PERCENT_SYMBOL",
                "value": 3,
                "doc": "\/**\n * The percent sign.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "ZERO_DIGIT_SYMBOL",
                "value": 4,
                "doc": "\/**\n * Zero.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "DIGIT_SYMBOL",
                "value": 5,
                "doc": "\/**\n * Character representing a digit in the pattern.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MINUS_SIGN_SYMBOL",
                "value": 6,
                "doc": "\/**\n * The minus sign.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PLUS_SIGN_SYMBOL",
                "value": 7,
                "doc": "\/**\n * The plus sign.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "CURRENCY_SYMBOL",
                "value": 8,
                "doc": "\/**\n * The currency symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "INTL_CURRENCY_SYMBOL",
                "value": 9,
                "doc": "\/**\n * The international currency symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MONETARY_SEPARATOR_SYMBOL",
                "value": 10,
                "doc": "\/**\n * The monetary separator.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "EXPONENTIAL_SYMBOL",
                "value": 11,
                "doc": "\/**\n * The exponential symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PERMILL_SYMBOL",
                "value": 12,
                "doc": "\/**\n * Per mill symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "PAD_ESCAPE_SYMBOL",
                "value": 13,
                "doc": "\/**\n * Escape padding character.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "INFINITY_SYMBOL",
                "value": 14,
                "doc": "\/**\n * Infinity symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "NAN_SYMBOL",
                "value": 15,
                "doc": "\/**\n * Not-a-number symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "SIGNIFICANT_DIGIT_SYMBOL",
                "value": 16,
                "doc": "\/**\n * Significant digit symbol.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "MONETARY_GROUPING_SEPARATOR_SYMBOL",
                "value": 17,
                "doc": "\/**\n * The monetary grouping separator.\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "TYPE_DEFAULT",
                "value": 0,
                "doc": "\/**\n * Derive the type from variable type\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "TYPE_INT32",
                "value": 1,
                "doc": "\/**\n * Format\/parse as 32-bit integer\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "TYPE_INT64",
                "value": 2,
                "doc": "\/**\n * Format\/parse as 64-bit integer\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "TYPE_DOUBLE",
                "value": 3,
                "doc": "\/**\n * Format\/parse as floating point value\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            },
            {
                "name": "TYPE_CURRENCY",
                "value": 4,
                "doc": "\/**\n * Format\/parse as currency value\n * @link http:\/\/php.net\/intl.numberformatter-constants.php\n *\/"
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "Normalizer",
        "fqn": "\\Normalizer",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "normalize",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "input",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "form",
                        "type": null,
                        "byRef": false,
                        "default": "Normalizer::FORM_C"
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Normalizes the input provided and returns the normalized string\n * @link http:\/\/php.net\/normalizer.normalize.php\n * @param string $input <p>The input string to normalize<\/p>\n * @param string $form [optional] <p>One of the normalization forms.<\/p>\n * @return string The normalized string or <b>NULL<\/b> if an error occurred.\n *\/"
            },
            {
                "name": "isNormalized",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "input",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "form",
                        "type": null,
                        "byRef": false,
                        "default": "Normalizer::FORM_C"
                    }
                ],
                "doc": "\/**\n* (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n* Checks if the provided string is already in the specified normalization\nform.\n* @link http:\/\/php.net\/normalizer.isnormalized.php\n* @param string $input <p>The input string to normalize<\/p>\n* @param string $form [optional] <p>\n* One of the normalization forms.\n* <\/p>\n* @return bool <b>TRUE<\/b> if normalized, <b>FALSE<\/b> otherwise or if there an error\n*\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "NONE",
                "value": 1,
                "doc": "\/**\n * No decomposition\/composition\n * @link http:\/\/php.net\/intl.normalizer-constants.php\n *\/"
            },
            {
                "name": "FORM_D",
                "value": 2,
                "doc": "\/**\n * Normalization Form D (NFD) - Canonical Decomposition\n * @link http:\/\/php.net\/intl.normalizer-constants.php\n *\/"
            },
            {
                "name": "NFD",
                "value": 2,
                "doc": null
            },
            {
                "name": "FORM_KD",
                "value": 3,
                "doc": "\/**\n * Normalization Form KD (NFKD) - Compatibility Decomposition\n * @link http:\/\/php.net\/intl.normalizer-constants.php\n *\/"
            },
            {
                "name": "NFKD",
                "value": 3,
                "doc": null
            },
            {
                "name": "FORM_C",
                "value": 4,
                "doc": "\/**\n * Normalization Form C (NFC) - Canonical Decomposition followed by\n * Canonical Composition\n * @link http:\/\/php.net\/intl.normalizer-constants.php\n *\/"
            },
            {
                "name": "NFC",
                "value": 4,
                "doc": null
            },
            {
                "name": "FORM_KC",
                "value": 5,
                "doc": "\/**\n * Normalization Form KC (NFKC) - Compatibility Decomposition, followed by\n * Canonical Composition\n * @link http:\/\/php.net\/intl.normalizer-constants.php\n *\/"
            },
            {
                "name": "NFKC",
                "value": 5,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "Locale",
        "fqn": "\\Locale",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "getDefault",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Gets the default locale value from the INTL global 'default_locale'\n * @link http:\/\/php.net\/locale.getdefault.php\n * @return string The current runtime locale\n *\/"
            },
            {
                "name": "setDefault",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * sets the default runtime locale\n * @link http:\/\/php.net\/locale.setdefault.php\n * @param string $locale <p>\n * Is a BCP 47 compliant language tag containing the\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getPrimaryLanguage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Gets the primary language for the input locale\n * @link http:\/\/php.net\/locale.getprimarylanguage.php\n * @param string $locale <p>\n * The locale to extract the primary language code from\n * <\/p>\n * @return string The language code associated with the language or <b>NULL<\/b> in case of error.\n *\/"
            },
            {
                "name": "getScript",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Gets the script for the input locale\n * @link http:\/\/php.net\/locale.getscript.php\n * @param string $locale <p>\n * The locale to extract the script code from\n * <\/p>\n * @return string The script subtag for the locale or <b>NULL<\/b> if not present\n *\/"
            },
            {
                "name": "getRegion",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Gets the region for the input locale\n * @link http:\/\/php.net\/locale.getregion.php\n * @param string $locale <p>\n * The locale to extract the region code from\n * <\/p>\n * @return string The region subtag for the locale or <b>NULL<\/b> if not present\n *\/"
            },
            {
                "name": "getKeywords",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Gets the keywords for the input locale\n * @link http:\/\/php.net\/locale.getkeywords.php\n * @param string $locale <p>\n * The locale to extract the keywords from\n * <\/p>\n * @return array Associative array containing the keyword-value pairs for this locale\n *\/"
            },
            {
                "name": "getDisplayScript",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns an appropriately localized display name for script of the input locale\n * @link http:\/\/php.net\/locale.getdisplayscript.php\n * @param string $locale <p>\n * The locale to return a display script for\n * <\/p>\n * @param string $in_locale [optional] <p>\n * Optional format locale to use to display the script name\n * <\/p>\n * @return string Display name of the script for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "getDisplayRegion",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns an appropriately localized display name for region of the input locale\n * @link http:\/\/php.net\/locale.getdisplayregion.php\n * @param string $locale <p>\n * The locale to return a display region for.\n * <\/p>\n * @param string $in_locale [optional] <p>\n * Optional format locale to use to display the region name\n * <\/p>\n * @return string display name of the region for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "getDisplayName",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns an appropriately localized display name for the input locale\n * @link http:\/\/php.net\/locale.getdisplayname.php\n * @param string $locale <p>\n * The locale to return a display name for.\n * <\/p>\n * @param string $in_locale [optional] <p>optional format locale<\/p>\n * @return string Display name of the locale in the format appropriate for $in_locale.\n *\/"
            },
            {
                "name": "getDisplayLanguage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns an appropriately localized display name for language of the inputlocale\n * @link http:\/\/php.net\/locale.getdisplaylanguage.php\n * @param string $locale <p>\n * The locale to return a display language for\n * <\/p>\n * @param string $in_locale [optional] <p>\n * Optional format locale to use to display the language name\n * <\/p>\n * @return string display name of the language for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "getDisplayVariant",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns an appropriately localized display name for variants of the input locale\n * @link http:\/\/php.net\/locale.getdisplayvariant.php\n * @param string $locale <p>\n * The locale to return a display variant for\n * <\/p>\n * @param string $in_locale [optional] <p>\n * Optional format locale to use to display the variant name\n * <\/p>\n * @return string Display name of the variant for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "composeLocale",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "subtags",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns a correctly ordered and delimited locale ID\n * @link http:\/\/php.net\/locale.composelocale.php\n * @param array $subtags <p>\n * an array containing a list of key-value pairs, where the keys identify\n * the particular locale ID subtags, and the values are the associated\n * subtag values.\n * <p>\n * The 'variant' and 'private' subtags can take maximum 15 values\n * whereas 'extlang' can take maximum 3 values.e.g. Variants are allowed\n * with the suffix ranging from 0-14. Hence the keys for the input array\n * can be variant0, variant1, ...,variant14. In the returned locale id,\n * the subtag is ordered by suffix resulting in variant0 followed by\n * variant1 followed by variant2 and so on.\n * <\/p>\n * <p>\n * The 'variant', 'private' and 'extlang' multiple values can be specified both\n * as array under specific key (e.g. 'variant') and as multiple numbered keys\n * (e.g. 'variant0', 'variant1', etc.).\n * <\/p>\n * <\/p>\n * @return string The corresponding locale identifier.\n *\/"
            },
            {
                "name": "parseLocale",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Returns a key-value array of locale ID subtag elements.\n * @link http:\/\/php.net\/locale.parselocale.php\n * @param string $locale <p>\n * The locale to extract the subtag array from. Note: The 'variant' and\n * 'private' subtags can take maximum 15 values whereas 'extlang' can take\n * maximum 3 values.\n * <\/p>\n * @return array an array containing a list of key-value pairs, where the keys\n * identify the particular locale ID subtags, and the values are the\n * associated subtag values. The array will be ordered as the locale id\n * subtags e.g. in the locale id if variants are '-varX-varY-varZ' then the\n * returned array will have variant0=&gt;varX , variant1=&gt;varY ,\n * variant2=&gt;varZ\n *\/"
            },
            {
                "name": "getAllVariants",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Gets the variants for the input locale\n * @link http:\/\/php.net\/locale.getallvariants.php\n * @param string $locale <p>\n * The locale to extract the variants from\n * <\/p>\n * @return array The array containing the list of all variants subtag for the locale\n * or <b>NULL<\/b> if not present\n *\/"
            },
            {
                "name": "filterMatches",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "langtag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "canonicalize",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Checks if a language tag filter matches with locale\n * @link http:\/\/php.net\/locale.filtermatches.php\n * @param string $langtag <p>\n * The language tag to check\n * <\/p>\n * @param string $locale <p>\n * The language range to check against\n * <\/p>\n * @param bool $canonicalize [optional] <p>\n * If true, the arguments will be converted to canonical form before\n * matching.\n * <\/p>\n * @return bool <b>TRUE<\/b> if $locale matches $langtag <b>FALSE<\/b> otherwise.\n *\/"
            },
            {
                "name": "lookup",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "langtag",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "canonicalize",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "default",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Searches the language tag list for the best match to the language\n * @link http:\/\/php.net\/locale.lookup.php\n * @param array $langtag <p>\n * An array containing a list of language tags to compare to\n * <i>locale<\/i>. Maximum 100 items allowed.\n * <\/p>\n * @param string $locale <p>\n * The locale to use as the language range when matching.\n * <\/p>\n * @param bool $canonicalize [optional] <p>\n * If true, the arguments will be converted to canonical form before\n * matching.\n * <\/p>\n * @param string $default [optional] <p>\n * The locale to use if no match is found.\n * <\/p>\n * @return string The closest matching language tag or default value.\n *\/"
            },
            {
                "name": "canonicalize",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Canonicalize the locale string\n * @link http:\/\/php.net\/locale.canonicalize.php\n * @param string $locale <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "acceptFromHttp",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "header",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Tries to find out best available locale based on HTTP \"Accept-Language\" header\n * @link http:\/\/php.net\/locale.acceptfromhttp.php\n * @param string $header <p>\n * The string containing the \"Accept-Language\" header according to format in RFC 2616.\n * <\/p>\n * @return string The corresponding locale identifier.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "ACTUAL_LOCALE",
                "value": 0,
                "doc": "\/**\n * This is locale the data actually comes from.\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "VALID_LOCALE",
                "value": 1,
                "doc": "\/**\n * This is the most specific locale supported by ICU.\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "DEFAULT_LOCALE",
                "value": null,
                "doc": "\/**\n * Used as locale parameter with the methods of the various locale affected classes,\n * such as NumberFormatter. This constant would make the methods to use default\n * locale.\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "LANG_TAG",
                "value": "language",
                "doc": "\/**\n * Language subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "EXTLANG_TAG",
                "value": "extlang",
                "doc": "\/**\n * Extended language subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "SCRIPT_TAG",
                "value": "script",
                "doc": "\/**\n * Script subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "REGION_TAG",
                "value": "region",
                "doc": "\/**\n * Region subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "VARIANT_TAG",
                "value": "variant",
                "doc": "\/**\n * Variant subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "GRANDFATHERED_LANG_TAG",
                "value": "grandfathered",
                "doc": "\/**\n * Grandfathered Language subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            },
            {
                "name": "PRIVATE_TAG",
                "value": "private",
                "doc": "\/**\n * Private subtag\n * @link http:\/\/php.net\/intl.locale-constants.php\n *\/"
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MessageFormatter",
        "fqn": "\\MessageFormatter",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Constructs a new Message Formatter\n * @link http:\/\/php.net\/messageformatter.create.php\n * @param string $locale <p>\n * The locale to use when formatting arguments\n * <\/p>\n * @param string $pattern <p>\n * The pattern string to stick arguments into.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Constructs a new Message Formatter\n * @link http:\/\/php.net\/messageformatter.create.php\n * @param string $locale <p>\n * The locale to use when formatting arguments\n * <\/p>\n * @param string $pattern <p>\n * The pattern string to stick arguments into.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n * @return MessageFormatter The formatter object\n *\/"
            },
            {
                "name": "format",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "args",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Format the message\n * @link http:\/\/php.net\/messageformatter.format.php\n * @param array $args <p>\n * Arguments to insert into the format string\n * <\/p>\n * @return string The formatted string, or <b>FALSE<\/b> if an error occurred\n *\/"
            },
            {
                "name": "formatMessage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "args",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Quick format message\n * @link http:\/\/php.net\/messageformatter.formatmessage.php\n * @param string $locale <p>\n * The locale to use for formatting locale-dependent parts\n * <\/p>\n * @param string $pattern <p>\n * The pattern string to insert things into.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n * @param array $args <p>\n * The array of values to insert into the format string\n * <\/p>\n * @return string The formatted pattern string or <b>FALSE<\/b> if an error occurred\n *\/"
            },
            {
                "name": "parse",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Parse input string according to pattern\n * @link http:\/\/php.net\/messageformatter.parse.php\n * @param string $value <p>\n * The string to parse\n * <\/p>\n * @return array An array containing the items extracted, or <b>FALSE<\/b> on error\n *\/"
            },
            {
                "name": "parseMessage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Quick parse input string\n * @link http:\/\/php.net\/messageformatter.parsemessage.php\n * @param string $locale <p>\n * The locale to use for parsing locale-dependent parts\n * <\/p>\n * @param string $pattern <p>\n * The pattern with which to parse the <i>value<\/i>.\n * <\/p>\n * @param string $source <p>\n * The string to parse, conforming to the <i>pattern<\/i>.\n * <\/p>\n * @return array An array containing items extracted, or <b>FALSE<\/b> on error\n *\/"
            },
            {
                "name": "setPattern",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set the pattern used by the formatter\n * @link http:\/\/php.net\/messageformatter.setpattern.php\n * @param string $pattern <p>\n * The pattern string to use in this message formatter.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getPattern",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the pattern used by the formatter\n * @link http:\/\/php.net\/messageformatter.getpattern.php\n * @return string The pattern string for this message formatter\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the locale for which the formatter was created.\n * @link http:\/\/php.net\/messageformatter.getlocale.php\n * @return string The locale name\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the error code from last operation\n * @link http:\/\/php.net\/messageformatter.geterrorcode.php\n * @return int The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the error text from the last operation\n * @link http:\/\/php.net\/messageformatter.geterrormessage.php\n * @return string Description of the last error.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlDateFormatter",
        "fqn": "\\IntlDateFormatter",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "datetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timezone",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "calendar",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Instantiate new Intl ICU date formatter.\n *\n * @link http:\/\/php.net\/intldateformatter.create.php\n * @param string $locale\n *   Locale to use when formatting or parsing or <code>NULL<\/code> to use the value specified in the ini setting\n *   <code>\"intl.default_locale\"<\/code>.\n * @param integer $datetype\n *   Date type to use. This is one of the class constants. It can also be <code>NULL<\/code>, in which case ICU?s\n *   default date type will be used.\n * @param integer $timetype\n *   Time type to use. This is one of the class constants. It can also be <code>NULL<\/code>, in which case ICU?s\n *   default time type will be used.\n * @param mixed $timezone [optional]\n *   Time zone identifier. The default (and the one used if <code>NULL<\/code> is given) is the one returned by\n *   {@see date_default_timezone_get()} or, if applicable, that of the {@see \\IntlCalendar} object passed for the\n *   <var>$calendar<\/var> parameter. This identifier must be a valid identifier on ICU?s database or an identifier\n *   representing an explicit offset, such as <code>\"GMT-05:30\"<\/code>. This can also be an {@see \\IntlTimeZone} or a\n *   {@see \\DateTimeZone} object.\n * @param mixed $calendar [optional]\n *   Calendar to use for formatting or parsing. The default value is <code>NULL<\/code>, which corresponds to\n *   {@see self::GREGORIAN}. This can either be one of the class calendar constants or an\n *   {@see \\IntlCalendar}. Any {@see \\IntlCalendar} object passed will be cloned; it will not be changed by this\n *   instance. This will determine the calendar type used (gregorian, islamic, persian, etc.) and, if\n *   <code>NULL<\/code> is given for the <var>$timezone<\/var> parameter, also the timezone used.\n * @param string $pattern [optional]\n *   Optional pattern to use when formatting or parsing. Possible patterns are documented at\n *   {@link http:\/\/userguide.icu-project.org\/formatparse\/datetime}.\n * @since 5.3.0\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "datetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timezone",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "calendar",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Create a date formatter\n * @link http:\/\/php.net\/intldateformatter.create.php\n * @param string $locale <p>\n * Locale to use when formatting or parsing or <b>NULL<\/b> to use the value\n * specified in the ini setting intl.default_locale.\n * <\/p>\n * @param int $datetype <p>\n * Date type to use (<b>none<\/b>, <b>short<\/b>,\n * <b>medium<\/b>, <b>long<\/b>,\n * <b>full<\/b>). This is one of the IntlDateFormatter\n * constants. It can also be <b>NULL<\/b>, in which case ICU\u02bcs default\n * date type will be used.\n * <\/p>\n * @param int $timetype <p>\n * Time type to use (<b>none<\/b>, <b>short<\/b>,\n * <b>medium<\/b>, <b>long<\/b>,\n * <b>full<\/b>). This is one of the IntlDateFormatter\n * constants. It can also be <b>NULL<\/b>, in which case ICU\u02bcs default\n * time type will be used.\n * <\/p>\n * @param mixed $timezone [optional] <p>\n * Time zone ID. The default (and the one used if <b>NULL<\/b> is given) is the\n * one returned by <b>date_default_timezone_get<\/b> or, if\n * applicable, that of the <b>IntlCalendar<\/b> object passed\n * for the <i>calendar<\/i> parameter. This ID must be a\n * valid identifier on ICU\u02bcs database or an ID representing an\n * explicit offset, such as GMT-05:30.\n * <\/p>\n * <p>\n * This can also be an <b>IntlTimeZone<\/b> or a\n * <b>DateTimeZone<\/b> object.\n * <\/p>\n * @param mixed $calendar [optional] <p>\n * Calendar to use for formatting or parsing. The default value is <b>NULL<\/b>,\n * which corresponds to <b>IntlDateFormatter::GREGORIAN<\/b>.\n * This can either be one of the\n * IntlDateFormatter\n * calendar constants or an <b>IntlCalendar<\/b>. Any\n * <b>IntlCalendar<\/b> object passed will be clone; it will\n * not be changed by the <b>IntlDateFormatter<\/b>. This will\n * determine the calendar type used (gregorian, islamic, persian, etc.) and,\n * if <b>NULL<\/b> is given for the <i>timezone<\/i> parameter,\n * also the timezone used.\n * <\/p>\n * @param string $pattern [optional] <p>\n * Optional pattern to use when formatting or parsing.\n * Possible patterns are documented at http:\/\/userguide.icu-project.org\/formatparse\/datetime.\n * <\/p>\n * @return IntlDateFormatter The created <b>IntlDateFormatter<\/b> or <b>FALSE<\/b> in case of\n * failure.\n *\/"
            },
            {
                "name": "getDateType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the datetype used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.getdatetype.php\n * @return int The current date type value of the formatter.\n *\/"
            },
            {
                "name": "getTimeType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the timetype used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.gettimetype.php\n * @return int The current date type value of the formatter.\n *\/"
            },
            {
                "name": "getCalendar",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the calendar type used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.getcalendar.php\n * @return int The calendar\n * type being used by the formatter. Either\n * <b>IntlDateFormatter::TRADITIONAL<\/b> or\n * <b>IntlDateFormatter::GREGORIAN<\/b>.\n *\/"
            },
            {
                "name": "setCalendar",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "which",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Sets the calendar type used by the formatter\n * @link http:\/\/php.net\/intldateformatter.setcalendar.php\n * @param mixed $which <p>\n * This can either be: the calendar\n * type to use (default is\n * <b>IntlDateFormatter::GREGORIAN<\/b>, which is also used if\n * <b>NULL<\/b> is specified) or an\n * <b>IntlCalendar<\/b> object.\n * <\/p>\n * <p>\n * Any <b>IntlCalendar<\/b> object passed in will be cloned;\n * no modifications will be made to the argument object.\n * <\/p>\n * <p>\n * The timezone of the formatter will only be kept if an\n * <b>IntlCalendar<\/b> object is not passed, otherwise the\n * new timezone will be that of the passed object.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getTimeZoneId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the timezone-id used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.gettimezoneid.php\n * @return string ID string for the time zone used by this formatter.\n *\/"
            },
            {
                "name": "setTimeZoneId",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "zone",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Sets the time zone to use\n * @link http:\/\/php.net\/intldateformatter.settimezoneid.php\n * @param string $zone <p>\n * The time zone ID string of the time zone to use.\n * If <b>NULL<\/b> or the empty string, the default time zone for the runtime is used.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "setPattern",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set the pattern used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.setpattern.php\n * @param string $pattern <p>\n * New pattern string to use.\n * Possible patterns are documented at http:\/\/userguide.icu-project.org\/formatparse\/datetime.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Bad formatstrings are usually the cause of the failure.\n *\/"
            },
            {
                "name": "getPattern",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the pattern used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.getpattern.php\n * @return string The pattern string being used to format\/parse.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "which",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the locale used by formatter\n * @link http:\/\/php.net\/intldateformatter.getlocale.php\n * @param int $which [optional]\n * @return string the locale of this formatter or 'false' if error\n *\/"
            },
            {
                "name": "setLenient",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "lenient",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Set the leniency of the parser\n * @link http:\/\/php.net\/intldateformatter.setlenient.php\n * @param bool $lenient <p>\n * Sets whether the parser is lenient or not, default is <b>TRUE<\/b> (lenient).\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "isLenient",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the lenient used for the IntlDateFormatter\n * @link http:\/\/php.net\/intldateformatter.islenient.php\n * @return bool <b>TRUE<\/b> if parser is lenient, <b>FALSE<\/b> if parser is strict. By default the parser is lenient.\n *\/"
            },
            {
                "name": "format",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Format the date\/time value as a string\n * @link http:\/\/php.net\/intldateformatter.format.php\n * @param mixed $value <p>\n * Value to format. This may be a <b>DateTime<\/b> object, an\n * <b>IntlCalendar<\/b> object, a numeric type\n * representing a (possibly fractional) number of seconds since epoch or an\n * array in the format output by\n * <b>localtime<\/b>.\n * <\/p>\n * <p>\n * If a <b>DateTime<\/b> or an\n * <b>IntlCalendar<\/b> object is passed, its timezone is not\n * considered. The object will be formatted using the formater\u02bcs configured\n * timezone. If one wants to use the timezone of the object to be formatted,\n * <b>IntlDateFormatter::setTimeZone<\/b> must be called before\n * with the object\u02bcs timezone. Alternatively, the static function\n * <b>IntlDateFormatter::formatObject<\/b> may be used instead.\n * <\/p>\n * @return string The formatted string or, if an error occurred, <b>FALSE<\/b>.\n *\/"
            },
            {
                "name": "parse",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Parse string to a timestamp value\n * @link http:\/\/php.net\/intldateformatter.parse.php\n * @param string $value <p>\n * string to convert to a time\n * <\/p>\n * @param int $position [optional] <p>\n * Position at which to start the parsing in $value (zero-based).\n * If no error occurs before $value is consumed, $parse_pos will contain -1\n * otherwise it will contain the position at which parsing ended (and the error occurred).\n * This variable will contain the end position if the parse fails.\n * If $parse_pos > strlen($value), the parse fails immediately.\n * <\/p>\n * @return int timestamp parsed value, or <b>FALSE<\/b> if value can't be parsed.\n *\/"
            },
            {
                "name": "localtime",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Parse string to a field-based time value\n * @link http:\/\/php.net\/intldateformatter.localtime.php\n * @param string $value <p>\n * string to convert to a time\n * <\/p>\n * @param int $position [optional] <p>\n * Position at which to start the parsing in $value (zero-based).\n * If no error occurs before $value is consumed, $parse_pos will contain -1\n * otherwise it will contain the position at which parsing ended .\n * If $parse_pos > strlen($value), the parse fails immediately.\n * <\/p>\n * @return array Localtime compatible array of integers : contains 24 hour clock value in tm_hour field\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the error code from last operation\n * @link http:\/\/php.net\/intldateformatter.geterrorcode.php\n * @return int The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0, PECL intl &gt;= 1.0.0)<br\/>\n * Get the error text from the last operation.\n * @link http:\/\/php.net\/intldateformatter.geterrormessage.php\n * @return string Description of the last error.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "FULL",
                "value": 0,
                "doc": "\/**\n * Completely specified style (Tuesday, April 12, 1952 AD or 3:30:42pm PST)\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            },
            {
                "name": "LONG",
                "value": 1,
                "doc": "\/**\n * Long style (January 12, 1952 or 3:30:32pm)\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            },
            {
                "name": "MEDIUM",
                "value": 2,
                "doc": "\/**\n * Medium style (Jan 12, 1952)\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            },
            {
                "name": "SHORT",
                "value": 3,
                "doc": "\/**\n * Most abbreviated style, only essential data (12\/13\/52 or 3:30pm)\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            },
            {
                "name": "NONE",
                "value": null,
                "doc": "\/**\n * Do not include this element\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            },
            {
                "name": "GREGORIAN",
                "value": 1,
                "doc": "\/**\n * Gregorian Calendar\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            },
            {
                "name": "TRADITIONAL",
                "value": 0,
                "doc": "\/**\n * Non-Gregorian Calendar\n * @link http:\/\/php.net\/intl.intldateformatter-constants.php\n *\/"
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlException",
        "fqn": "\\IntlException",
        "type": 0,
        "extendsClass": "Exception",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "ResourceBundle",
        "fqn": "\\ResourceBundle",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "bundlename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fallback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param $locale\n * @param $bundlename\n * @param $fallback [optional]\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "bundlename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fallback",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.3.2, PECL intl &gt;= 2.0.0)<br\/>\n * Create a resource bundle\n * @link http:\/\/php.net\/resourcebundle.create.php\n * @param string $locale <p>\n * Locale for which the resources should be loaded (locale name, e.g. en_CA).\n * <\/p>\n * @param string $bundlename <p>\n * The directory where the data is stored or the name of the .dat file.\n * <\/p>\n * @param bool $fallback [optional] <p>\n * Whether locale should match exactly or fallback to parent locale is allowed.\n * <\/p>\n * @return ResourceBundle <b>ResourceBundle<\/b> object or <b>FALSE<\/b> on error.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.3.2, PECL intl &gt;= 2.0.0)<br\/>\n * Get data from the bundle\n * @link http:\/\/php.net\/resourcebundle.get.php\n * @param string|int $index <p>\n * Data index, must be string or integer.\n * <\/p>\n * @return mixed the data located at the index or <b>NULL<\/b> on error. Strings, integers and binary data strings\n * are returned as corresponding PHP types, integer array is returned as PHP array. Complex types are\n * returned as <b>ResourceBundle<\/b> object.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.3.2, PECL intl &gt;= 2.0.0)<br\/>\n * Get number of elements in the bundle\n * @link http:\/\/php.net\/resourcebundle.count.php\n * @return int number of elements in the bundle.\n *\/"
            },
            {
                "name": "getLocales",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "bundlename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.3.2, PECL intl &gt;= 2.0.0)<br\/>\n * Get supported locales\n * @link http:\/\/php.net\/resourcebundle.locales.php\n * @param string $bundlename <p>\n * Path of ResourceBundle for which to get available locales, or\n * empty string for default locales list.\n * <\/p>\n * @return array the list of locales supported by the bundle.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.3.2, PECL intl &gt;= 2.0.0)<br\/>\n * Get bundle's last error code.\n * @link http:\/\/php.net\/resourcebundle.geterrorcode.php\n * @return int error code from last bundle object call.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.3.2, PECL intl &gt;= 2.0.0)<br\/>\n * Get bundle's last error message.\n * @link http:\/\/php.net\/resourcebundle.geterrormessage.php\n * @return string error message from last bundle object's call.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "Transliterator",
        "fqn": "\\Transliterator",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "direction",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Create a transliterator\n * @link http:\/\/php.net\/transliterator.create.php\n * @param string $id <p>\n * The id.\n * <\/p>\n * @param int $direction [optional] <p>\n * The direction, defaults to\n * >Transliterator::FORWARD.\n * May also be set to\n * Transliterator::REVERSE.\n * <\/p>\n * @return Transliterator a <b>Transliterator<\/b> object on success,\n * or <b>NULL<\/b> on failure.\n *\/"
            },
            {
                "name": "createFromRules",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "rules",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "direction",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Create transliterator from rules\n * @link http:\/\/php.net\/transliterator.createfromrules.php\n * @param string $rules <p>\n * The rules.\n * <\/p>\n * @param string $direction [optional] <p>\n * The direction, defaults to\n * >Transliterator::FORWARD.\n * May also be set to\n * Transliterator::REVERSE.\n * <\/p>\n * @return Transliterator a <b>Transliterator<\/b> object on success,\n * or <b>NULL<\/b> on failure.\n *\/"
            },
            {
                "name": "createInverse",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Create an inverse transliterator\n * @link http:\/\/php.net\/transliterator.createinverse.php\n * @return Transliterator a <b>Transliterator<\/b> object on success,\n * or <b>NULL<\/b> on failure\n *\/"
            },
            {
                "name": "listIDs",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Get transliterator IDs\n * @link http:\/\/php.net\/transliterator.listids.php\n * @return array An array of registered transliterator IDs on success,\n * or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "transliterate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "subject",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "start",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "end",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Transliterate a string\n * @link http:\/\/php.net\/transliterator.transliterate.php\n * @param string $subject <p>\n * The string to be transformed.\n * <\/p>\n * @param int $start [optional] <p>\n * The start index (in UTF-16 code units) from which the string will start\n * to be transformed, inclusive. Indexing starts at 0. The text before will\n * be left as is.\n * <\/p>\n * @param int $end [optional] <p>\n * The end index (in UTF-16 code units) until which the string will be\n * transformed, exclusive. Indexing starts at 0. The text after will be\n * left as is.\n * <\/p>\n * @return string The transfomed string on success, or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Get last error code\n * @link http:\/\/php.net\/transliterator.geterrorcode.php\n * @return int The error code on success,\n * or <b>FALSE<\/b> if none exists, or on failure.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Get last error message\n * @link http:\/\/php.net\/transliterator.geterrormessage.php\n * @return string The error code on success,\n * or <b>FALSE<\/b> if none exists, or on failure.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "id",
                "type": 1,
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "FORWARD",
                "value": 0,
                "doc": null
            },
            {
                "name": "REVERSE",
                "value": 1,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "Spoofchecker",
        "fqn": "\\Spoofchecker",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Constructor\n * @link http:\/\/php.net\/spoofchecker.construct.php\n *\/"
            },
            {
                "name": "isSuspicious",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "text",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "error",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Checks if a given text contains any suspicious characters\n * @link http:\/\/php.net\/spoofchecker.issuspicious.php\n * @param string $text <p>\n * <\/p>\n * @param string $error [optional] <p>\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "areConfusable",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "s1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "s2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "error",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Checks if a given text contains any confusable characters\n * @link http:\/\/php.net\/spoofchecker.areconfusable.php\n * @param string $s1 <p>\n * <\/p>\n * @param string $s2 <p>\n * <\/p>\n * @param string $error [optional] <p>\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "setAllowedLocales",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale_list",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Locales to use when running checks\n * @link http:\/\/php.net\/spoofchecker.setallowedlocales.php\n * @param string $locale_list <p>\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setChecks",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "checks",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0)<br\/>\n * Set the checks to run\n * @link http:\/\/php.net\/spoofchecker.setchecks.php\n * @param string $checks <p>\n * <\/p>\n * @return void\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "SINGLE_SCRIPT_CONFUSABLE",
                "value": 1,
                "doc": null
            },
            {
                "name": "MIXED_SCRIPT_CONFUSABLE",
                "value": 2,
                "doc": null
            },
            {
                "name": "WHOLE_SCRIPT_CONFUSABLE",
                "value": 4,
                "doc": null
            },
            {
                "name": "ANY_CASE",
                "value": 8,
                "doc": null
            },
            {
                "name": "SINGLE_SCRIPT",
                "value": 16,
                "doc": null
            },
            {
                "name": "INVISIBLE",
                "value": 32,
                "doc": null
            },
            {
                "name": "CHAR_LIMIT",
                "value": 64,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_compare",
        "params": [
            {
                "name": "str1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "str2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_attribute",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_set_attribute",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "val",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_strength",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_set_strength",
        "params": [
            {
                "name": "strength",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_sort",
        "params": [
            {
                "name": "arr",
                "type": "array",
                "byRef": true,
                "default": ""
            },
            {
                "name": "sort_flag",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_sort_with_sort_keys",
        "params": [
            {
                "name": "arr",
                "type": "array",
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_asort",
        "params": [
            {
                "name": "arr",
                "type": "array",
                "byRef": true,
                "default": ""
            },
            {
                "name": "sort_flag",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_locale",
        "params": [
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_error_code",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_error_message",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_sort_key",
        "params": [
            {
                "name": "str",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "style",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_format",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_parse",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_format_currency",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "currency",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_parse_currency",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "currency",
                "type": null,
                "byRef": true,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_attribute",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_attribute",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_text_attribute",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_text_attribute",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_symbol",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_symbol",
        "params": [
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_pattern",
        "params": [
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_pattern",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_locale",
        "params": [
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_error_code",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_error_message",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "normalizer_normalize",
        "params": [
            {
                "name": "input",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "form",
                "type": null,
                "byRef": false,
                "default": "Normalizer::FORM_C"
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "normalizer_is_normalized",
        "params": [
            {
                "name": "input",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "form",
                "type": null,
                "byRef": false,
                "default": "Normalizer::FORM_C"
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_default",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_set_default",
        "params": [
            {
                "name": "name",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_primary_language",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_script",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_region",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_keywords",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_script",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "in_locale",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_region",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "in_locale",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_name",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "in_locale",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_language",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "in_locale",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_variant",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "in_locale",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_compose",
        "params": [
            {
                "name": "subtags",
                "type": "array",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_parse",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_all_variants",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_filter_matches",
        "params": [
            {
                "name": "langtag",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "canonicalize",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_canonicalize",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_lookup",
        "params": [
            {
                "name": "langtag",
                "type": "array",
                "byRef": false,
                "default": ""
            },
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "canonicalize",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "default",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_accept_from_http",
        "params": [
            {
                "name": "header",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_format",
        "params": [
            {
                "name": "args",
                "type": "array",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_format_message",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "args",
                "type": "array",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_parse",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_parse_message",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "source",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_set_pattern",
        "params": [
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_pattern",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_locale",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_error_code",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_error_message",
        "params": [
            {
                "name": "coll",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "datetype",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "timetype",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "timezone",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "calendar",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_datetype",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_timetype",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_calendar",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_calendar",
        "params": [
            {
                "name": "which",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_locale",
        "params": [
            {
                "name": "which",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_timezone_id",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_timezone_id",
        "params": [
            {
                "name": "zone",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_pattern",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_pattern",
        "params": [
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_is_lenient",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_lenient",
        "params": [
            {
                "name": "lenient",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_format",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_parse",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_localtime",
        "params": [
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_error_code",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_error_message",
        "params": [
            {
                "name": "coll",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strlen",
        "params": [
            {
                "name": "input",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strpos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": 0
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_stripos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": 0
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strrpos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": 0
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strripos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": 0
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_substr",
        "params": [
            {
                "name": "string",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "start",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "length",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strstr",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "before_needle",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_stristr",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "before_needle",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_extract",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "size",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "extract_type",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "start",
                "type": null,
                "byRef": false,
                "default": 0
            },
            {
                "name": "next",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "idn_to_ascii",
        "params": [
            {
                "name": "utf8_domain",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "errorcode",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "idn_to_utf8",
        "params": [
            {
                "name": "ascii_domain",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "errorcode",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "bundlename",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "fallback",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_get",
        "params": [
            {
                "name": "index",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_count",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_locales",
        "params": [
            {
                "name": "bundlename",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_get_error_code",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_get_error_message",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_create",
        "params": [
            {
                "name": "id",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "direction",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_create_from_rules",
        "params": [
            {
                "name": "rules",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "direction",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_list_ids",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_create_inverse",
        "params": [
            {
                "name": "orig_trans",
                "type": "Transliterator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_transliterate",
        "params": [
            {
                "name": "subject",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "start",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "end",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_get_error_code",
        "params": [
            {
                "name": "trans",
                "type": "Transliterator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_get_error_message",
        "params": [
            {
                "name": "trans",
                "type": "Transliterator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_get_error_code",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_get_error_message",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_is_failure",
        "params": [
            {
                "name": "error_code",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_error_name",
        "params": [
            {
                "name": "error_code",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Constant",
        "name": "INTL_MAX_LOCALE_LEN",
        "value": 80
    },
    {
        "stmtType": "Constant",
        "name": "INTL_ICU_VERSION",
        "value": "4.8.1.1"
    },
    {
        "stmtType": "Constant",
        "name": "INTL_ICU_DATA_VERSION",
        "value": "4.8.1"
    },
    {
        "stmtType": "Constant",
        "name": "ULOC_ACTUAL_LOCALE",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "ULOC_VALID_LOCALE",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "GRAPHEME_EXTR_COUNT",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "GRAPHEME_EXTR_MAXBYTES",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "GRAPHEME_EXTR_MAXCHARS",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "U_USING_FALLBACK_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_ERROR_WARNING_START",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_USING_DEFAULT_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_SAFECLONE_ALLOCATED_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_STATE_OLD_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_STRING_NOT_TERMINATED_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_SORT_KEY_TOO_SHORT_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_AMBIGUOUS_ALIAS_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_DIFFERENT_UCA_VERSION",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_ERROR_WARNING_LIMIT",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_ZERO_ERROR",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_ARGUMENT_ERROR",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "U_MISSING_RESOURCE_ERROR",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_FORMAT_ERROR",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "U_FILE_ACCESS_ERROR",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "U_INTERNAL_PROGRAM_ERROR",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "U_MESSAGE_PARSE_ERROR",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "U_MEMORY_ALLOCATION_ERROR",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "U_INDEX_OUTOFBOUNDS_ERROR",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "U_PARSE_ERROR",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_CHAR_FOUND",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "U_TRUNCATED_CHAR_FOUND",
        "value": 11
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_CHAR_FOUND",
        "value": 12
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_TABLE_FORMAT",
        "value": 13
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_TABLE_FILE",
        "value": 14
    },
    {
        "stmtType": "Constant",
        "name": "U_BUFFER_OVERFLOW_ERROR",
        "value": 15
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_ERROR",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "U_RESOURCE_TYPE_MISMATCH",
        "value": 17
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_ESCAPE_SEQUENCE",
        "value": 18
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_ESCAPE_SEQUENCE",
        "value": 19
    },
    {
        "stmtType": "Constant",
        "name": "U_NO_SPACE_AVAILABLE",
        "value": 20
    },
    {
        "stmtType": "Constant",
        "name": "U_CE_NOT_FOUND_ERROR",
        "value": 21
    },
    {
        "stmtType": "Constant",
        "name": "U_PRIMARY_TOO_LONG_ERROR",
        "value": 22
    },
    {
        "stmtType": "Constant",
        "name": "U_STATE_TOO_OLD_ERROR",
        "value": 23
    },
    {
        "stmtType": "Constant",
        "name": "U_TOO_MANY_ALIASES_ERROR",
        "value": 24
    },
    {
        "stmtType": "Constant",
        "name": "U_ENUM_OUT_OF_SYNC_ERROR",
        "value": 25
    },
    {
        "stmtType": "Constant",
        "name": "U_INVARIANT_CONVERSION_ERROR",
        "value": 26
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_STATE_ERROR",
        "value": 27
    },
    {
        "stmtType": "Constant",
        "name": "U_COLLATOR_VERSION_MISMATCH",
        "value": 28
    },
    {
        "stmtType": "Constant",
        "name": "U_USELESS_COLLATOR_ERROR",
        "value": 29
    },
    {
        "stmtType": "Constant",
        "name": "U_NO_WRITE_PERMISSION",
        "value": 30
    },
    {
        "stmtType": "Constant",
        "name": "U_STANDARD_ERROR_LIMIT",
        "value": 31
    },
    {
        "stmtType": "Constant",
        "name": "U_BAD_VARIABLE_DEFINITION",
        "value": 65536
    },
    {
        "stmtType": "Constant",
        "name": "U_PARSE_ERROR_START",
        "value": 65536
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_RULE",
        "value": 65537
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_SET",
        "value": 65538
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_SYMBOL_REFERENCE",
        "value": 65539
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_UNICODE_ESCAPE",
        "value": 65540
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_VARIABLE_DEFINITION",
        "value": 65541
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_VARIABLE_REFERENCE",
        "value": 65542
    },
    {
        "stmtType": "Constant",
        "name": "U_MISMATCHED_SEGMENT_DELIMITERS",
        "value": 65543
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_ANCHOR_START",
        "value": 65544
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_CURSOR_OFFSET",
        "value": 65545
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_QUANTIFIER",
        "value": 65546
    },
    {
        "stmtType": "Constant",
        "name": "U_MISSING_OPERATOR",
        "value": 65547
    },
    {
        "stmtType": "Constant",
        "name": "U_MISSING_SEGMENT_CLOSE",
        "value": 65548
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_ANTE_CONTEXTS",
        "value": 65549
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_CURSORS",
        "value": 65550
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_POST_CONTEXTS",
        "value": 65551
    },
    {
        "stmtType": "Constant",
        "name": "U_TRAILING_BACKSLASH",
        "value": 65552
    },
    {
        "stmtType": "Constant",
        "name": "U_UNDEFINED_SEGMENT_REFERENCE",
        "value": 65553
    },
    {
        "stmtType": "Constant",
        "name": "U_UNDEFINED_VARIABLE",
        "value": 65554
    },
    {
        "stmtType": "Constant",
        "name": "U_UNQUOTED_SPECIAL",
        "value": 65555
    },
    {
        "stmtType": "Constant",
        "name": "U_UNTERMINATED_QUOTE",
        "value": 65556
    },
    {
        "stmtType": "Constant",
        "name": "U_RULE_MASK_ERROR",
        "value": 65557
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_COMPOUND_FILTER",
        "value": 65558
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_COMPOUND_FILTERS",
        "value": 65559
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_RBT_SYNTAX",
        "value": 65560
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_PROPERTY_PATTERN",
        "value": 65561
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_PRAGMA",
        "value": 65562
    },
    {
        "stmtType": "Constant",
        "name": "U_UNCLOSED_SEGMENT",
        "value": 65563
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_CHAR_IN_SEGMENT",
        "value": 65564
    },
    {
        "stmtType": "Constant",
        "name": "U_VARIABLE_RANGE_EXHAUSTED",
        "value": 65565
    },
    {
        "stmtType": "Constant",
        "name": "U_VARIABLE_RANGE_OVERLAP",
        "value": 65566
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_CHARACTER",
        "value": 65567
    },
    {
        "stmtType": "Constant",
        "name": "U_INTERNAL_TRANSLITERATOR_ERROR",
        "value": 65568
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_ID",
        "value": 65569
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_FUNCTION",
        "value": 65570
    },
    {
        "stmtType": "Constant",
        "name": "U_PARSE_ERROR_LIMIT",
        "value": 65571
    },
    {
        "stmtType": "Constant",
        "name": "U_UNEXPECTED_TOKEN",
        "value": 65792
    },
    {
        "stmtType": "Constant",
        "name": "U_FMT_PARSE_ERROR_START",
        "value": 65792
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_DECIMAL_SEPARATORS",
        "value": 65793
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_DECIMAL_SEPERATORS",
        "value": 65793
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_EXPONENTIAL_SYMBOLS",
        "value": 65794
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_EXPONENTIAL_PATTERN",
        "value": 65795
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_PERCENT_SYMBOLS",
        "value": 65796
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_PERMILL_SYMBOLS",
        "value": 65797
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_PAD_SPECIFIERS",
        "value": 65798
    },
    {
        "stmtType": "Constant",
        "name": "U_PATTERN_SYNTAX_ERROR",
        "value": 65799
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_PAD_POSITION",
        "value": 65800
    },
    {
        "stmtType": "Constant",
        "name": "U_UNMATCHED_BRACES",
        "value": 65801
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_PROPERTY",
        "value": 65802
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_ATTRIBUTE",
        "value": 65803
    },
    {
        "stmtType": "Constant",
        "name": "U_FMT_PARSE_ERROR_LIMIT",
        "value": 65810
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_INTERNAL_ERROR",
        "value": 66048
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_ERROR_START",
        "value": 66048
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_HEX_DIGITS_EXPECTED",
        "value": 66049
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_SEMICOLON_EXPECTED",
        "value": 66050
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_RULE_SYNTAX",
        "value": 66051
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_UNCLOSED_SET",
        "value": 66052
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_ASSIGN_ERROR",
        "value": 66053
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_VARIABLE_REDFINITION",
        "value": 66054
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_MISMATCHED_PAREN",
        "value": 66055
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_NEW_LINE_IN_QUOTED_STRING",
        "value": 66056
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_UNDEFINED_VARIABLE",
        "value": 66057
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_INIT_ERROR",
        "value": 66058
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_RULE_EMPTY_SET",
        "value": 66059
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_UNRECOGNIZED_OPTION",
        "value": 66060
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_MALFORMED_RULE_TAG",
        "value": 66061
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_ERROR_LIMIT",
        "value": 66062
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INTERNAL_ERROR",
        "value": 66304
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_ERROR_START",
        "value": 66304
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_RULE_SYNTAX",
        "value": 66305
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INVALID_STATE",
        "value": 66306
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_BAD_ESCAPE_SEQUENCE",
        "value": 66307
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_PROPERTY_SYNTAX",
        "value": 66308
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_UNIMPLEMENTED",
        "value": 66309
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_MISMATCHED_PAREN",
        "value": 66310
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_NUMBER_TOO_BIG",
        "value": 66311
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_BAD_INTERVAL",
        "value": 66312
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_MAX_LT_MIN",
        "value": 66313
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INVALID_BACK_REF",
        "value": 66314
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INVALID_FLAG",
        "value": 66315
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_LOOK_BEHIND_LIMIT",
        "value": 66316
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_SET_CONTAINS_STRING",
        "value": 66317
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_ERROR_LIMIT",
        "value": 66324
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_PROHIBITED_ERROR",
        "value": 66560
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ERROR_START",
        "value": 66560
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_UNASSIGNED_ERROR",
        "value": 66561
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_CHECK_BIDI_ERROR",
        "value": 66562
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_STD3_ASCII_RULES_ERROR",
        "value": 66563
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ACE_PREFIX_ERROR",
        "value": 66564
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_VERIFICATION_ERROR",
        "value": 66565
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_LABEL_TOO_LONG_ERROR",
        "value": 66566
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ZERO_LENGTH_LABEL_ERROR",
        "value": 66567
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR",
        "value": 66568
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ERROR_LIMIT",
        "value": 66569
    },
    {
        "stmtType": "Constant",
        "name": "U_STRINGPREP_PROHIBITED_ERROR",
        "value": 66560
    },
    {
        "stmtType": "Constant",
        "name": "U_STRINGPREP_UNASSIGNED_ERROR",
        "value": 66561
    },
    {
        "stmtType": "Constant",
        "name": "U_STRINGPREP_CHECK_BIDI_ERROR",
        "value": 66562
    },
    {
        "stmtType": "Constant",
        "name": "U_ERROR_LIMIT",
        "value": 66818
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_DEFAULT",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ALLOW_UNASSIGNED",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_USE_STD3_RULES",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_CHECK_BIDI",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_CHECK_CONTEXTJ",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_NONTRANSITIONAL_TO_ASCII",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_NONTRANSITIONAL_TO_UNICODE",
        "value": 32
    },
    {
        "stmtType": "Constant",
        "name": "INTL_IDNA_VARIANT_2003",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "INTL_IDNA_VARIANT_UTS46",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_EMPTY_LABEL",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LABEL_TOO_LONG",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_DOMAIN_NAME_TOO_LONG",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LEADING_HYPHEN",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_TRAILING_HYPHEN",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_HYPHEN_3_4",
        "value": 32
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LEADING_COMBINING_MARK",
        "value": 64
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_DISALLOWED",
        "value": 128
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_PUNYCODE",
        "value": 256
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LABEL_HAS_DOT",
        "value": 512
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_INVALID_ACE_LABEL",
        "value": 1024
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_BIDI",
        "value": 2048
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_CONTEXTJ",
        "value": 4096
    }
]
