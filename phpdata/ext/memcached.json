[
    {
        "stmtType": "Class",
        "name": "Memcached",
        "fqn": "\\Memcached",
        "type": 0,
        "extendsClass": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "persistent_id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "on_new_object_cb",
                        "type": "callable",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Instantiate new Memcached connection.\n *\n * @link http:\/\/php.net\/memcached.construct.php\n * @param string $persistent_id [optional]\n *   By default the Memcached instances are destroyed at the end of the request. To create an instance that persists\n *   between requests, use <var>$persistent_id<\/var> to specify a unique ID for the instance. All instances created\n *   with the same <var>$persistent_id<\/var> will share the same connection.\n * @param mixed $callback [optional]\n *   This parameter is currently undocumented.\n * @since 0.1.0\n *\/"
            },
            {
                "name": "addServer",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "weight",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * Add new server to the pool\n *\n * Add the specified server to the pool. No connection is established to the server at this time, but if you are using\n * consistent key distribution option (via {@see \\Memcached::DISTRIBUTION_CONSISTENT} or\n * {@see \\Memcached::OPT_LIBKETAMA_COMPATIBLE}), some of the internal data structures will have to be udpated. Thus,\n * if you need to add multiple servers, it is better to use {@see \\Memcached::addServers()} as the update then happens\n * only once.\n *\n * The same server may appear multiple times in the server pool, because no duplication checks are made. This is not\n * advisable; instead, use the <var>$weight<\/var> option to increase the selection weighting of this server.\n *\n * @link http:\/\/php.net\/memcached.addserver.php\n * @param string $host\n *   The hostname of the memcache server. If the hostname is invalid, data-related operations will set\n *   {@see \\Memcached::RES_HOST_LOOKUP_FAILURE} result code. You can specify the absolute path to a Unix socket here\n *   as well, the <var>$port<\/var> is then ignored (set it to <code>0<\/code>).\n * @param integer $port\n *   The port on which memcache is running. Usually, this is <code>11211<\/code>.\n * @param integer $weight [optional]\n *   The weight of the server relative to the total weight of all the servers in the pool. This controls the\n *   probability of the server being selected for operations. This is used only with consistent distribution option\n *   and usually corresponds to the amount of memory available to memcache on that server.\n * @return boolean\n *   Returns <code>TRUE<\/code> on success or <code>FALSE<\/code> on failure.\n * @since 0.1.0\n *\/"
            },
            {
                "name": "addServers",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "servers",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add multipled servers to the pool\n *\n * @link http:\/\/php.net\/memcached.addservers.php\n * @param array $servers\n *   Numeric array where each offsets value is another numeric array consisting of host, port and weight. Example:\n *   <code>array(0 => array(\"host\", 1234, 1234))<\/code>.\n * @return boolean\n *   <code>TRUE<\/code> on success or <code>FALSE<\/code> on failure.\n * @since 0.1.0\n *\/"
            },
            {
                "name": "increment",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "incrementBy",
                        "type": null,
                        "byRef": false,
                        "default": 1
                    },
                    {
                        "name": "initialValue",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "expires",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * Increment numeric item's value.\n *\n * @link http:\/\/php.net\/memcached.increment.php\n * @param mixed $key\n *   They key of the item to increment.\n * @param integer $incrementBy [optional]\n *   The amount by which to increment the item's value.\n * @param integer $initialValue [optional]\n *   The value to set the item to if it doesn't currently exist. Please note that you have to use the binary protocol\n *   to use this parameter (<code>Memcached::setOption(Memcached::OPT_BINARY_PROTOCOL, true)<\/code>).\n * @param integer $expires [optional]\n *   The expiry time to set on the item. Please note htat you have to use the binary protocol to use this parameter\n *   (<code>Memcached::setOption(Memcached::OPT_BINARY_PROTOCOL, true)<\/code>).\n * @return integer\n *   The new item's value on success or <code>FALSE<\/code> on failure.\n * @since 0.1.0\n *\/"
            },
            {
                "name": "getResultCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Return the result code of the last operation\n * @link http:\/\/php.net\/memcached.getresultcode.php\n * @return int Result code of the last Memcached operation.\n *\/"
            },
            {
                "name": "getResultMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 1.0.0)<br\/>\n * Return the message describing the result of the last operation\n * @link http:\/\/php.net\/memcached.getresultmessage.php\n * @return string Message describing the result of the last Memcached operation.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "cache_cb",
                        "type": "callable",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "cas_token",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Retrieve an item\n * @link http:\/\/php.net\/memcached.get.php\n * @param string $key <p>\n * The key of the item to retrieve.\n * <\/p>\n * @param callable $cache_cb [optional] <p>\n * Read-through caching callback or <b>NULL<\/b>.\n * <\/p>\n * @param float $cas_token [optional] <p>\n * The variable to store the CAS token in.\n * <\/p>\n * @return mixed the value stored in the cache or <b>FALSE<\/b> otherwise.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTFOUND<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "getByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "cache_cb",
                        "type": "callable",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "cas_token",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Retrieve an item from a specific server\n * @link http:\/\/php.net\/memcached.getbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key of the item to fetch.\n * <\/p>\n * @param callable $cache_cb [optional] <p>\n * Read-through caching callback or <b>NULL<\/b>\n * <\/p>\n * @param float $cas_token [optional] <p>\n * The variable to store the CAS token in.\n * <\/p>\n * @return mixed the value stored in the cache or <b>FALSE<\/b> otherwise.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTFOUND<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "getMulti",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "cas_tokens",
                        "type": "array",
                        "byRef": true,
                        "default": null
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Retrieve multiple items\n * @link http:\/\/php.net\/memcached.getmulti.php\n * @param array $keys <p>\n * Array of keys to retrieve.\n * <\/p>\n * @param array $cas_tokens [optional] <p>\n * The variable to store the CAS tokens for the found items.\n * <\/p>\n * @param int $flags [optional] <p>\n * The flags for the get operation.\n * <\/p>\n * @return mixed the array of found items or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "getMultiByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "keys",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "cas_tokens",
                        "type": null,
                        "byRef": true,
                        "default": null
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Retrieve multiple items from a specific server\n * @link http:\/\/php.net\/memcached.getmultibykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param array $keys <p>\n * Array of keys to retrieve.\n * <\/p>\n * @param string $cas_tokens [optional] <p>\n * The variable to store the CAS tokens for the found items.\n * <\/p>\n * @param int $flags [optional] <p>\n * The flags for the get operation.\n * <\/p>\n * @return array the array of found items or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "getDelayed",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "with_cas",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "value_cb",
                        "type": "callable",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Request multiple items\n * @link http:\/\/php.net\/memcached.getdelayed.php\n * @param array $keys <p>\n * Array of keys to request.\n * <\/p>\n * @param bool $with_cas [optional] <p>\n * Whether to request CAS token values also.\n * <\/p>\n * @param callable $value_cb [optional] <p>\n * The result callback or <b>NULL<\/b>.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "getDelayedByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "keys",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "with_cas",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "value_cb",
                        "type": "callable",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Request multiple items from a specific server\n * @link http:\/\/php.net\/memcached.getdelayedbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param array $keys <p>\n * Array of keys to request.\n * <\/p>\n * @param bool $with_cas [optional] <p>\n * Whether to request CAS token values also.\n * <\/p>\n * @param callable $value_cb [optional] <p>\n * The result callback or <b>NULL<\/b>.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "fetch",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Fetch the next result\n * @link http:\/\/php.net\/memcached.fetch.php\n * @return array the next result or <b>FALSE<\/b> otherwise.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_END<\/b> if result set is exhausted.\n *\/"
            },
            {
                "name": "fetchAll",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Fetch all the remaining results\n * @link http:\/\/php.net\/memcached.fetchall.php\n * @return array the results or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "set",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Store an item\n * @link http:\/\/php.net\/memcached.set.php\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "setByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Store an item on a specific server\n * @link http:\/\/php.net\/memcached.setbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "touch",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Set a new expiration on an item\n * @link http:\/\/php.net\/memcached.touch.php\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param int $expiration <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "touchByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Set a new expiration on an item on a specific server\n * @link http:\/\/php.net\/memcached.touchbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param int $expiration <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "setMulti",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "items",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Store multiple items\n * @link http:\/\/php.net\/memcached.setmulti.php\n * @param array $items <p>\n * An array of key\/value pairs to store on the server.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "setMultiByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "items",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Store multiple items on a specific server\n * @link http:\/\/php.net\/memcached.setmultibykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param array $items <p>\n * An array of key\/value pairs to store on the server.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "cas",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cas_token",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Compare and swap an item\n * @link http:\/\/php.net\/memcached.cas.php\n * @param float $cas_token <p>\n * Unique value associated with the existing item. Generated by memcache.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_DATA_EXISTS<\/b> if the item you are trying\n * to store has been modified since you last fetched it.\n *\/"
            },
            {
                "name": "casByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cas_token",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Compare and swap an item on a specific server\n * @link http:\/\/php.net\/memcached.casbykey.php\n * @param float $cas_token <p>\n * Unique value associated with the existing item. Generated by memcache.\n * <\/p>\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_DATA_EXISTS<\/b> if the item you are trying\n * to store has been modified since you last fetched it.\n *\/"
            },
            {
                "name": "add",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Add an item under a new key\n * @link http:\/\/php.net\/memcached.add.php\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key already exists.\n *\/"
            },
            {
                "name": "addByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Add an item under a new key on a specific server\n * @link http:\/\/php.net\/memcached.addbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key already exists.\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Append data to an existing item\n * @link http:\/\/php.net\/memcached.append.php\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param string $value <p>\n * The string to append.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "appendByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Append data to an existing item on a specific server\n * @link http:\/\/php.net\/memcached.appendbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param string $value <p>\n * The string to append.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "prepend",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Prepend data to an existing item\n * @link http:\/\/php.net\/memcached.prepend.php\n * @param string $key <p>\n * The key of the item to prepend the data to.\n * <\/p>\n * @param string $value <p>\n * The string to prepend.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "prependByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Prepend data to an existing item on a specific server\n * @link http:\/\/php.net\/memcached.prependbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key of the item to prepend the data to.\n * <\/p>\n * @param string $value <p>\n * The string to prepend.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "replace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Replace the item under an existing key\n * @link http:\/\/php.net\/memcached.replace.php\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "replaceByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "expiration",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Replace the item under an existing key on a specific server\n * @link http:\/\/php.net\/memcached.replacebykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key under which to store the value.\n * <\/p>\n * @param mixed $value <p>\n * The value to store.\n * <\/p>\n * @param int $expiration [optional] <p>\n * The expiration time, defaults to 0. See Expiration Times for more info.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTSTORED<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "time",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Delete an item\n * @link http:\/\/php.net\/memcached.delete.php\n * @param string $key <p>\n * The key to be deleted.\n * <\/p>\n * @param int $time [optional] <p>\n * The amount of time the server will wait to delete the item.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTFOUND<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "deleteMulti",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "time",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Delete multiple items\n * @link http:\/\/php.net\/memcached.deletemulti.php\n * @param array $keys <p>\n * The keys to be deleted.\n * <\/p>\n * @param int $time [optional] <p>\n * The amount of time the server will wait to delete the items.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTFOUND<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "deleteByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "time",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Delete an item from a specific server\n * @link http:\/\/php.net\/memcached.deletebykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key to be deleted.\n * <\/p>\n * @param int $time [optional] <p>\n * The amount of time the server will wait to delete the item.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTFOUND<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "deleteMultiByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "keys",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "time",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Delete multiple items from a specific server\n * @link http:\/\/php.net\/memcached.deletemultibykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param array $keys <p>\n * The keys to be deleted.\n * <\/p>\n * @param int $time [optional] <p>\n * The amount of time the server will wait to delete the items.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * The <b>Memcached::getResultCode<\/b> will return\n * <b>Memcached::RES_NOTFOUND<\/b> if the key does not exist.\n *\/"
            },
            {
                "name": "decrement",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": 1
                    },
                    {
                        "name": "initial_value",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "expiry",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Decrement numeric item's value\n * @link http:\/\/php.net\/memcached.decrement.php\n * @param string $key <p>\n * The key of the item to decrement.\n * <\/p>\n * @param int $offset [optional] <p>\n * The amount by which to decrement the item's value.\n * <\/p>\n * @param int $initial_value [optional] <p>\n * The value to set the item to if it doesn't currently exist.\n * <\/p>\n * @param int $expiry [optional] <p>\n * The expiry time to set on the item.\n * <\/p>\n * @return int item's new value on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "incrementByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": 1
                    },
                    {
                        "name": "initial_value",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "expiry",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Increment numeric item's value, stored on a specific server\n * @link http:\/\/php.net\/memcached.incrementbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key of the item to increment.\n * <\/p>\n * @param int $offset [optional] <p>\n * The amount by which to increment the item's value.\n * <\/p>\n * @param int $initial_value [optional] <p>\n * The value to set the item to if it doesn't currently exist.\n * <\/p>\n * @param int $expiry [optional] <p>\n * The expiry time to set on the item.\n * <\/p>\n * @return int new item's value on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "decrementByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": 1
                    },
                    {
                        "name": "initial_value",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "expiry",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Decrement numeric item's value, stored on a specific server\n * @link http:\/\/php.net\/memcached.decrementbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @param string $key <p>\n * The key of the item to decrement.\n * <\/p>\n * @param int $offset [optional] <p>\n * The amount by which to decrement the item's value.\n * <\/p>\n * @param int $initial_value [optional] <p>\n * The value to set the item to if it doesn't currently exist.\n * <\/p>\n * @param int $expiry [optional] <p>\n * The expiry time to set on the item.\n * <\/p>\n * @return int item's new value on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getServerList",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Get the list of the servers in the pool\n * @link http:\/\/php.net\/memcached.getserverlist.php\n * @return array The list of all servers in the server pool.\n *\/"
            },
            {
                "name": "getServerByKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "server_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Map a key to a server\n * @link http:\/\/php.net\/memcached.getserverbykey.php\n * @param string $server_key <p>\n * The key identifying the server to store the value on or retrieve it from. Instead of hashing on the actual key for the item, we hash on the server key when deciding which memcached server to talk to. This allows related items to be grouped together on a single server for efficiency with multi operations.\n * <\/p>\n * @return array an array containing three keys of host,\n * port, and weight on success or <b>FALSE<\/b>\n * on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "resetServerList",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Clears all servers from the server list\n * @link http:\/\/php.net\/memcached.resetserverlist.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "quit",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Close any open connections\n * @link http:\/\/php.net\/memcached.quit.php\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "getStats",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Get server pool statistics\n * @link http:\/\/php.net\/memcached.getstats.php\n * @return array Array of server statistics, one entry per server.\n *\/"
            },
            {
                "name": "getVersion",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.5)<br\/>\n * Get server pool version info\n * @link http:\/\/php.net\/memcached.getversion.php\n * @return array Array of server versions, one entry per server.\n *\/"
            },
            {
                "name": "getAllKeys",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Gets the keys stored on all the servers\n * @link http:\/\/php.net\/memcached.getallkeys.php\n * @return array the keys stored on all the servers on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "flush",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delay",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Invalidate all items in the cache\n * @link http:\/\/php.net\/memcached.flush.php\n * @param int $delay [optional] <p>\n * Numer of seconds to wait before invalidating the items.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n * Use <b>Memcached::getResultCode<\/b> if necessary.\n *\/"
            },
            {
                "name": "getOption",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "option",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Retrieve a Memcached option value\n * @link http:\/\/php.net\/memcached.getoption.php\n * @param int $option <p>\n * One of the Memcached::OPT_* constants.\n * <\/p>\n * @return mixed the value of the requested option, or <b>FALSE<\/b> on\n * error.\n *\/"
            },
            {
                "name": "setOption",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "option",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 0.1.0)<br\/>\n * Set a Memcached option\n * @link http:\/\/php.net\/memcached.setoption.php\n * @param int $option\n * @param mixed $value\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "setOptions",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Set Memcached options\n * @link http:\/\/php.net\/memcached.setoptions.php\n * @param array $options <p>\n * An associative array of options where the key is the option to set and\n * the value is the new value for the option.\n * <\/p>\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\n *\/"
            },
            {
                "name": "isPersistent",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Check if a persitent connection to memcache is being used\n * @link http:\/\/php.net\/memcached.ispersistent.php\n * @return bool true if Memcache instance uses a persistent connection, false otherwise.\n *\/"
            },
            {
                "name": "isPristine",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PECL memcached &gt;= 2.0.0)<br\/>\n * Check if the instance was recently created\n * @link http:\/\/php.net\/memcached.ispristine.php\n * @return bool the true if instance is recently created, false otherwise.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "COMPRESSION_FASTLZ",
                "value": 0,
                "doc": null
            },
            {
                "name": "COMPRESSION_ZLIB",
                "value": 0,
                "doc": null
            },
            {
                "name": "DISTRIBUTION_CONSISTENT",
                "value": 0,
                "doc": null
            },
            {
                "name": "DISTRIBUTION_MODULA",
                "value": 0,
                "doc": null
            },
            {
                "name": "DISTRIBUTION_VIRTUAL_BUCKET",
                "value": 0,
                "doc": null
            },
            {
                "name": "GET_ERROR_RETURN_VALUE",
                "value": null,
                "doc": null
            },
            {
                "name": "GET_PRESERVE_ORDER",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_CRC",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_DEFAULT",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_FNV1A_32",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_FNV1A_64",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_FNV1_32",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_FNV1_64",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_HSIEH",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_MD5",
                "value": 0,
                "doc": null
            },
            {
                "name": "HASH_MURMUR",
                "value": 0,
                "doc": null
            },
            {
                "name": "HAVE_IGBINARY",
                "value": 0,
                "doc": null
            },
            {
                "name": "HAVE_JSON",
                "value": 0,
                "doc": null
            },
            {
                "name": "HAVE_SASL",
                "value": 0,
                "doc": null
            },
            {
                "name": "HAVE_SESSION",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_AUTO_EJECT_HOSTS",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_BINARY_PROTOCOL",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_BUFFER_WRITES",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_CACHE_LOOKUPS",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_COMPRESSION",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_COMPRESSION_TYPE",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_CONNECT_TIMEOUT",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_DISTRIBUTION",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_HASH",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_HASH_WITH_PREFIX_KEY",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_LIBKETAMA_COMPATIBLE",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_LIBKETAMA_HASH",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_NOREPLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_NO_BLOCK",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_NUMBER_OF_REPLICAS",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_POLL_TIMEOUT",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_PREFIX_KEY",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_RANDOMIZE_REPLICA_READ",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_RECV_TIMEOUT",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_REMOVE_FAILED_SERVERS",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_RETRY_TIMEOUT",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_SEND_TIMEOUT",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_SERIALIZER",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_SERVER_FAILURE_LIMIT",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_SOCKET_RECV_SIZE",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_SOCKET_SEND_SIZE",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_SORT_HOSTS",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_TCP_KEEPALIVE",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_TCP_NODELAY",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_USE_UDP",
                "value": 0,
                "doc": null
            },
            {
                "name": "OPT_VERIFY_KEY",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_BAD_KEY_PROVIDED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_BUFFERED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_CLIENT_ERROR",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_CONNECTION_SOCKET_CREATE_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_DATA_EXISTS",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_DELETED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_END",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_ERRNO",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_FETCH_NOTFINISHED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_HOST_LOOKUP_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_INVALID_HOST_PROTOCOL",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_ITEM",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_MEMORY_ALLOCATION_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_NOTFOUND",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_NOTSTORED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_NOT_SUPPORTED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_NO_SERVERS",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_PARTIAL_READ",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_PAYLOAD_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_PROTOCOL_ERROR",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_SERVER_ERROR",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_SERVER_MARKED_DEAD",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_SOME_ERRORS",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_STAT",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_STORED",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_SUCCESS",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_TIMEOUT",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_UNKNOWN_READ_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_UNKNOWN_STAT_KEY",
                "value": 0,
                "doc": null
            },
            {
                "name": "RES_WRITE_FAILURE",
                "value": 0,
                "doc": null
            },
            {
                "name": "SERIALIZER_IGBINARY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SERIALIZER_JSON",
                "value": 0,
                "doc": null
            },
            {
                "name": "SERIALIZER_JSON_ARRAY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SERIALIZER_PHP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MemcachedException",
        "fqn": "\\MemcachedException",
        "type": 0,
        "extendsClass": "RuntimeException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Construct the exception\n * @link http:\/\/php.net\/exception.construct.php\n * @param $message [optional]\n * @param $code [optional]\n * @param $previous [optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the Exception message\n * @link http:\/\/php.net\/exception.getmessage.php\n * @return string the Exception message as a string.\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the Exception code\n * @link http:\/\/php.net\/exception.getcode.php\n * @return mixed the exception code as integer in\n * <b>Exception<\/b> but possibly as other type in\n * <b>Exception<\/b> descendants (for example as\n * string in <b>PDOException<\/b>).\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the file in which the exception occurred\n * @link http:\/\/php.net\/exception.getfile.php\n * @return string the filename in which the exception was created.\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the line in which the exception occurred\n * @link http:\/\/php.net\/exception.getline.php\n * @return int the line number where the exception was created.\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the stack trace\n * @link http:\/\/php.net\/exception.gettrace.php\n * @return array the Exception stack trace as an array.\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.3.0)<br\/>\n * Returns previous Exception\n * @link http:\/\/php.net\/exception.getprevious.php\n * @return Exception the previous <b>Exception<\/b> if available\n * or <b>NULL<\/b> otherwise.\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * Gets the stack trace as a string\n * @link http:\/\/php.net\/exception.gettraceasstring.php\n * @return string the Exception stack trace as a string.\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * (PHP 5 &gt;= 5.1.0)<br\/>\n * String representation of the exception\n * @link http:\/\/php.net\/exception.tostring.php\n * @return string the string representation of the exception.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "type": 2,
                "doc": null
            },
            {
                "name": "code",
                "type": 2,
                "doc": null
            },
            {
                "name": "file",
                "type": 2,
                "doc": null
            },
            {
                "name": "line",
                "type": 2,
                "doc": null
            }
        ],
        "constants": [

        ]
    }
]
