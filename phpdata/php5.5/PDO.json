[
    {
        "stmtType": "Class",
        "name": "PDOException",
        "fqn": "\\PDOException",
        "type": 0,
        "extends": "RuntimeException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [
            {
                "name": "errorInfo",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "PDO",
        "fqn": "\\PDO",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dsn",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "username",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "passwd",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a PDO instance representing a connection to a database\n * @link http:\/\/www.php.net\/manual\/en\/pdo.construct.php\n * @param dsn\n * @param username\n * @param passwd\n * @param options[optional]\n *\/"
            },
            {
                "name": "prepare",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "statement",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "driver_options",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Prepares a statement for execution and returns a statement object\n * @link http:\/\/www.php.net\/manual\/en\/pdo.prepare.php\n * @param statement string <p>\n * This must be a valid SQL statement for the target database server.\n * <\/p>\n * @param driver_options array[optional] <p>\n * This array holds one or more key=&gt;value pairs to set\n * attribute values for the PDOStatement object that this method\n * returns. You would most commonly use this to set the\n * PDO::ATTR_CURSOR value to\n * PDO::CURSOR_SCROLL to request a scrollable cursor.\n * Some drivers have driver specific options that may be set at\n * prepare-time.\n * <\/p>\n * @return PDOStatement If the database server successfully prepares the statement,\n * PDO::prepare returns a\n * PDOStatement object.\n * If the database server cannot successfully prepare the statement,\n * PDO::prepare returns false or emits\n * PDOException (depending on error handling).\n * <\/p>\n * <p>\n * Emulated prepared statements does not communicate with the database server\n * so PDO::prepare does not check the statement.\n *\/"
            },
            {
                "name": "beginTransaction",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Initiates a transaction\n * @link http:\/\/www.php.net\/manual\/en\/pdo.begintransaction.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "commit",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Commits a transaction\n * @link http:\/\/www.php.net\/manual\/en\/pdo.commit.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "rollBack",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rolls back a transaction\n * @link http:\/\/www.php.net\/manual\/en\/pdo.rollback.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "inTransaction",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if inside a transaction\n * @link http:\/\/www.php.net\/manual\/en\/pdo.intransaction.php\n * @return bool true if a transaction is currently active, and false if not.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attribute",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set an attribute\n * @link http:\/\/www.php.net\/manual\/en\/pdo.setattribute.php\n * @param attribute int\n * @param value mixed\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "exec",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "statement",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Execute an SQL statement and return the number of affected rows\n * @link http:\/\/www.php.net\/manual\/en\/pdo.exec.php\n * @param statement string <p>\n * The SQL statement to prepare and execute.\n * <\/p>\n * <p>\n * Data inside the query should be properly escaped.\n * <\/p>\n * @return int PDO::exec returns the number of rows that were modified\n * or deleted by the SQL statement you issued. If no rows were affected,\n * PDO::exec returns 0.\n * <\/p>\n * &return.falseproblem;\n * <p>\n * The following example incorrectly relies on the return value of\n * PDO::exec, wherein a statement that affected 0 rows\n * results in a call to die:\n * exec() or die(print_r($db->errorInfo(), true));\n * ?>\n * ]]>\n *\/"
            },
            {
                "name": "query",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "statement",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Executes an SQL statement, returning a result set as a PDOStatement object\n * @link http:\/\/www.php.net\/manual\/en\/pdo.query.php\n * @param statement string <p>\n * The SQL statement to prepare and execute.\n * <\/p>\n * <p>\n * Data inside the query should be properly escaped.\n * <\/p>\n * @return PDOStatement PDO::query returns a PDOStatement object, or false\n * on failure.\n *\/"
            },
            {
                "name": "lastInsertId",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns the ID of the last inserted row or sequence value\n * @link http:\/\/www.php.net\/manual\/en\/pdo.lastinsertid.php\n * @param name string[optional] <p>\n * Name of the sequence object from which the ID should be returned.\n * <\/p>\n * @return string If a sequence name was not specified for the name\n * parameter, PDO::lastInsertId returns a\n * string representing the row ID of the last row that was inserted into\n * the database.\n * <\/p>\n * <p>\n * If a sequence name was specified for the name\n * parameter, PDO::lastInsertId returns a\n * string representing the last value retrieved from the specified sequence\n * object.\n * <\/p>\n * <p>\n * If the PDO driver does not support this capability,\n * PDO::lastInsertId triggers an\n * IM001 SQLSTATE.\n *\/"
            },
            {
                "name": "errorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Fetch the SQLSTATE associated with the last operation on the database handle\n * @link http:\/\/www.php.net\/manual\/en\/pdo.errorcode.php\n * @return mixed an SQLSTATE, a five characters alphanumeric identifier defined in\n * the ANSI SQL-92 standard. Briefly, an SQLSTATE consists of a\n * two characters class value followed by a three characters subclass value. A\n * class value of 01 indicates a warning and is accompanied by a return code\n * of SQL_SUCCESS_WITH_INFO. Class values other than '01', except for the\n * class 'IM', indicate an error. The class 'IM' is specific to warnings\n * and errors that derive from the implementation of PDO (or perhaps ODBC,\n * if you're using the ODBC driver) itself. The subclass value '000' in any\n * class indicates that there is no subclass for that SQLSTATE.\n * <\/p>\n * <p>\n * PDO::errorCode only retrieves error codes for operations\n * performed directly on the database handle. If you create a PDOStatement\n * object through PDO::prepare or\n * PDO::query and invoke an error on the statement\n * handle, PDO::errorCode will not reflect that error.\n * You must call PDOStatement::errorCode to return the error\n * code for an operation performed on a particular statement handle.\n * <\/p>\n * <p>\n * Returns &null; if no operation has been run on the database handle.\n *\/"
            },
            {
                "name": "errorInfo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Fetch extended error information associated with the last operation on the database handle\n * @link http:\/\/www.php.net\/manual\/en\/pdo.errorinfo.php\n * @return array PDO::errorInfo returns an array of error information\n * about the last operation performed by this database handle. The array\n * consists of the following fields:\n * <tr valign=\"top\">\n * <td>Element<\/td>\n * <td>Information<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>0<\/td>\n * <td>SQLSTATE error code (a five characters alphanumeric identifier defined\n * in the ANSI SQL standard).<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>Driver-specific error code.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>2<\/td>\n * <td>Driver-specific error message.<\/td>\n * <\/tr>\n * <\/p>\n * <p>\n * If the SQLSTATE error code is not set or there is no driver-specific\n * error, the elements following element 0 will be set to &null;.\n * <\/p>\n * <p>\n * PDO::errorInfo only retrieves error information for\n * operations performed directly on the database handle. If you create a\n * PDOStatement object through PDO::prepare or\n * PDO::query and invoke an error on the statement\n * handle, PDO::errorInfo will not reflect the error\n * from the statement handle. You must call\n * PDOStatement::errorInfo to return the error\n * information for an operation performed on a particular statement handle.\n *\/"
            },
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attribute",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Retrieve a database connection attribute\n * @link http:\/\/www.php.net\/manual\/en\/pdo.getattribute.php\n * @param attribute int <p>\n * One of the PDO::ATTR_* constants. The constants that\n * apply to database connections are as follows:\n * PDO::ATTR_AUTOCOMMIT\n * PDO::ATTR_CASE\n * PDO::ATTR_CLIENT_VERSION\n * PDO::ATTR_CONNECTION_STATUS\n * PDO::ATTR_DRIVER_NAME\n * PDO::ATTR_ERRMODE\n * PDO::ATTR_ORACLE_NULLS\n * PDO::ATTR_PERSISTENT\n * PDO::ATTR_PREFETCH\n * PDO::ATTR_SERVER_INFO\n * PDO::ATTR_SERVER_VERSION\n * PDO::ATTR_TIMEOUT\n * <\/p>\n * @return mixed A successful call returns the value of the requested PDO attribute.\n * An unsuccessful call returns null.\n *\/"
            },
            {
                "name": "quote",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "string",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "parameter_type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Quotes a string for use in a query.\n * @link http:\/\/www.php.net\/manual\/en\/pdo.quote.php\n * @param string string <p>\n * The string to be quoted.\n * <\/p>\n * @param parameter_type int[optional] <p>\n * Provides a data type hint for drivers that have alternate quoting styles.\n * <\/p>\n * @return string a quoted string that is theoretically safe to pass into an\n * SQL statement. Returns false if the driver does not support quoting in\n * this way.\n *\/"
            },
            {
                "name": "__wakeup",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__sleep",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getAvailableDrivers",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return an array of available PDO drivers\n * @link http:\/\/www.php.net\/manual\/en\/pdo.getavailabledrivers.php\n * @return array PDO::getAvailableDrivers returns an array of PDO driver names. If\n * no drivers are available, it returns an empty array.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "PARAM_BOOL",
                "value": 5,
                "doc": null
            },
            {
                "name": "PARAM_NULL",
                "value": 0,
                "doc": null
            },
            {
                "name": "PARAM_INT",
                "value": 1,
                "doc": null
            },
            {
                "name": "PARAM_STR",
                "value": 2,
                "doc": null
            },
            {
                "name": "PARAM_LOB",
                "value": 3,
                "doc": null
            },
            {
                "name": "PARAM_STMT",
                "value": 4,
                "doc": null
            },
            {
                "name": "PARAM_INPUT_OUTPUT",
                "value": null,
                "doc": null
            },
            {
                "name": "PARAM_EVT_ALLOC",
                "value": 0,
                "doc": null
            },
            {
                "name": "PARAM_EVT_FREE",
                "value": 1,
                "doc": null
            },
            {
                "name": "PARAM_EVT_EXEC_PRE",
                "value": 2,
                "doc": null
            },
            {
                "name": "PARAM_EVT_EXEC_POST",
                "value": 3,
                "doc": null
            },
            {
                "name": "PARAM_EVT_FETCH_PRE",
                "value": 4,
                "doc": null
            },
            {
                "name": "PARAM_EVT_FETCH_POST",
                "value": 5,
                "doc": null
            },
            {
                "name": "PARAM_EVT_NORMALIZE",
                "value": 6,
                "doc": null
            },
            {
                "name": "FETCH_LAZY",
                "value": 1,
                "doc": null
            },
            {
                "name": "FETCH_ASSOC",
                "value": 2,
                "doc": null
            },
            {
                "name": "FETCH_NUM",
                "value": 3,
                "doc": null
            },
            {
                "name": "FETCH_BOTH",
                "value": 4,
                "doc": null
            },
            {
                "name": "FETCH_OBJ",
                "value": 5,
                "doc": null
            },
            {
                "name": "FETCH_BOUND",
                "value": 6,
                "doc": null
            },
            {
                "name": "FETCH_COLUMN",
                "value": 7,
                "doc": null
            },
            {
                "name": "FETCH_CLASS",
                "value": 8,
                "doc": null
            },
            {
                "name": "FETCH_INTO",
                "value": 9,
                "doc": null
            },
            {
                "name": "FETCH_FUNC",
                "value": 10,
                "doc": null
            },
            {
                "name": "FETCH_GROUP",
                "value": 65536,
                "doc": null
            },
            {
                "name": "FETCH_UNIQUE",
                "value": 196608,
                "doc": null
            },
            {
                "name": "FETCH_KEY_PAIR",
                "value": 12,
                "doc": null
            },
            {
                "name": "FETCH_CLASSTYPE",
                "value": 262144,
                "doc": null
            },
            {
                "name": "FETCH_SERIALIZE",
                "value": 524288,
                "doc": null
            },
            {
                "name": "FETCH_PROPS_LATE",
                "value": 1048576,
                "doc": null
            },
            {
                "name": "FETCH_NAMED",
                "value": 11,
                "doc": null
            },
            {
                "name": "ATTR_AUTOCOMMIT",
                "value": 0,
                "doc": null
            },
            {
                "name": "ATTR_PREFETCH",
                "value": 1,
                "doc": null
            },
            {
                "name": "ATTR_TIMEOUT",
                "value": 2,
                "doc": null
            },
            {
                "name": "ATTR_ERRMODE",
                "value": 3,
                "doc": null
            },
            {
                "name": "ATTR_SERVER_VERSION",
                "value": 4,
                "doc": null
            },
            {
                "name": "ATTR_CLIENT_VERSION",
                "value": 5,
                "doc": null
            },
            {
                "name": "ATTR_SERVER_INFO",
                "value": 6,
                "doc": null
            },
            {
                "name": "ATTR_CONNECTION_STATUS",
                "value": 7,
                "doc": null
            },
            {
                "name": "ATTR_CASE",
                "value": 8,
                "doc": null
            },
            {
                "name": "ATTR_CURSOR_NAME",
                "value": 9,
                "doc": null
            },
            {
                "name": "ATTR_CURSOR",
                "value": 10,
                "doc": null
            },
            {
                "name": "ATTR_ORACLE_NULLS",
                "value": 11,
                "doc": null
            },
            {
                "name": "ATTR_PERSISTENT",
                "value": 12,
                "doc": null
            },
            {
                "name": "ATTR_STATEMENT_CLASS",
                "value": 13,
                "doc": null
            },
            {
                "name": "ATTR_FETCH_TABLE_NAMES",
                "value": 14,
                "doc": null
            },
            {
                "name": "ATTR_FETCH_CATALOG_NAMES",
                "value": 15,
                "doc": null
            },
            {
                "name": "ATTR_DRIVER_NAME",
                "value": 16,
                "doc": null
            },
            {
                "name": "ATTR_STRINGIFY_FETCHES",
                "value": 17,
                "doc": null
            },
            {
                "name": "ATTR_MAX_COLUMN_LEN",
                "value": 18,
                "doc": null
            },
            {
                "name": "ATTR_EMULATE_PREPARES",
                "value": 20,
                "doc": null
            },
            {
                "name": "ATTR_DEFAULT_FETCH_MODE",
                "value": 19,
                "doc": null
            },
            {
                "name": "ERRMODE_SILENT",
                "value": 0,
                "doc": null
            },
            {
                "name": "ERRMODE_WARNING",
                "value": 1,
                "doc": null
            },
            {
                "name": "ERRMODE_EXCEPTION",
                "value": 2,
                "doc": null
            },
            {
                "name": "CASE_NATURAL",
                "value": 0,
                "doc": null
            },
            {
                "name": "CASE_LOWER",
                "value": 2,
                "doc": null
            },
            {
                "name": "CASE_UPPER",
                "value": 1,
                "doc": null
            },
            {
                "name": "NULL_NATURAL",
                "value": 0,
                "doc": null
            },
            {
                "name": "NULL_EMPTY_STRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "NULL_TO_STRING",
                "value": 2,
                "doc": null
            },
            {
                "name": "ERR_NONE",
                "value": 0,
                "doc": null
            },
            {
                "name": "FETCH_ORI_NEXT",
                "value": 0,
                "doc": null
            },
            {
                "name": "FETCH_ORI_PRIOR",
                "value": 1,
                "doc": null
            },
            {
                "name": "FETCH_ORI_FIRST",
                "value": 2,
                "doc": null
            },
            {
                "name": "FETCH_ORI_LAST",
                "value": 3,
                "doc": null
            },
            {
                "name": "FETCH_ORI_ABS",
                "value": 4,
                "doc": null
            },
            {
                "name": "FETCH_ORI_REL",
                "value": 5,
                "doc": null
            },
            {
                "name": "CURSOR_FWDONLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURSOR_SCROLL",
                "value": 1,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_USE_BUFFERED_QUERY",
                "value": 1000,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_LOCAL_INFILE",
                "value": 1001,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_INIT_COMMAND",
                "value": 1002,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_COMPRESS",
                "value": 1003,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_DIRECT_QUERY",
                "value": 1004,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_FOUND_ROWS",
                "value": 1005,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_IGNORE_SPACE",
                "value": 1006,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_SSL_KEY",
                "value": 1007,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_SSL_CERT",
                "value": 1008,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_SSL_CA",
                "value": 1009,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_SSL_CAPATH",
                "value": 1010,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_SSL_CIPHER",
                "value": 1011,
                "doc": null
            },
            {
                "name": "MYSQL_ATTR_SERVER_PUBLIC_KEY",
                "value": 1012,
                "doc": null
            },
            {
                "name": "ODBC_ATTR_USE_CURSOR_LIBRARY",
                "value": 1000,
                "doc": null
            },
            {
                "name": "ODBC_ATTR_ASSUME_UTF8",
                "value": 1001,
                "doc": null
            },
            {
                "name": "ODBC_SQL_USE_IF_NEEDED",
                "value": 0,
                "doc": null
            },
            {
                "name": "ODBC_SQL_USE_DRIVER",
                "value": 2,
                "doc": null
            },
            {
                "name": "ODBC_SQL_USE_ODBC",
                "value": 1,
                "doc": null
            },
            {
                "name": "PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT",
                "value": 1000,
                "doc": null
            },
            {
                "name": "PGSQL_TRANSACTION_IDLE",
                "value": 0,
                "doc": null
            },
            {
                "name": "PGSQL_TRANSACTION_ACTIVE",
                "value": 1,
                "doc": null
            },
            {
                "name": "PGSQL_TRANSACTION_INTRANS",
                "value": 2,
                "doc": null
            },
            {
                "name": "PGSQL_TRANSACTION_INERROR",
                "value": 3,
                "doc": null
            },
            {
                "name": "PGSQL_TRANSACTION_UNKNOWN",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "PDOStatement",
        "fqn": "\\PDOStatement",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "execute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "input_parameters",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Executes a prepared statement\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.execute.php\n * @param input_parameters array[optional] <p>\n * An array of values with as many elements as there are bound\n * parameters in the SQL statement being executed.\n * All values are treated as PDO::PARAM_STR.\n * <\/p>\n * <p>\n * You cannot bind multiple values to a single parameter; for example,\n * you cannot bind two values to a single named parameter in an IN()\n * clause.\n * <\/p>\n * <p>\n * You cannot bind more values than specified; if more keys exist in\n * input_parameters than in the SQL specified\n * in the PDO::prepare, then the statement will\n * fail and an error is emitted.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "fetch",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fetch_style",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "cursor_orientation",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "cursor_offset",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Fetches the next row from a result set\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.fetch.php\n * @param fetch_style int[optional] <p>\n * Controls how the next row will be returned to the caller. This value\n * must be one of the PDO::FETCH_* constants,\n * defaulting to value of PDO::ATTR_DEFAULT_FETCH_MODE\n * (which defaults to PDO::FETCH_BOTH).\n * <p>\n * PDO::FETCH_ASSOC: returns an array indexed by column\n * name as returned in your result set\n * <\/p>\n * @param cursor_orientation int[optional] <p>\n * For a PDOStatement object representing a scrollable cursor, this\n * value determines which row will be returned to the caller. This value\n * must be one of the PDO::FETCH_ORI_* constants,\n * defaulting to PDO::FETCH_ORI_NEXT. To request a\n * scrollable cursor for your PDOStatement object, you must set the\n * PDO::ATTR_CURSOR attribute to\n * PDO::CURSOR_SCROLL when you prepare the SQL\n * statement with PDO::prepare.\n * <\/p>\n * @param cursor_offset int[optional]\n * @return mixed The return value of this function on success depends on the fetch type. In\n * all cases, false is returned on failure.\n *\/"
            },
            {
                "name": "bindParam",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "parameter",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "variable",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "data_type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "length",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "driver_options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Binds a parameter to the specified variable name\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.bindparam.php\n * @param parameter mixed <p>\n * Parameter identifier. For a prepared statement using named\n * placeholders, this will be a parameter name of the form\n * :name. For a prepared statement using\n * question mark placeholders, this will be the 1-indexed position of\n * the parameter.\n * <\/p>\n * @param variable mixed <p>\n * Name of the PHP variable to bind to the SQL statement parameter.\n * <\/p>\n * @param data_type int[optional] <p>\n * Explicit data type for the parameter using the PDO::PARAM_*\n * constants.\n * To return an INOUT parameter from a stored procedure,\n * use the bitwise OR operator to set the PDO::PARAM_INPUT_OUTPUT bits\n * for the data_type parameter.\n * <\/p>\n * @param length int[optional] <p>\n * Length of the data type. To indicate that a parameter is an OUT\n * parameter from a stored procedure, you must explicitly set the\n * length.\n * <\/p>\n * @param driver_options mixed[optional] <p>\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "bindColumn",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "column",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "param",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "maxlen",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "driverdata",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Bind a column to a PHP variable\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.bindcolumn.php\n * @param column mixed <p>\n * Number of the column (1-indexed) or name of the column in the result set.\n * If using the column name, be aware that the name should match the\n * case of the column, as returned by the driver.\n * <\/p>\n * @param param mixed <p>\n * Name of the PHP variable to which the column will be bound.\n * <\/p>\n * @param type int[optional] <p>\n * Data type of the parameter, specified by the PDO::PARAM_*\n * constants.\n * <\/p>\n * @param maxlen int[optional] <p>\n * A hint for pre-allocation.\n * <\/p>\n * @param driverdata mixed[optional] <p>\n * Optional parameter(s) for the driver.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "bindValue",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "parameter",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data_type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Binds a value to a parameter\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.bindvalue.php\n * @param parameter mixed <p>\n * Parameter identifier. For a prepared statement using named\n * placeholders, this will be a parameter name of the form\n * :name. For a prepared statement using\n * question mark placeholders, this will be the 1-indexed position of\n * the parameter.\n * <\/p>\n * @param value mixed <p>\n * The value to bind to the parameter.\n * <\/p>\n * @param data_type int[optional] <p>\n * Explicit data type for the parameter using the PDO::PARAM_*\n * constants.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "rowCount",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the number of rows affected by the last SQL statement\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.rowcount.php\n * @return int the number of rows.\n *\/"
            },
            {
                "name": "fetchColumn",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "column_number",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns a single column from the next row of a result set\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.fetchcolumn.php\n * @param column_number int[optional] <p>\n * 0-indexed number of the column you wish to retrieve from the row. If\n * no value is supplied, PDOStatement::fetchColumn\n * fetches the first column.\n * <\/p>\n * @return string PDOStatement::fetchColumn returns a single column\n * in the next row of a result set.\n * <\/p>\n * <p>\n * There is no way to return another column from the same row if you\n * use PDOStatement::fetchColumn to retrieve data.\n *\/"
            },
            {
                "name": "fetchAll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fetch_style",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "fetch_argument",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ctor_args",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns an array containing all of the result set rows\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.fetchall.php\n * @param fetch_style int[optional] <p>\n * Controls the contents of the returned array as documented in\n * PDOStatement::fetch.\n * Defaults to value of PDO::ATTR_DEFAULT_FETCH_MODE\n * (which defaults to PDO::FETCH_BOTH)\n * <\/p>\n * <p>\n * To return an array consisting of all values of a single column from\n * the result set, specify PDO::FETCH_COLUMN. You\n * can specify which column you want with the\n * column-index parameter.\n * <\/p>\n * <p>\n * To fetch only the unique values of a single column from the result set,\n * bitwise-OR PDO::FETCH_COLUMN with\n * PDO::FETCH_UNIQUE.\n * <\/p>\n * <p>\n * To return an associative array grouped by the values of a specified\n * column, bitwise-OR PDO::FETCH_COLUMN with\n * PDO::FETCH_GROUP.\n * <\/p>\n * @param fetch_argument mixed[optional] <p>\n * This argument have a different meaning depending on the value of\n * the fetch_style parameter:\n * <p>\n * PDO::FETCH_COLUMN: Returns the indicated 0-indexed\n * column.\n * <\/p>\n * @param ctor_args array[optional] <p>\n * Arguments of custom class constructor when the fetch_style\n * parameter is PDO::FETCH_CLASS.\n * <\/p>\n * @return array PDOStatement::fetchAll returns an array containing\n * all of the remaining rows in the result set. The array represents each\n * row as either an array of column values or an object with properties\n * corresponding to each column name. An empty array is returned if there\n * are zero results to fetch, or false on failure.\n * <\/p>\n * <p>\n * Using this method to fetch large result sets will result in a heavy\n * demand on system and possibly network resources. Rather than retrieving\n * all of the data and manipulating it in PHP, consider using the database\n * server to manipulate the result sets. For example, use the WHERE and\n * ORDER BY clauses in SQL to restrict results before retrieving and\n * processing them with PHP.\n *\/"
            },
            {
                "name": "fetchObject",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ctor_args",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Fetches the next row and returns it as an object.\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.fetchobject.php\n * @param class_name string[optional] <p>\n * Name of the created class.\n * <\/p>\n * @param ctor_args array[optional] <p>\n * Elements of this array are passed to the constructor.\n * <\/p>\n * @return mixed an instance of the required class with property names that\n * correspond to the column names  or false on failure.\n *\/"
            },
            {
                "name": "errorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Fetch the SQLSTATE associated with the last operation on the statement handle\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.errorcode.php\n * @return string Identical to PDO::errorCode, except that\n * PDOStatement::errorCode only retrieves error codes\n * for operations performed with PDOStatement objects.\n *\/"
            },
            {
                "name": "errorInfo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Fetch extended error information associated with the last operation on the statement handle\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.errorinfo.php\n * @return array PDOStatement::errorInfo returns an array of\n * error information about the last operation performed by this\n * statement handle. The array consists of the following fields:\n * <tr valign=\"top\">\n * <td>Element<\/td>\n * <td>Information<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>0<\/td>\n * <td>SQLSTATE error code (a five characters alphanumeric identifier defined\n * in the ANSI SQL standard).<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>1<\/td>\n * <td>Driver specific error code.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>2<\/td>\n * <td>Driver specific error message.<\/td>\n * <\/tr>\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attribute",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set a statement attribute\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.setattribute.php\n * @param attribute int\n * @param value mixed\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attribute",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Retrieve a statement attribute\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.getattribute.php\n * @param attribute int\n * @return mixed the attribute value.\n *\/"
            },
            {
                "name": "columnCount",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the number of columns in the result set\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.columncount.php\n * @return int the number of columns in the result set represented by the\n * PDOStatement object. If there is no result set,\n * PDOStatement::columnCount returns 0.\n *\/"
            },
            {
                "name": "getColumnMeta",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "column",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns metadata for a column in a result set\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.getcolumnmeta.php\n * @param column int <p>\n * The 0-indexed column in the result set.\n * <\/p>\n * @return array an associative array containing the following values representing\n * the metadata for a single column:\n * <\/p>\n * <table>\n * Column metadata\n * <tr valign=\"top\">\n * <td>Name<\/td>\n * <td>Value<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>native_type<\/td>\n * <td>The PHP native type used to represent the column value.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>driver:decl_type<\/td>\n * <td>The SQL type used to represent the column value in the database.\n * If the column in the result set is the result of a function, this value\n * is not returned by PDOStatement::getColumnMeta.\n * <\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>flags<\/td>\n * <td>Any flags set for this column.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>name<\/td>\n * <td>The name of this column as returned by the database.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>table<\/td>\n * <td>The name of this column's table as returned by the database.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>len<\/td>\n * <td>The length of this column. Normally -1 for\n * types other than floating point decimals.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>precision<\/td>\n * <td>The numeric precision of this column. Normally\n * 0 for types other than floating point\n * decimals.<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>pdo_type<\/td>\n * <td>The type of this column as represented by the\n * PDO::PARAM_*\n * constants.<\/td>\n * <\/tr>\n * <\/table>\n * <p>\n * Returns false if the requested column does not exist in the result set,\n * or if no result set exists.\n *\/"
            },
            {
                "name": "setFetchMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the default fetch mode for this statement\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.setfetchmode.php\n * @param mode int <p>\n * The fetch mode must be one of the PDO::FETCH_* constants.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "nextRowset",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Advances to the next rowset in a multi-rowset statement handle\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.nextrowset.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "closeCursor",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Closes the cursor, enabling the statement to be executed again.\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.closecursor.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "debugDumpParams",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Dump an SQL prepared command\n * @link http:\/\/www.php.net\/manual\/en\/pdostatement.debugdumpparams.php\n * @return void\n *\/"
            },
            {
                "name": "__wakeup",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__sleep",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [
            {
                "name": "queryString",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "PDORow",
        "fqn": "\\PDORow",
        "type": 32,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "pdo_drivers",
        "params": [

        ]
    }
]
