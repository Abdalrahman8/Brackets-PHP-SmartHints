[
    {
        "stmtType": "Class",
        "name": "SimpleXMLElement",
        "fqn": "\\SimpleXMLElement",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 33,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data_is_url",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "is_prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new SimpleXMLElement object\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.construct.php\n * @param data\n * @param options[optional]\n * @param data_is_url[optional]\n * @param ns[optional]\n * @param is_prefix[optional]\n *\/"
            },
            {
                "name": "asXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Return a well-formed XML string based on SimpleXML element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.asxml.php\n * @param filename string[optional] <p>\n * If specified, the function writes the data to the file rather than\n * returning it.\n * <\/p>\n * @return mixed If the filename isn't specified, this function\n * returns a string on success and false on error. If the\n * parameter is specified, it returns true if the file was written\n * successfully and false otherwise.\n *\/"
            },
            {
                "name": "saveXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * &Alias; <methodname>SimpleXMLElement::asXML<\/methodname>\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.savexml.php\n * @param filename[optional]\n *\/"
            },
            {
                "name": "xpath",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Runs XPath query on XML data\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.xpath.php\n * @param path string <p>\n * An XPath path\n * <\/p>\n * @return array an array of SimpleXMLElement objects or false in\n * case of an error.\n *\/"
            },
            {
                "name": "registerXPathNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a prefix\/ns context for the next XPath query\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.registerxpathnamespace.php\n * @param prefix string <p>\n * The namespace prefix to use in the XPath query for the namespace given in\n * ns.\n * <\/p>\n * @param ns string <p>\n * The namespace to use for the XPath query. This must match a namespace in\n * use by the XML document or the XPath query using\n * prefix will not return any results.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "attributes",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "is_prefix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Identifies an element's attributes\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.attributes.php\n * @param ns string[optional] <p>\n * An optional namespace for the retrieved attributes\n * <\/p>\n * @param is_prefix bool[optional] <p>\n * Default to false\n * <\/p>\n * @return SimpleXMLElement a SimpleXMLElement object that can be\n * iterated over to loop through the attributes on the tag.\n * <\/p>\n * <p>\n * Returns &null; if called on a SimpleXMLElement\n * object that already represents an attribute and not a tag.\n *\/"
            },
            {
                "name": "children",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "is_prefix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Finds children of given node\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.children.php\n * @param ns string[optional] <p>\n * An XML namespace.\n * <\/p>\n * @param is_prefix bool[optional] <p>\n * If is_prefix is true,\n * ns will be regarded as a prefix. If false,\n * ns will be regarded as a namespace\n * URL.\n * <\/p>\n * @return SimpleXMLElement a SimpleXMLElement element, whether the node\n * has children or not.\n *\/"
            },
            {
                "name": "getNamespaces",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "recursive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns namespaces used in document\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.getnamespaces.php\n * @param recursive bool[optional] <p>\n * If specified, returns all namespaces used in parent and child nodes.\n * Otherwise, returns only namespaces used in root node.\n * <\/p>\n * @return array The getNamespaces method returns an array of\n * namespace names with their associated URIs.\n *\/"
            },
            {
                "name": "getDocNamespaces",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "recursive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "from_root",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns namespaces declared in document\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.getdocnamespaces.php\n * @param recursive bool[optional] <p>\n * If specified, returns all namespaces declared in parent and child nodes.\n * Otherwise, returns only namespaces declared in root node.\n * <\/p>\n * @param from_root bool[optional] <p>\n * Allows you to recursively check namespaces under a child node instead of\n * from the root of the XML doc.\n * <\/p>\n * @return array The getDocNamespaces method returns an array\n * of namespace names with their associated URIs.\n *\/"
            },
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the name of the XML element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.getname.php\n * @return string The getName method returns as a string the\n * name of the XML tag referenced by the SimpleXMLElement object.\n *\/"
            },
            {
                "name": "addChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a child element to the XML node\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.addchild.php\n * @param name string <p>\n * The name of the child element to add.\n * <\/p>\n * @param value string[optional] <p>\n * If specified, the value of the child element.\n * <\/p>\n * @param namespace string[optional] <p>\n * If specified, the namespace to which the child element belongs.\n * <\/p>\n * @return SimpleXMLElement The addChild method returns a SimpleXMLElement\n * object representing the child added to the XML node.\n *\/"
            },
            {
                "name": "addAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds an attribute to the SimpleXML element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.addattribute.php\n * @param name string <p>\n * The name of the attribute to add.\n * <\/p>\n * @param value string[optional] <p>\n * The value of the attribute.\n * <\/p>\n * @param namespace string[optional] <p>\n * If specified, the namespace to which the attribute belongs.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the string content\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.tostring.php\n * @return string the string content on success or an empty string on failure.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Counts the children of an element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.count.php\n * @return int the number of elements of an element.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SimpleXMLIterator",
        "fqn": "\\SimpleXMLIterator",
        "type": 0,
        "extends": "SimpleXMLElement",
        "methods": [
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rewind to the first element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.rewind.php\n * @return void\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check whether the current element is valid\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.valid.php\n * @return bool true if the current element is valid, otherwise false\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the current element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.current.php\n * @return mixed the current element as a SimpleXMLIterator object or &null; on failure.\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return current key\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.key.php\n * @return mixed the XML tag name of the element referenced by the current SimpleXMLIterator object or false\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Move to next element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.next.php\n * @return void\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks whether the current element has sub elements.\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.haschildren.php\n * @return bool true if the current element has sub-elements, otherwise false\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the sub-elements of the current element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmliterator.getchildren.php\n * @return SimpleXMLIterator a SimpleXMLIterator object containing\n * the sub-elements of the current element.\n *\/"
            },
            {
                "name": "__construct",
                "type": 33,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data_is_url",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "is_prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new SimpleXMLElement object\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.construct.php\n * @param data\n * @param options[optional]\n * @param data_is_url[optional]\n * @param ns[optional]\n * @param is_prefix[optional]\n *\/"
            },
            {
                "name": "asXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Return a well-formed XML string based on SimpleXML element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.asxml.php\n * @param filename string[optional] <p>\n * If specified, the function writes the data to the file rather than\n * returning it.\n * <\/p>\n * @return mixed If the filename isn't specified, this function\n * returns a string on success and false on error. If the\n * parameter is specified, it returns true if the file was written\n * successfully and false otherwise.\n *\/"
            },
            {
                "name": "saveXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * &Alias; <methodname>SimpleXMLElement::asXML<\/methodname>\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.savexml.php\n * @param filename[optional]\n *\/"
            },
            {
                "name": "xpath",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Runs XPath query on XML data\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.xpath.php\n * @param path string <p>\n * An XPath path\n * <\/p>\n * @return array an array of SimpleXMLElement objects or false in\n * case of an error.\n *\/"
            },
            {
                "name": "registerXPathNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a prefix\/ns context for the next XPath query\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.registerxpathnamespace.php\n * @param prefix string <p>\n * The namespace prefix to use in the XPath query for the namespace given in\n * ns.\n * <\/p>\n * @param ns string <p>\n * The namespace to use for the XPath query. This must match a namespace in\n * use by the XML document or the XPath query using\n * prefix will not return any results.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "attributes",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "is_prefix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Identifies an element's attributes\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.attributes.php\n * @param ns string[optional] <p>\n * An optional namespace for the retrieved attributes\n * <\/p>\n * @param is_prefix bool[optional] <p>\n * Default to false\n * <\/p>\n * @return SimpleXMLElement a SimpleXMLElement object that can be\n * iterated over to loop through the attributes on the tag.\n * <\/p>\n * <p>\n * Returns &null; if called on a SimpleXMLElement\n * object that already represents an attribute and not a tag.\n *\/"
            },
            {
                "name": "children",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "is_prefix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Finds children of given node\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.children.php\n * @param ns string[optional] <p>\n * An XML namespace.\n * <\/p>\n * @param is_prefix bool[optional] <p>\n * If is_prefix is true,\n * ns will be regarded as a prefix. If false,\n * ns will be regarded as a namespace\n * URL.\n * <\/p>\n * @return SimpleXMLElement a SimpleXMLElement element, whether the node\n * has children or not.\n *\/"
            },
            {
                "name": "getNamespaces",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "recursive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns namespaces used in document\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.getnamespaces.php\n * @param recursive bool[optional] <p>\n * If specified, returns all namespaces used in parent and child nodes.\n * Otherwise, returns only namespaces used in root node.\n * <\/p>\n * @return array The getNamespaces method returns an array of\n * namespace names with their associated URIs.\n *\/"
            },
            {
                "name": "getDocNamespaces",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "recursive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "from_root",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns namespaces declared in document\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.getdocnamespaces.php\n * @param recursive bool[optional] <p>\n * If specified, returns all namespaces declared in parent and child nodes.\n * Otherwise, returns only namespaces declared in root node.\n * <\/p>\n * @param from_root bool[optional] <p>\n * Allows you to recursively check namespaces under a child node instead of\n * from the root of the XML doc.\n * <\/p>\n * @return array The getDocNamespaces method returns an array\n * of namespace names with their associated URIs.\n *\/"
            },
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the name of the XML element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.getname.php\n * @return string The getName method returns as a string the\n * name of the XML tag referenced by the SimpleXMLElement object.\n *\/"
            },
            {
                "name": "addChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a child element to the XML node\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.addchild.php\n * @param name string <p>\n * The name of the child element to add.\n * <\/p>\n * @param value string[optional] <p>\n * If specified, the value of the child element.\n * <\/p>\n * @param namespace string[optional] <p>\n * If specified, the namespace to which the child element belongs.\n * <\/p>\n * @return SimpleXMLElement The addChild method returns a SimpleXMLElement\n * object representing the child added to the XML node.\n *\/"
            },
            {
                "name": "addAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds an attribute to the SimpleXML element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.addattribute.php\n * @param name string <p>\n * The name of the attribute to add.\n * <\/p>\n * @param value string[optional] <p>\n * The value of the attribute.\n * <\/p>\n * @param namespace string[optional] <p>\n * If specified, the namespace to which the attribute belongs.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the string content\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.tostring.php\n * @return string the string content on success or an empty string on failure.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Counts the children of an element\n * @link http:\/\/www.php.net\/manual\/en\/simplexmlelement.count.php\n * @return int the number of elements of an element.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "simplexml_load_file",
        "params": [
            {
                "name": "filename",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "options",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "ns",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "is_prefix",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "simplexml_load_string",
        "params": [
            {
                "name": "data",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "options",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "ns",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "is_prefix",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "simplexml_import_dom",
        "params": [
            {
                "name": "node",
                "type": "DOMNode",
                "byRef": false,
                "default": ""
            },
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    }
]
