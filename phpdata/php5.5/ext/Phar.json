[
    {
        "stmtType": "Class",
        "name": "PharException",
        "fqn": "\\PharException",
        "type": 0,
        "extends": "Exception",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "Phar",
        "fqn": "\\Phar",
        "type": 0,
        "extends": "RecursiveDirectoryIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fileformat",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Construct a Phar archive object\n * @link http:\/\/www.php.net\/manual\/en\/phar.construct.php\n * @param filename\n * @param flags[optional]\n * @param alias[optional]\n * @param fileformat[optional]\n *\/"
            },
            {
                "name": "__destruct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "addEmptyDir",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dirname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add an empty directory to the phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.addemptydir.php\n * @param dirname string <p>\n * The name of the empty directory to create in the phar archive\n * <\/p>\n * @return void no return value, exception is thrown on failure.\n *\/"
            },
            {
                "name": "addFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "file",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localname",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Add a file from the filesystem to the phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.addfile.php\n * @param file string <p>\n * Full or relative path to a file on disk to be added\n * to the phar archive.\n * <\/p>\n * @param localname string[optional] <p>\n * Path that the file will be stored in the archive.\n * <\/p>\n * @return void no return value, exception is thrown on failure.\n *\/"
            },
            {
                "name": "addFromString",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "localname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "contents",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add a file from the filesystem to the phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.addfromstring.php\n * @param localname string <p>\n * Path that the file will be stored in the archive.\n * <\/p>\n * @param contents string <p>\n * The file contents to store\n * <\/p>\n * @return void no return value, exception is thrown on failure.\n *\/"
            },
            {
                "name": "buildFromDirectory",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "base_dir",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Construct a phar archive from the files within a directory.\n * @link http:\/\/www.php.net\/manual\/en\/phar.buildfromdirectory.php\n * @param base_dir string <p>\n * The full or relative path to the directory that contains all files\n * to add to the archive.\n * <\/p>\n * @param regex string[optional] <p>\n * An optional pcre regular expression that is used to filter the\n * list of files. Only file paths matching the regular expression\n * will be included in the archive.\n * <\/p>\n * @return array Phar::buildFromDirectory returns an associative array\n * mapping internal path of file to the full path of the file on the\n * filesystem.\n *\/"
            },
            {
                "name": "buildFromIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iter",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "base_directory",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Construct a phar archive from an iterator.\n * @link http:\/\/www.php.net\/manual\/en\/phar.buildfromiterator.php\n * @param iter Iterator <p>\n * Any iterator that either associatively maps phar file to location or\n * returns SplFileInfo objects\n * <\/p>\n * @param base_directory string[optional] <p>\n * For iterators that return SplFileInfo objects, the portion of each\n * file's full path to remove when adding to the phar archive\n * <\/p>\n * @return array Phar::buildFromIterator returns an associative array\n * mapping internal path of file to the full path of the file on the\n * filesystem.\n *\/"
            },
            {
                "name": "compressFiles",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Compresses all files in the current Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.compressfiles.php\n * @param compression int <p>\n * Compression must be one of Phar::GZ,\n * Phar::BZ2 to add compression, or Phar::NONE\n * to remove compression.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "decompressFiles",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Decompresses all files in the current Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.decompressfiles.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compress",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Compresses the entire Phar archive using Gzip or Bzip2 compression\n * @link http:\/\/www.php.net\/manual\/en\/phar.compress.php\n * @param compression int <p>\n * Compression must be one of Phar::GZ,\n * Phar::BZ2 to add compression, or Phar::NONE\n * to remove compression.\n * <\/p>\n * @param extension string[optional] <p>\n * By default, the extension is .phar.gz\n * or .phar.bz2 for compressing phar archives, and\n * .phar.tar.gz or .phar.tar.bz2 for\n * compressing tar archives. For decompressing, the default file extensions\n * are .phar and .phar.tar.\n * <\/p>\n * @return object a Phar object.\n *\/"
            },
            {
                "name": "decompress",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Decompresses the entire Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.decompress.php\n * @param extension string[optional] <p>\n * For decompressing, the default file extensions\n * are .phar and .phar.tar.\n * Use this parameter to specify another file extension. Be aware\n * that all executable phar archives must contain .phar\n * in their filename.\n * <\/p>\n * @return object A Phar object is returned.\n *\/"
            },
            {
                "name": "convertToExecutable",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Convert a phar archive to another executable phar archive file format\n * @link http:\/\/www.php.net\/manual\/en\/phar.converttoexecutable.php\n * @param format int[optional] <p>\n * This should be one of Phar::PHAR, Phar::TAR,\n * or Phar::ZIP. If set to &null;, the existing file format\n * will be preserved.\n * <\/p>\n * @param compression int[optional] <p>\n * This should be one of Phar::NONE for no whole-archive\n * compression, Phar::GZ for zlib-based compression, and\n * Phar::BZ2 for bzip-based compression.\n * <\/p>\n * @param extension string[optional] <p>\n * This parameter is used to override the default file extension for a\n * converted archive. Note that all zip- and tar-based phar archives must contain\n * .phar in their file extension in order to be processed as a\n * phar archive.\n * <\/p>\n * <p>\n * If converting to a phar-based archive, the default extensions are\n * .phar, .phar.gz, or .phar.bz2\n * depending on the specified compression. For tar-based phar archives, the\n * default extensions are .phar.tar, .phar.tar.gz,\n * and .phar.tar.bz2. For zip-based phar archives, the\n * default extension is .phar.zip.\n * <\/p>\n * @return Phar The method returns a Phar object on success and throws an\n * exception on failure.\n *\/"
            },
            {
                "name": "convertToData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Convert a phar archive to a non-executable tar or zip file\n * @link http:\/\/www.php.net\/manual\/en\/phar.converttodata.php\n * @param format int[optional] <p>\n * This should be one of Phar::TAR\n * or Phar::ZIP. If set to &null;, the existing file format\n * will be preserved.\n * <\/p>\n * @param compression int[optional] <p>\n * This should be one of Phar::NONE for no whole-archive\n * compression, Phar::GZ for zlib-based compression, and\n * Phar::BZ2 for bzip-based compression.\n * <\/p>\n * @param extension string[optional] <p>\n * This parameter is used to override the default file extension for a\n * converted archive. Note that .phar cannot be used\n * anywhere in the filename for a non-executable tar or zip archive.\n * <\/p>\n * <p>\n * If converting to a tar-based phar archive, the\n * default extensions are .tar, .tar.gz,\n * and .tar.bz2 depending on specified compression.\n * For zip-based archives, the\n * default extension is .zip.\n * <\/p>\n * @return PharData The method returns a PharData object on success and throws an\n * exception on failure.\n *\/"
            },
            {
                "name": "copy",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldfile",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newfile",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Copy a file internal to the phar archive to another new file within the phar\n * @link http:\/\/www.php.net\/manual\/en\/phar.copy.php\n * @param oldfile string <p>\n * <\/p>\n * @param newfile string <p>\n * <\/p>\n * @return bool returns true on success, but it is safer to encase method call in a\n * try\/catch block and assume success if no exception is thrown.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the number of entries (files) in the Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.count.php\n * @return int The number of files contained within this phar, or 0 (the number zero)\n * if none.\n *\/"
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "entry",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Delete a file within a phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.delete.php\n * @param entry string <p>\n * Path within an archive to the file to delete.\n * <\/p>\n * @return bool returns true on success, but it is better to check for thrown exception,\n * and assume success if none is thrown.\n *\/"
            },
            {
                "name": "delMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Deletes the global metadata of the phar\n * @link http:\/\/www.php.net\/manual\/en\/phar.delmetadata.php\n * @return bool returns true on success, but it is better to check for thrown exception,\n * and assume success if none is thrown.\n *\/"
            },
            {
                "name": "extractTo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pathto",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "files",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "overwrite",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Extract the contents of a phar archive to a directory\n * @link http:\/\/www.php.net\/manual\/en\/phar.extractto.php\n * @param pathto string <p>\n * Path within an archive to the file to delete.\n * <\/p>\n * @param files string|array[optional] <p>\n * The name of a file or directory to extract, or an array of files\/directories to extract\n * <\/p>\n * @param overwrite bool[optional] <p>\n * Set to true to enable overwriting existing files\n * <\/p>\n * @return bool returns true on success, but it is better to check for thrown exception,\n * and assume success if none is thrown.\n *\/"
            },
            {
                "name": "getAlias",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns phar archive meta-data\n * @link http:\/\/www.php.net\/manual\/en\/phar.getmetadata.php\n * @return mixed any PHP variable that can be serialized and is stored as meta-data for the Phar archive,\n * or &null; if no meta-data is stored.\n *\/"
            },
            {
                "name": "getModified",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return whether phar was modified\n * @link http:\/\/www.php.net\/manual\/en\/phar.getmodified.php\n * @return bool true if the phar has been modified since opened, false if not.\n *\/"
            },
            {
                "name": "getSignature",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return MD5\/SHA1\/SHA256\/SHA512\/OpenSSL signature of a Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.getsignature.php\n * @return array Array with the opened archive's signature in hash key and MD5,\n * SHA-1,\n * SHA-256, SHA-512, or OpenSSL\n * in hash_type. This signature is a hash calculated on the\n * entire phar's contents, and may be used to verify the integrity of the archive.\n * A valid signature is absolutely required of all executable phar archives if the\n * phar.require_hash INI variable\n * is set to true.\n *\/"
            },
            {
                "name": "getStub",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return the PHP loader or bootstrap stub of a Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.getstub.php\n * @return string a string containing the contents of the bootstrap loader (stub) of\n * the current Phar archive.\n *\/"
            },
            {
                "name": "getVersion",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return version info of Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.getversion.php\n * @return string The opened archive's API version. This is not to be confused with\n * the API version that the loaded phar extension will use to create\n * new phars. Each Phar archive has the API version hard-coded into\n * its manifest. See Phar file format\n * documentation for more information.\n *\/"
            },
            {
                "name": "hasMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns whether phar has global meta-data\n * @link http:\/\/www.php.net\/manual\/en\/phar.hasmetadata.php\n * @return bool true if meta-data has been set, and false if not.\n *\/"
            },
            {
                "name": "isBuffering",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Used to determine whether Phar write operations are being buffered, or are flushing directly to disk\n * @link http:\/\/www.php.net\/manual\/en\/phar.isbuffering.php\n * @return bool true if the write operations are being buffer, false otherwise.\n *\/"
            },
            {
                "name": "isCompressed",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz\/tar.bz and so on)\n * @link http:\/\/www.php.net\/manual\/en\/phar.iscompressed.php\n * @return mixed Phar::GZ, Phar::BZ2 or false\n *\/"
            },
            {
                "name": "isFileFormat",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns true if the phar archive is based on the tar\/phar\/zip file format depending on the parameter\n * @link http:\/\/www.php.net\/manual\/en\/phar.isfileformat.php\n * @param format int <p>\n * Either Phar::PHAR, Phar::TAR, or\n * Phar::ZIP to test for the format of the archive.\n * <\/p>\n * @return bool true if the phar archive matches the file format requested by the parameter\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns true if the phar archive can be modified\n * @link http:\/\/www.php.net\/manual\/en\/phar.iswritable.php\n * @return bool true if the phar archive can be modified\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * determines whether a file exists in the phar\n * @link http:\/\/www.php.net\/manual\/en\/phar.offsetexists.php\n * @param offset string <p>\n * The filename (relative path) to look for in a Phar.\n * <\/p>\n * @return bool true if the file exists within the phar, or false if not.\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets a <classname>PharFileInfo<\/classname> object for a specific file\n * @link http:\/\/www.php.net\/manual\/en\/phar.offsetget.php\n * @param offset string <p>\n * The filename (relative path) to look for in a Phar.\n * <\/p>\n * @return int A PharFileInfo object is returned that can be used to\n * iterate over a file's contents or to retrieve information about the current file.\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * set the contents of an internal file to those of an external file\n * @link http:\/\/www.php.net\/manual\/en\/phar.offsetset.php\n * @param offset string <p>\n * The filename (relative path) to modify in a Phar.\n * <\/p>\n * @param value string <p>\n * Content of the file.\n * <\/p>\n * @return void No return values.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * remove a file from a phar\n * @link http:\/\/www.php.net\/manual\/en\/phar.offsetunset.php\n * @param offset string <p>\n * The filename (relative path) to modify in a Phar.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setAlias",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the alias for the Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.setalias.php\n * @param alias string <p>\n * A shorthand string that this archive can be referred to in phar\n * stream wrapper access.\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "setDefaultStub",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "webindex",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader\n * @link http:\/\/www.php.net\/manual\/en\/phar.setdefaultstub.php\n * @param index string[optional] <p>\n * Relative path within the phar archive to run if accessed on the command-line\n * <\/p>\n * @param webindex string[optional] <p>\n * Relative path within the phar archive to run if accessed through a web browser\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setMetadata",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "metadata",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "metadata",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets phar archive meta-data\n * @link http:\/\/www.php.net\/manual\/en\/phardata.setmetadata.php\n * @param metadata mixed <p>\n * Any PHP variable containing information to store that describes the phar archive\n * <\/p>\n * @param metadata mixed\n * @return void\n *\/"
            },
            {
                "name": "setSignatureAlgorithm",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "sigtype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "privatekey",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "sigtype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * set the signature algorithm for a phar and apply it.  The\n * @link http:\/\/www.php.net\/manual\/en\/phardata.setsignaturealgorithm.php\n * @param sigtype int <p>\n * One of Phar::MD5,\n * Phar::SHA1, Phar::SHA256,\n * Phar::SHA512, or Phar::PGP\n * <\/p>\n * @param privatekey string[optional] <p>\n * The contents of an OpenSSL private key, as extracted from a certificate or\n * OpenSSL key file:\n * setSignatureAlgorithm(Phar::OPENSSL, $pkey);\n * ?>\n * ]]>\n * See phar introduction for instructions on\n * naming and placement of the public key file.\n * <\/p>\n * @param sigtype int\n * @return void\n *\/"
            },
            {
                "name": "setStub",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "stub",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "len",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Used to set the PHP loader or bootstrap stub of a Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.setstub.php\n * @param stub string <p>\n * A string or an open stream handle to use as the executable stub for this\n * phar archive.\n * <\/p>\n * @param len int[optional] <p>\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "startBuffering",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Start buffering Phar write operations, do not modify the Phar object on disk\n * @link http:\/\/www.php.net\/manual\/en\/phar.startbuffering.php\n * @return void\n *\/"
            },
            {
                "name": "stopBuffering",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Stop buffering write requests to the Phar archive, and save changes to disk\n * @link http:\/\/www.php.net\/manual\/en\/phar.stopbuffering.php\n * @return void\n *\/"
            },
            {
                "name": "apiVersion",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the api version\n * @link http:\/\/www.php.net\/manual\/en\/phar.apiversion.php\n * @return string The API version string as in &quot;1.0.0&quot;.\n *\/"
            },
            {
                "name": "canCompress",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns whether phar extension supports compression using either zlib or bzip2\n * @link http:\/\/www.php.net\/manual\/en\/phar.cancompress.php\n * @param type int[optional] <p>\n * Either Phar::GZ or Phar::BZ2 can be\n * used to test whether compression is possible with a specific compression\n * algorithm (zlib or bzip2).\n * <\/p>\n * @return bool true if compression\/decompression is available, false if not.\n *\/"
            },
            {
                "name": "canWrite",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns whether phar extension supports writing and creating phars\n * @link http:\/\/www.php.net\/manual\/en\/phar.canwrite.php\n * @return bool true if write access is enabled, false if it is disabled.\n *\/"
            },
            {
                "name": "createDefaultStub",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "indexfile",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "webindexfile",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a phar-file format specific stub\n * @link http:\/\/www.php.net\/manual\/en\/phar.createdefaultstub.php\n * @param indexfile string[optional]\n * @param webindexfile string[optional]\n * @return string a string containing the contents of a customized bootstrap loader (stub)\n * that allows the created Phar archive to work with or without the Phar extension\n * enabled.\n *\/"
            },
            {
                "name": "getSupportedCompression",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return array of supported compression algorithms\n * @link http:\/\/www.php.net\/manual\/en\/phar.getsupportedcompression.php\n * @return array an array containing any of Phar::GZ or\n * Phar::BZ2, depending on the availability of\n * the zlib extension or the\n * bz2 extension.\n *\/"
            },
            {
                "name": "getSupportedSignatures",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return array of supported signature types\n * @link http:\/\/www.php.net\/manual\/en\/phar.getsupportedsignatures.php\n * @return array an array containing any of MD5, SHA-1,\n * SHA-256, SHA-512, or OpenSSL.\n *\/"
            },
            {
                "name": "interceptFileFuncs",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions\n * @link http:\/\/www.php.net\/manual\/en\/phar.interceptfilefuncs.php\n * @return void\n *\/"
            },
            {
                "name": "isValidPharFilename",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "executable",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns whether the given filename is a valid phar filename\n * @link http:\/\/www.php.net\/manual\/en\/phar.isvalidpharfilename.php\n * @param filename string <p>\n * The name or full path to a phar archive not yet created\n * <\/p>\n * @param executable bool[optional] <p>\n * This parameter determines whether the filename should be treated as\n * a phar executable archive, or a data non-executable archive\n * <\/p>\n * @return bool true if the filename is valid, false if not.\n *\/"
            },
            {
                "name": "loadPhar",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Loads any phar archive with an alias\n * @link http:\/\/www.php.net\/manual\/en\/phar.loadphar.php\n * @param filename string <p>\n * the full or relative path to the phar archive to open\n * <\/p>\n * @param alias string[optional] <p>\n * The alias that may be used to refer to the phar archive. Note\n * that many phar archives specify an explicit alias inside the\n * phar archive, and a PharException will be thrown if\n * a new alias is specified in this case.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "mapPhar",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "dataoffset",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Reads the currently executed file (a phar) and registers its manifest\n * @link http:\/\/www.php.net\/manual\/en\/phar.mapphar.php\n * @param alias string[optional] <p>\n * The alias that can be used in phar:\/\/ URLs to\n * refer to this archive, rather than its full path.\n * <\/p>\n * @param dataoffset int[optional] <p>\n * Unused variable, here for compatibility with PEAR's PHP_Archive.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "running",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "retphar",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns the full path on disk or full phar URL to the currently executing Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.running.php\n * @param retphar bool[optional] <p>\n * If false, the full path on disk to the phar\n * archive is returned. If true, a full phar URL is returned.\n * <\/p>\n * @return string the filename if valid, empty string otherwise.\n *\/"
            },
            {
                "name": "mount",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "pharpath",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "externalpath",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Mount an external path or file to a virtual location within the phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phar.mount.php\n * @param pharpath string <p>\n * The internal path within the phar archive to use as the mounted path location.\n * This must be a relative path within the phar archive, and must not already exist.\n * <\/p>\n * @param externalpath string <p>\n * A path or URL to an external file or directory to mount within the phar archive\n * <\/p>\n * @return void No return. PharException is thrown on failure.\n *\/"
            },
            {
                "name": "mungServer",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "munglist",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Defines a list of up to 4 $_SERVER variables that should be modified for execution\n * @link http:\/\/www.php.net\/manual\/en\/phar.mungserver.php\n * @param munglist array <p>\n * an array containing as string indices any of\n * REQUEST_URI, PHP_SELF,\n * SCRIPT_NAME and SCRIPT_FILENAME.\n * Other values trigger an exception, and Phar::mungServer\n * is case-sensitive.\n * <\/p>\n * @return void No return.\n *\/"
            },
            {
                "name": "unlinkArchive",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "archive",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Completely remove a phar archive from disk and from memory\n * @link http:\/\/www.php.net\/manual\/en\/phar.unlinkarchive.php\n * @param archive string <p>\n * The path on disk to the phar archive.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "webPhar",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "f404",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "mimetypes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "rewrites",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * mapPhar for web-based phars. front controller for web applications\n * @link http:\/\/www.php.net\/manual\/en\/phar.webphar.php\n * @param alias string[optional] <p>\n * The alias that can be used in phar:\/\/ URLs to\n * refer to this archive, rather than its full path.\n * <\/p>\n * @param index string[optional] <p>\n * The location within the phar of the directory index.\n * <\/p>\n * @param f404 string[optional] <p>\n * The location of the script to run when a file is not found. This\n * script should output the proper HTTP 404 headers.\n * <\/p>\n * @param mimetypes array[optional] <p>\n * An array mapping additional file extensions to MIME type.\n * If the default mapping is sufficient, pass an empty array.\n * By default, these extensions are mapped to these MIME types:\n * Phar::PHPS, \/\/ pass to highlight_file()\n * 'c' => 'text\/plain',\n * 'cc' => 'text\/plain',\n * 'cpp' => 'text\/plain',\n * 'c++' => 'text\/plain',\n * 'dtd' => 'text\/plain',\n * 'h' => 'text\/plain',\n * 'log' => 'text\/plain',\n * 'rng' => 'text\/plain',\n * 'txt' => 'text\/plain',\n * 'xsd' => 'text\/plain',\n * 'php' => Phar::PHP, \/\/ parse as PHP\n * 'inc' => Phar::PHP, \/\/ parse as PHP\n * 'avi' => 'video\/avi',\n * 'bmp' => 'image\/bmp',\n * 'css' => 'text\/css',\n * 'gif' => 'image\/gif',\n * 'htm' => 'text\/html',\n * 'html' => 'text\/html',\n * 'htmls' => 'text\/html',\n * 'ico' => 'image\/x-ico',\n * 'jpe' => 'image\/jpeg',\n * 'jpg' => 'image\/jpeg',\n * 'jpeg' => 'image\/jpeg',\n * 'js' => 'application\/x-javascript',\n * 'midi' => 'audio\/midi',\n * 'mid' => 'audio\/midi',\n * 'mod' => 'audio\/mod',\n * 'mov' => 'movie\/quicktime',\n * 'mp3' => 'audio\/mp3',\n * 'mpg' => 'video\/mpeg',\n * 'mpeg' => 'video\/mpeg',\n * 'pdf' => 'application\/pdf',\n * 'png' => 'image\/png',\n * 'swf' => 'application\/shockwave-flash',\n * 'tif' => 'image\/tiff',\n * 'tiff' => 'image\/tiff',\n * 'wav' => 'audio\/wav',\n * 'xbm' => 'image\/xbm',\n * 'xml' => 'text\/xml',\n * );\n * ?>\n * ]]>\n * <\/p>\n * @param rewrites callable[optional] <p>\n * The rewrites function is passed a string as its only parameter and must return a string or false.\n * <\/p>\n * <p>\n * If you are using fast-cgi or cgi then the parameter passed to the function is the value of the\n * $_SERVER['PATH_INFO'] variable. Otherwise, the parameter passed to the function is the value\n * of the $_SERVER['REQUEST_URI'] variable.\n * <\/p>\n * <p>\n * If a string is returned it is used as the internal file path. If false is returned then webPhar() will\n * send a HTTP 403 Denied Code.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allow_links",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns whether current entry is a directory and not '.' or '..'\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.haschildren.php\n * @param allow_links bool[optional] <p>\n * <\/p>\n * @return bool whether the current entry is a directory, but not '.' or '..'\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns an iterator for the current entry if it is a directory\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.getchildren.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator\n * constants.\n *\/"
            },
            {
                "name": "getSubPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get sub path\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.getsubpath.php\n * @return string The sub path (sub directory).\n *\/"
            },
            {
                "name": "getSubPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get sub path and name\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.getsubpathname.php\n * @return string The sub path (sub directory) and filename.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rewinds back to the beginning\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.rewind.php\n * @return void\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Move to the next file\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.next.php\n * @return void\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Retrieve the key for the current file\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.key.php\n * @return string the pathname or filename depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * The current file\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.current.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the handling flags\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.getflags.php\n * @return int The integer value of the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets handling flags\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.setflags.php\n * @param flags int[optional] <p>\n * The handling flags to set.\n * See the FilesystemIterator constants.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return file name of current DirectoryIterator item.\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.getfilename.php\n * @return string the file name of the current DirectoryIterator item.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the file extension\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get base name of current DirectoryIterator item.\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.getbasename.php\n * @param suffix string[optional] <p>\n * If the base name ends in suffix,\n * this will be cut.\n * <\/p>\n * @return string The base name of the current DirectoryIterator item.\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Determine if current DirectoryIterator item is '.' or '..'\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.isdot.php\n * @return bool true if the entry is . or ..,\n * otherwise false\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check whether current DirectoryIterator position is a valid file\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.valid.php\n * @return bool true if the position is valid, otherwise false\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Seek to a DirectoryIterator item\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.seek.php\n * @param position int <p>\n * The zero-based numeric position to seek to.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get file name as a string\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.tostring.php\n * @return string the file name of the current DirectoryIterator item.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the path to the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file permissions\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the inode for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file size\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the owner of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the file group\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets last access time of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the last modified time\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the inode change time\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file type\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if file is readable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isreadable.php\n * @return bool true if readable, false otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is executable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isexecutable.php\n * @return bool true if executable, false otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the object references a regular file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isfile.php\n * @return bool true if the file exists and is a regular file (not a link), false otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is a directory\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isdir.php\n * @return bool true if a directory, false otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is a link\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.islink.php\n * @return bool true if the file is a link, false otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the target of a link\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets absolute path to file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileInfo object for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getfileinfo.php\n * @param class_name string[optional] <p>\n * Name of an SplFileInfo derived class to use.\n * <\/p>\n * @return SplFileInfo An SplFileInfo object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileInfo object for the path\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpathinfo.php\n * @param class_name string[optional] <p>\n * Name of an SplFileInfo derived class to use.\n * <\/p>\n * @return SplFileInfo an SplFileInfo object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileObject object for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.openfile.php\n * @param open_mode string[optional] <p>\n * The mode for opening the file. See the fopen\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param use_include_path bool[optional] <p>\n * &parameter.use_include_path;\n * <\/p>\n * @param context resource[optional] <p>\n * &parameter.context;\n * <\/p>\n * @return SplFileObject The opened file as an SplFileObject object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets the class name used with <methodname>SplFileInfo::openFile<\/methodname>\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.setfileclass.php\n * @param class_name string[optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.setinfoclass.php\n * @param class_name string[optional] <p>\n * The class name to use.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            },
            {
                "name": "BZ2",
                "value": 8192,
                "doc": null
            },
            {
                "name": "GZ",
                "value": 4096,
                "doc": null
            },
            {
                "name": "NONE",
                "value": 0,
                "doc": null
            },
            {
                "name": "PHAR",
                "value": 1,
                "doc": null
            },
            {
                "name": "TAR",
                "value": 2,
                "doc": null
            },
            {
                "name": "ZIP",
                "value": 3,
                "doc": null
            },
            {
                "name": "COMPRESSED",
                "value": 61440,
                "doc": null
            },
            {
                "name": "PHP",
                "value": 0,
                "doc": null
            },
            {
                "name": "PHPS",
                "value": 1,
                "doc": null
            },
            {
                "name": "MD5",
                "value": 1,
                "doc": null
            },
            {
                "name": "OPENSSL",
                "value": 16,
                "doc": null
            },
            {
                "name": "SHA1",
                "value": 2,
                "doc": null
            },
            {
                "name": "SHA256",
                "value": 3,
                "doc": null
            },
            {
                "name": "SHA512",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "PharData",
        "fqn": "\\PharData",
        "type": 0,
        "extends": "RecursiveDirectoryIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fileformat",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Construct a non-executable tar or zip archive object\n * @link http:\/\/www.php.net\/manual\/en\/phardata.construct.php\n * @param filename\n * @param flags[optional]\n * @param alias[optional]\n * @param fileformat[optional]\n *\/"
            },
            {
                "name": "__destruct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "addEmptyDir",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dirname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add an empty directory to the tar\/zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.addemptydir.php\n * @param dirname string <p>\n * The name of the empty directory to create in the phar archive\n * <\/p>\n * @return bool no return value, exception is thrown on failure.\n *\/"
            },
            {
                "name": "addFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "file",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localname",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Add a file from the filesystem to the tar\/zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.addfile.php\n * @param file string <p>\n * Full or relative path to a file on disk to be added\n * to the phar archive.\n * <\/p>\n * @param localname string[optional] <p>\n * Path that the file will be stored in the archive.\n * <\/p>\n * @return void no return value, exception is thrown on failure.\n *\/"
            },
            {
                "name": "addFromString",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "localname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "contents",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add a file from the filesystem to the tar\/zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.addfromstring.php\n * @param localname string <p>\n * Path that the file will be stored in the archive.\n * <\/p>\n * @param contents string <p>\n * The file contents to store\n * <\/p>\n * @return bool no return value, exception is thrown on failure.\n *\/"
            },
            {
                "name": "buildFromDirectory",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "base_dir",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Construct a tar\/zip archive from the files within a directory.\n * @link http:\/\/www.php.net\/manual\/en\/phardata.buildfromdirectory.php\n * @param base_dir string <p>\n * The full or relative path to the directory that contains all files\n * to add to the archive.\n * <\/p>\n * @param regex string[optional] <p>\n * An optional pcre regular expression that is used to filter the\n * list of files. Only file paths matching the regular expression\n * will be included in the archive.\n * <\/p>\n * @return array Phar::buildFromDirectory returns an associative array\n * mapping internal path of file to the full path of the file on the\n * filesystem.\n *\/"
            },
            {
                "name": "buildFromIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iter",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "base_directory",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Construct a tar or zip archive from an iterator.\n * @link http:\/\/www.php.net\/manual\/en\/phardata.buildfromiterator.php\n * @param iter Iterator <p>\n * Any iterator that either associatively maps tar\/zip file to location or\n * returns SplFileInfo objects\n * <\/p>\n * @param base_directory string[optional] <p>\n * For iterators that return SplFileInfo objects, the portion of each\n * file's full path to remove when adding to the tar\/zip archive\n * <\/p>\n * @return array PharData::buildFromIterator returns an associative array\n * mapping internal path of file to the full path of the file on the\n * filesystem.\n *\/"
            },
            {
                "name": "compressFiles",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Compresses all files in the current tar\/zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.compressfiles.php\n * @param compression int <p>\n * Compression must be one of Phar::GZ,\n * Phar::BZ2 to add compression, or Phar::NONE\n * to remove compression.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "decompressFiles",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Decompresses all files in the current zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.decompressfiles.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compress",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Compresses the entire tar\/zip archive using Gzip or Bzip2 compression\n * @link http:\/\/www.php.net\/manual\/en\/phardata.compress.php\n * @param compression int <p>\n * Compression must be one of Phar::GZ,\n * Phar::BZ2 to add compression, or Phar::NONE\n * to remove compression.\n * <\/p>\n * @param extension string[optional] <p>\n * By default, the extension is .tar.gz or .tar.bz2\n * for compressing a tar, and .tar for decompressing.\n * <\/p>\n * @return object A PharData object is returned.\n *\/"
            },
            {
                "name": "decompress",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Decompresses the entire Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.decompress.php\n * @param extension string[optional] <p>\n * For decompressing, the default file extension\n * is .phar.tar.\n * Use this parameter to specify another file extension. Be aware\n * that no non-executable archives cannot contain .phar\n * in their filename.\n * <\/p>\n * @return object A PharData object is returned.\n *\/"
            },
            {
                "name": "convertToExecutable",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Convert a non-executable tar\/zip archive to an executable phar archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.converttoexecutable.php\n * @param format int[optional] <p>\n * This should be one of Phar::PHAR, Phar::TAR,\n * or Phar::ZIP. If set to &null;, the existing file format\n * will be preserved.\n * <\/p>\n * @param compression int[optional] <p>\n * This should be one of Phar::NONE for no whole-archive\n * compression, Phar::GZ for zlib-based compression, and\n * Phar::BZ2 for bzip-based compression.\n * <\/p>\n * @param extension string[optional] <p>\n * This parameter is used to override the default file extension for a\n * converted archive. Note that all zip- and tar-based phar archives must contain\n * .phar in their file extension in order to be processed as a\n * phar archive.\n * <\/p>\n * <p>\n * If converting to a phar-based archive, the default extensions are\n * .phar, .phar.gz, or .phar.bz2\n * depending on the specified compression. For tar-based phar archives, the\n * default extensions are .phar.tar, .phar.tar.gz,\n * and .phar.tar.bz2. For zip-based phar archives, the\n * default extension is .phar.zip.\n * <\/p>\n * @return Phar The method returns a Phar object on success and throws an\n * exception on failure.\n *\/"
            },
            {
                "name": "convertToData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "extension",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Convert a phar archive to a non-executable tar or zip file\n * @link http:\/\/www.php.net\/manual\/en\/phardata.converttodata.php\n * @param format int[optional] <p>\n * This should be one of Phar::TAR\n * or Phar::ZIP. If set to &null;, the existing file format\n * will be preserved.\n * <\/p>\n * @param compression int[optional] <p>\n * This should be one of Phar::NONE for no whole-archive\n * compression, Phar::GZ for zlib-based compression, and\n * Phar::BZ2 for bzip-based compression.\n * <\/p>\n * @param extension string[optional] <p>\n * This parameter is used to override the default file extension for a\n * converted archive. Note that .phar cannot be used\n * anywhere in the filename for a non-executable tar or zip archive.\n * <\/p>\n * <p>\n * If converting to a tar-based phar archive, the\n * default extensions are .tar, .tar.gz,\n * and .tar.bz2 depending on specified compression.\n * For zip-based archives, the\n * default extension is .zip.\n * <\/p>\n * @return PharData The method returns a PharData object on success and throws an\n * exception on failure.\n *\/"
            },
            {
                "name": "copy",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldfile",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newfile",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Copy a file internal to the phar archive to another new file within the phar\n * @link http:\/\/www.php.net\/manual\/en\/phardata.copy.php\n * @param oldfile string <p>\n * <\/p>\n * @param newfile string <p>\n * <\/p>\n * @return bool returns true on success, but it is safer to encase method call in a\n * try\/catch block and assume success if no exception is thrown.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "entry",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Delete a file within a tar\/zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.delete.php\n * @param entry string <p>\n * Path within an archive to the file to delete.\n * <\/p>\n * @return bool returns true on success, but it is better to check for thrown exception,\n * and assume success if none is thrown.\n *\/"
            },
            {
                "name": "delMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Deletes the global metadata of a zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.delmetadata.php\n * @return bool returns true on success, but it is better to check for thrown exception,\n * and assume success if none is thrown.\n *\/"
            },
            {
                "name": "extractTo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pathto",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "files",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "overwrite",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Extract the contents of a tar\/zip archive to a directory\n * @link http:\/\/www.php.net\/manual\/en\/phardata.extractto.php\n * @param pathto string <p>\n * Path within an archive to the file to delete.\n * <\/p>\n * @param files string|array[optional] <p>\n * The name of a file or directory to extract, or an array of files\/directories to extract\n * <\/p>\n * @param overwrite bool[optional] <p>\n * Set to true to enable overwriting existing files\n * <\/p>\n * @return bool returns true on success, but it is better to check for thrown exception,\n * and assume success if none is thrown.\n *\/"
            },
            {
                "name": "getAlias",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getModified",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getSignature",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getStub",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getVersion",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "hasMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "isBuffering",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "isCompressed",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "isFileFormat",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fileformat",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param fileformat\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns true if the tar\/zip archive can be modified\n * @link http:\/\/www.php.net\/manual\/en\/phardata.iswritable.php\n * @return bool true if the tar\/zip archive can be modified\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "entry",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param entry\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "entry",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param entry\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * set the contents of a file within the tar\/zip to those of an external file or string\n * @link http:\/\/www.php.net\/manual\/en\/phardata.offsetset.php\n * @param offset string <p>\n * The filename (relative path) to modify in a tar or zip archive.\n * <\/p>\n * @param value string <p>\n * Content of the file.\n * <\/p>\n * @return void No return values.\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * remove a file from a tar\/zip archive\n * @link http:\/\/www.php.net\/manual\/en\/phardata.offsetunset.php\n * @param offset string <p>\n * The filename (relative path) to modify in the tar\/zip archive.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setAlias",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * dummy function (Phar::setAlias is not valid for PharData)\n * @link http:\/\/www.php.net\/manual\/en\/phardata.setalias.php\n * @param alias string <p>\n * A shorthand string that this archive can be referred to in phar\n * stream wrapper access. This parameter is ignored.\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "setDefaultStub",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "webindex",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * dummy function (Phar::setDefaultStub is not valid for PharData)\n * @link http:\/\/www.php.net\/manual\/en\/phardata.setdefaultstub.php\n * @param index string[optional] <p>\n * Relative path within the phar archive to run if accessed on the command-line\n * <\/p>\n * @param webindex string[optional] <p>\n * Relative path within the phar archive to run if accessed through a web browser\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setMetadata",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "metadata",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param metadata\n *\/"
            },
            {
                "name": "setSignatureAlgorithm",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "algorithm",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "privatekey",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param algorithm\n * @param privatekey[optional]\n *\/"
            },
            {
                "name": "setStub",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "stub",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "len",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * dummy function (Phar::setStub is not valid for PharData)\n * @link http:\/\/www.php.net\/manual\/en\/phardata.setstub.php\n * @param stub string <p>\n * A string or an open stream handle to use as the executable stub for this\n * phar archive. This parameter is ignored.\n * <\/p>\n * @param len int[optional] <p>\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "startBuffering",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "stopBuffering",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "apiVersion",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "canCompress",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "method",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param method[optional]\n *\/"
            },
            {
                "name": "canWrite",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "createDefaultStub",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "webindex",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param index[optional]\n * @param webindex[optional]\n *\/"
            },
            {
                "name": "getSupportedCompression",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getSupportedSignatures",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "interceptFileFuncs",
                "type": 41,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "isValidPharFilename",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "executable",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param filename\n * @param executable[optional]\n *\/"
            },
            {
                "name": "loadPhar",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param filename\n * @param alias[optional]\n *\/"
            },
            {
                "name": "mapPhar",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param alias[optional]\n * @param offset[optional]\n *\/"
            },
            {
                "name": "running",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "retphar",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param retphar\n *\/"
            },
            {
                "name": "mount",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "inphar",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "externalfile",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param inphar\n * @param externalfile\n *\/"
            },
            {
                "name": "mungServer",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "munglist",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param munglist\n *\/"
            },
            {
                "name": "unlinkArchive",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "archive",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param archive\n *\/"
            },
            {
                "name": "webPhar",
                "type": 41,
                "byRef": false,
                "params": [
                    {
                        "name": "alias",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "f404",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mimetypes",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "rewrites",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param alias[optional]\n * @param index[optional]\n * @param f404[optional]\n * @param mimetypes[optional]\n * @param rewrites[optional]\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allow_links",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns whether current entry is a directory and not '.' or '..'\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.haschildren.php\n * @param allow_links bool[optional] <p>\n * <\/p>\n * @return bool whether the current entry is a directory, but not '.' or '..'\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns an iterator for the current entry if it is a directory\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.getchildren.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator\n * constants.\n *\/"
            },
            {
                "name": "getSubPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get sub path\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.getsubpath.php\n * @return string The sub path (sub directory).\n *\/"
            },
            {
                "name": "getSubPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get sub path and name\n * @link http:\/\/www.php.net\/manual\/en\/recursivedirectoryiterator.getsubpathname.php\n * @return string The sub path (sub directory) and filename.\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rewinds back to the beginning\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.rewind.php\n * @return void\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Move to the next file\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.next.php\n * @return void\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Retrieve the key for the current file\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.key.php\n * @return string the pathname or filename depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * The current file\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.current.php\n * @return mixed The filename, file information, or $this depending on the set flags.\n * See the FilesystemIterator constants.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the handling flags\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.getflags.php\n * @return int The integer value of the set flags.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets handling flags\n * @link http:\/\/www.php.net\/manual\/en\/filesystemiterator.setflags.php\n * @param flags int[optional] <p>\n * The handling flags to set.\n * See the FilesystemIterator constants.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return file name of current DirectoryIterator item.\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.getfilename.php\n * @return string the file name of the current DirectoryIterator item.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the file extension\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get base name of current DirectoryIterator item.\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.getbasename.php\n * @param suffix string[optional] <p>\n * If the base name ends in suffix,\n * this will be cut.\n * <\/p>\n * @return string The base name of the current DirectoryIterator item.\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Determine if current DirectoryIterator item is '.' or '..'\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.isdot.php\n * @return bool true if the entry is . or ..,\n * otherwise false\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check whether current DirectoryIterator position is a valid file\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.valid.php\n * @return bool true if the position is valid, otherwise false\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Seek to a DirectoryIterator item\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.seek.php\n * @param position int <p>\n * The zero-based numeric position to seek to.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get file name as a string\n * @link http:\/\/www.php.net\/manual\/en\/directoryiterator.tostring.php\n * @return string the file name of the current DirectoryIterator item.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the path to the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file permissions\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the inode for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file size\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the owner of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the file group\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets last access time of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the last modified time\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the inode change time\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file type\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if file is readable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isreadable.php\n * @return bool true if readable, false otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is executable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isexecutable.php\n * @return bool true if executable, false otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the object references a regular file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isfile.php\n * @return bool true if the file exists and is a regular file (not a link), false otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is a directory\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isdir.php\n * @return bool true if a directory, false otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is a link\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.islink.php\n * @return bool true if the file is a link, false otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the target of a link\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets absolute path to file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileInfo object for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getfileinfo.php\n * @param class_name string[optional] <p>\n * Name of an SplFileInfo derived class to use.\n * <\/p>\n * @return SplFileInfo An SplFileInfo object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileInfo object for the path\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpathinfo.php\n * @param class_name string[optional] <p>\n * Name of an SplFileInfo derived class to use.\n * <\/p>\n * @return SplFileInfo an SplFileInfo object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileObject object for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.openfile.php\n * @param open_mode string[optional] <p>\n * The mode for opening the file. See the fopen\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param use_include_path bool[optional] <p>\n * &parameter.use_include_path;\n * <\/p>\n * @param context resource[optional] <p>\n * &parameter.context;\n * <\/p>\n * @return SplFileObject The opened file as an SplFileObject object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets the class name used with <methodname>SplFileInfo::openFile<\/methodname>\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.setfileclass.php\n * @param class_name string[optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.setinfoclass.php\n * @param class_name string[optional] <p>\n * The class name to use.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "PharFileInfo",
        "fqn": "\\PharFileInfo",
        "type": 0,
        "extends": "SplFileInfo",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Construct a Phar entry object\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.construct.php\n * @param filename\n *\/"
            },
            {
                "name": "__destruct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "chmod",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "permissions",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets file-specific permission bits\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.chmod.php\n * @param permissions int <p>\n * permissions (see chmod)\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "compress",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "compression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Compresses the current Phar entry with either zlib or bzip2 compression\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.compress.php\n * @param compression int\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "decompress",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Decompresses the current Phar entry within the phar\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.decompress.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "delMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Deletes the metadata of the entry\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.delmetadata.php\n * @return bool true if successful, false if the entry had no metadata.\n * As with all functionality that modifies the contents of\n * a phar, the phar.readonly INI variable\n * must be off in order to succeed if the file is within a Phar\n * archive. Files within PharData archives do not have\n * this restriction.\n *\/"
            },
            {
                "name": "getCompressedSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the actual size of the file (with compression) inside the Phar archive\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.getcompressedsize.php\n * @return int The size in bytes of the file within the Phar archive on disk.\n *\/"
            },
            {
                "name": "getCRC32",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns CRC32 code or throws an exception if CRC has not been verified\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.getcrc32.php\n * @return int The crc32 checksum of the file within the Phar archive.\n *\/"
            },
            {
                "name": "getContent",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns file-specific meta-data saved with a file\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.getmetadata.php\n * @return mixed any PHP variable that can be serialized and is stored as meta-data for the file,\n * or &null; if no meta-data is stored.\n *\/"
            },
            {
                "name": "getPharFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the Phar file entry flags\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.getpharflags.php\n * @return int The Phar flags (always 0 in the current implementation)\n *\/"
            },
            {
                "name": "hasMetadata",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the metadata of the entry\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.hasmetadata.php\n * @return bool false if no metadata is set or is &null;, true if metadata is not &null;\n *\/"
            },
            {
                "name": "isCompressed",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "compression_type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns whether the entry is compressed\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.iscompressed.php\n * @param compression_type int[optional] <p>\n * One of Phar::GZ or Phar::BZ2,\n * defaults to any compression.\n * <\/p>\n * @return bool true if the file is compressed within the Phar archive, false if not.\n *\/"
            },
            {
                "name": "isCRCChecked",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns whether file entry has had its CRC verified\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.iscrcchecked.php\n * @return bool true if the file has had its CRC verified, false if not.\n *\/"
            },
            {
                "name": "setMetadata",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "metadata",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets file-specific meta-data saved with a file\n * @link http:\/\/www.php.net\/manual\/en\/pharfileinfo.setmetadata.php\n * @param metadata mixed <p>\n * Any PHP variable containing information to store alongside a file\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the path without filename\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the filename\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getfilename.php\n * @return string The filename.\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the file extension\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getextension.php\n * @return string a string containing the file extension, or an\n * empty string if the file has no extension.\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets the base name of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getbasename.php\n * @param suffix string[optional] <p>\n * Optional suffix to omit from the base name returned.\n * <\/p>\n * @return string the base name without path information.\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the path to the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpathname.php\n * @return string The path to the file.\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file permissions\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getperms.php\n * @return int the file permissions.\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the inode for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getinode.php\n * @return int the inode number for the filesystem object.\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file size\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getsize.php\n * @return int The filesize in bytes.\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the owner of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getowner.php\n * @return int The owner id in numerical format.\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the file group\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getgroup.php\n * @return int The group id in numerical format.\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets last access time of the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getatime.php\n * @return int the time the file was last accessed.\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the last modified time\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getmtime.php\n * @return int the last modified time for the file, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the inode change time\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getctime.php\n * @return int The last change time, in a Unix timestamp.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets file type\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.gettype.php\n * @return string A string representing the type of the entry.\n * May be one of file, link,\n * or dir\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the entry is writable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.iswritable.php\n * @return bool true if writable, false otherwise;\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if file is readable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isreadable.php\n * @return bool true if readable, false otherwise.\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is executable\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isexecutable.php\n * @return bool true if executable, false otherwise.\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the object references a regular file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isfile.php\n * @return bool true if the file exists and is a regular file (not a link), false otherwise.\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is a directory\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.isdir.php\n * @return bool true if a directory, false otherwise.\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Tells if the file is a link\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.islink.php\n * @return bool true if the file is a link, false otherwise.\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the target of a link\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getlinktarget.php\n * @return string the target of the filesystem link.\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets absolute path to file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getrealpath.php\n * @return string the path to the file.\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileInfo object for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getfileinfo.php\n * @param class_name string[optional] <p>\n * Name of an SplFileInfo derived class to use.\n * <\/p>\n * @return SplFileInfo An SplFileInfo object created for the file.\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileInfo object for the path\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.getpathinfo.php\n * @param class_name string[optional] <p>\n * Name of an SplFileInfo derived class to use.\n * <\/p>\n * @return SplFileInfo an SplFileInfo object for the parent path of the file.\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Gets an SplFileObject object for the file\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.openfile.php\n * @param open_mode string[optional] <p>\n * The mode for opening the file. See the fopen\n * documentation for descriptions of possible modes. The default\n * is read only.\n * <\/p>\n * @param use_include_path bool[optional] <p>\n * &parameter.use_include_path;\n * <\/p>\n * @param context resource[optional] <p>\n * &parameter.context;\n * <\/p>\n * @return SplFileObject The opened file as an SplFileObject object.\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets the class name used with <methodname>SplFileInfo::openFile<\/methodname>\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.setfileclass.php\n * @param class_name string[optional] <p>\n * The class name to use when openFile() is called.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sets the class used with getFileInfo and getPathInfo\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.setinfoclass.php\n * @param class_name string[optional] <p>\n * The class name to use.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the path to the file as a string\n * @link http:\/\/www.php.net\/manual\/en\/splfileinfo.tostring.php\n * @return void the path to the file.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    }
]
