[
    {
        "stmtType": "Class",
        "name": "AMQPConnection",
        "fqn": "\\AMQPConnection",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "credentials",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an instance of AMQPConnection\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.construct.php\n * @param credentials[optional]\n *\/"
            },
            {
                "name": "isConnected",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Determine if the AMQPConnection object is connected to the broker.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.isconnected.php\n * @return bool true if connected, false otherwise\n *\/"
            },
            {
                "name": "connect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Establish a connection with the AMQP broker.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.connect.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "pconnect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "pdisconnect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "disconnect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Closes the connection with the AMQP broker.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.disconnect.php\n * @return bool true if connection was successfully closed, false otherwise.\n *\/"
            },
            {
                "name": "reconnect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Closes any open connection and creates a new connection with the AMQP broker.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.reconnect.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getLogin",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured login\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.getlogin.php\n * @return string The configured login as a string.\n *\/"
            },
            {
                "name": "setLogin",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "login",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the login.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.setlogin.php\n * @param login string <p>\n * The login string used to authenticate with the AMQP broker.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPassword",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured password\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.getpassword.php\n * @return string The configured password as a string.\n *\/"
            },
            {
                "name": "setPassword",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "password",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the password.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.setpassword.php\n * @param password string <p>\n * The password string used to authenticate with the AMQP broker.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getHost",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured host\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.gethost.php\n * @return string The configured host as a string.\n *\/"
            },
            {
                "name": "setHost",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the amqp host.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.sethost.php\n * @param host string <p>\n * The hostname of the AMQP broker.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured port\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.getport.php\n * @return int The configured port as an integer.\n *\/"
            },
            {
                "name": "setPort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the port.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.setport.php\n * @param port int <p>\n * The port used to connect to the AMQP broker.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getVhost",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured vhost\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.getvhost.php\n * @return string The configured virtual host as a string.\n *\/"
            },
            {
                "name": "setVhost",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "vhost",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the amqp virtual host\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.setvhost.php\n * @param vhost string\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getTimeout",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured timeout\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.gettimeout.php\n * @return int The configured timeout as an integer.\n *\/"
            },
            {
                "name": "setTimeout",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the timeout.\n * @link http:\/\/www.php.net\/manual\/en\/amqpconnection.settimeout.php\n * @param timeout float <p>\n * The timeout used to connect to the AMQP broker.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getReadTimeout",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setReadTimeout",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param timeout\n *\/"
            },
            {
                "name": "getWriteTimeout",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setWriteTimeout",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param timeout\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPChannel",
        "fqn": "\\AMQPChannel",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "amqp_connection",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an instance of an AMQPChannel object\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.construct.php\n * @param amqp_connection\n *\/"
            },
            {
                "name": "isConnected",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check the channel connection\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.isconnected.php\n * @return void\n *\/"
            },
            {
                "name": "getChannelId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setPrefetchSize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the window size to prefetch from the broker\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.setprefetchsize.php\n * @param size int <p>\n * The window size, in octets, to prefetch.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPrefetchSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setPrefetchCount",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the number of messages to prefetch from the broker\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.setprefetchcount.php\n * @param count int <p>\n * The number of messages to prefetch.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPrefetchCount",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "qos",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the Quality Of Service settings for the given channel\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.qos.php\n * @param size int <p>\n * The window size, in octets, to prefetch.\n * <\/p>\n * @param count int <p>\n * The number of messages to prefetch.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "startTransaction",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Start a transaction\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.starttransaction.php\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "commitTransaction",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Commit a pending transaction\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.committransaction.php\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "rollbackTransaction",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rollback a transaction\n * @link http:\/\/www.php.net\/manual\/en\/amqpchannel.rollbacktransaction.php\n * @return void Returns true on success or false on failure.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPQueue",
        "fqn": "\\AMQPQueue",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "amqp_channel",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an instance of an AMQPQueue object\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.construct.php\n * @param amqp_channel\n *\/"
            },
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured name\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.getname.php\n * @return string The configured name as a string.\n *\/"
            },
            {
                "name": "setName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "queue_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the queue name\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.setname.php\n * @param queue_name string <p>\n * The name of the queue as a string.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the flag bitmask\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.getflags.php\n * @return int An integer bitmask of all the flags currently set on this exchange object.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the queue flags\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.setflags.php\n * @param flags int <p>\n * A bitmask of flags. This call currently only supports a bitmask of the following flags: AMQP_DURABLE, AMQP_PASSIVE, AMQP_EXCLUSIVE, AMQP_AUTODELETE.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getArgument",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the argument associated with the given key\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.getargument.php\n * @param key string <p>\n * The key to look up.\n * <\/p>\n * @return mixed The string or integer value associated with the given key, or false if the key is not set.\n *\/"
            },
            {
                "name": "getArguments",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get all arguments set on the given queue\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.getarguments.php\n * @return array An array containing all of the set key\/value pairs.\n *\/"
            },
            {
                "name": "setArgument",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the value for the given key\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.setargument.php\n * @param key string <p>\n * The key to set.\n * <\/p>\n * @param value mixed <p>\n * The value to set.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setArguments",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arguments",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set all arguments on the queue\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.setarguments.php\n * @param arguments array <p>\n * An array of key\/value pairs of arguments.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "declareQueue",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "bind",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exchange_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "routing_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Bind the given queue to a routing key on an exchange.\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.bind.php\n * @param exchange_name string <p>\n * The exchange name on which to bind.\n * <\/p>\n * @param routing_key string <p>\n * The routing key to which to bind.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Retrieve the next message from the queue.\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.get.php\n * @param flags int[optional] <p>\n * A bitmask of supported flags for the method call. Currently, the only the supported flag is AMQP_AUTOACK. If this value is not provided, it will use the value of amqp.auto_ack.\n * <\/p>\n * @return mixed An instance of AMQPEnvelope representing the message pulled from the queue, or false.\n *\/"
            },
            {
                "name": "consume",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Consume messages from a queue\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.consume.php\n * @param callback callable <p>\n * A callback function to which the consumed message will be passed. The function must accept at a minimum one parameter, an AMQPEnvelope object,\n * and an optional second parameter the AMQPQueue from which the message was consumed.\n * <\/p>\n * <p>\n * The AMQPQueue::consume will not return the processing thread back to the PHP script until the callback function returns false.\n * <\/p>\n * @param flags int[optional] <p>\n * A bitmask of any of the flags: AMQP_NOACK.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "ack",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delivery_tag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Acknowledge the receipt of a message\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.ack.php\n * @param delivery_tag int <p>\n * The message delivery tag of which to acknowledge receipt.\n * <\/p>\n * @param flags int[optional] <p>\n * The only valid flag that can be passed is AMQP_MULTIPLE.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "nack",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delivery_tag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Mark a message as explicitly not acknowledged.\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.nack.php\n * @param delivery_tag string <p>\n * The delivery tag by which to identify the message.\n * <\/p>\n * @param flags string[optional] <p>\n * A bitmask of flags.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "reject",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delivery_tag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param delivery_tag\n * @param flags[optional]\n *\/"
            },
            {
                "name": "purge",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Purge the contents of a queue\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.purge.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cancel",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "consumer_tag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Cancel a queue binding.\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.cancel.php\n * @param consumer_tag string[optional] <p>\n * The queue name to cancel, if the queue object is not already representative of a queue.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Delete a queue and its contents.\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.delete.php\n * @param flags[optional]\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "unbind",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exchange_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "routing_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Unbind the queue from a routing key.\n * @link http:\/\/www.php.net\/manual\/en\/amqpqueue.unbind.php\n * @param exchange_name string <p>\n * The name of the exchange on which the queue is bound.\n * <\/p>\n * @param routing_key string <p>\n * The binding routing key used by the queue.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPExchange",
        "fqn": "\\AMQPExchange",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "amqp_channel",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an instance of AMQPExchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.construct.php\n * @param amqp_channel\n *\/"
            },
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured name\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.getname.php\n * @return string The configured name as a string.\n *\/"
            },
            {
                "name": "setName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exchange_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the name of the exchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.setname.php\n * @param exchange_name string <p>\n * The name of the exchange to set as string.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the flag bitmask\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.getflags.php\n * @return int An integer bitmask of all the flags currently set on this exchange object.\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the flags on an exchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.setflags.php\n * @param flags int <p>\n * A bitmask of flags. This call currently only considers the following\n * flags: AMQP_DURABLE,\n * AMQP_PASSIVE.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the configured type\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.gettype.php\n * @return string The configured type as a string.\n *\/"
            },
            {
                "name": "setType",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exchange_type",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the type of the exchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.settype.php\n * @param exchange_type string <p>\n * The type of exchange as a string.\n * <\/p>\n * @return string Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getArgument",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the argument associated with the given key\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.getargument.php\n * @param key string <p>\n * The key to look up.\n * <\/p>\n * @return mixed The string or integer value associated with the given key, or false if the key is not set.\n *\/"
            },
            {
                "name": "getArguments",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get all arguments set on the given exchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.getarguments.php\n * @return array An array containing all of the set key\/value pairs.\n *\/"
            },
            {
                "name": "setArgument",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the value for the given key\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.setargument.php\n * @param key string <p>\n * The key to set.\n * <\/p>\n * @param value mixed <p>\n * The value to set.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setArguments",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arguments",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set all arguments on the exchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.setarguments.php\n * @param arguments array <p>\n * An array of key\/value pairs of arguments.\n * <\/p>\n * @return void Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "declareExchange",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "bind",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "destination_exchange_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "source_exchange_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "routing_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Bind to another exchange\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.bind.php\n * @param destination_exchange_name string <p>\n * The name of the destination exchange in the binding.\n * <\/p>\n * @param source_exchange_name string <p>\n * The name of the source exchange in the binding.\n * <\/p>\n * @param routing_key string <p>\n * The routing key to use as a binding.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Delete the exchange from the broker.\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.delete.php\n * @param flags int[optional] <p>\n * Optionally AMQP_IFUNUSED can be specified to indicate the exchange\n * should not be deleted until no clients are connected to it.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "publish",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "routing_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "attributes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Publish a message to an exchange.\n * @link http:\/\/www.php.net\/manual\/en\/amqpexchange.publish.php\n * @param message string <p>\n * The message to publish.\n * <\/p>\n * @param routing_key string <p>\n * The routing key to which to publish.\n * <\/p>\n * @param flags int[optional] <p>\n * One or more of AMQP_MANDATORY and\n * AMQP_IMMEDIATE.\n * <\/p>\n * @param attributes array[optional] <p>\n * <table>\n * Supported indexes\n * <tr valign=\"top\">\n * <td>key<\/td>\n * <td>Description<\/td>\n * <td>Default value<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>content_type<\/td>\n * <td><\/td>\n * <td>text\/plain<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>content_encoding<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>message_id<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>user_id<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>app_id<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>delivery_mode<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>priority<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>timestamp<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>expiration<\/td>\n * <td>time in milliseconds<\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>type<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>reply_to<\/td>\n * <td><\/td>\n * <td>NULL<\/td>\n * <\/tr>\n * <tr valign=\"top\">\n * <td>headers<\/td>\n * <td>custom attributes to pass along with message<\/td>\n * <td>array<\/td>\n * <\/tr>\n * <\/table>\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPEnvelope",
        "fqn": "\\AMQPEnvelope",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getBody",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message body\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getbody.php\n * @return string The contents of the message body.\n *\/"
            },
            {
                "name": "getRoutingKey",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message routing key\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getroutingkey.php\n * @return string The message routing key.\n *\/"
            },
            {
                "name": "getDeliveryTag",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message delivery tag\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getdeliverytag.php\n * @return string The delivery tag of the message.\n *\/"
            },
            {
                "name": "getDeliveryMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getExchangeName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "isRedelivery",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Whether this is a redelivery of the message\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.isredelivery.php\n * @return bool true if this is a redelivery, false otherwise.\n *\/"
            },
            {
                "name": "getContentType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message contenttype\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getcontenttype.php\n * @return string The content type of the message.\n *\/"
            },
            {
                "name": "getContentEncoding",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message contentencoding\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getcontentencoding.php\n * @return string The content encoding of the message.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message type\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.gettype.php\n * @return string The message type.\n *\/"
            },
            {
                "name": "getTimestamp",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message timestamp\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.gettimestamp.php\n * @return string The message timestamp.\n *\/"
            },
            {
                "name": "getPriority",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message priority\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getpriority.php\n * @return string The message priority.\n *\/"
            },
            {
                "name": "getExpiration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message expiration\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getexpiration.php\n * @return string The message expiration.\n *\/"
            },
            {
                "name": "getUserId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message user id\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getuserid.php\n * @return string The message user id.\n *\/"
            },
            {
                "name": "getAppId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message appid\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getappid.php\n * @return string The application id of the message.\n *\/"
            },
            {
                "name": "getMessageId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message id\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getmessageid.php\n * @return string The message id.\n *\/"
            },
            {
                "name": "getReplyTo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message replyto\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getreplyto.php\n * @return string The contents of the reply to field.\n *\/"
            },
            {
                "name": "getCorrelationId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message correlation id\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getcorrelationid.php\n * @return string The correlation id of the message.\n *\/"
            },
            {
                "name": "getHeaders",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the message headers\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getheaders.php\n * @return array An array of key value pairs associated with the message.\n *\/"
            },
            {
                "name": "getHeader",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "header_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get a specific message header\n * @link http:\/\/www.php.net\/manual\/en\/amqpenvelope.getheader.php\n * @param header_key string\n * @return string The contents of the specified header or false if not set.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPException",
        "fqn": "\\AMQPException",
        "type": 0,
        "extends": "Exception",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPConnectionException",
        "fqn": "\\AMQPConnectionException",
        "type": 0,
        "extends": "AMQPException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPChannelException",
        "fqn": "\\AMQPChannelException",
        "type": 0,
        "extends": "AMQPException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPQueueException",
        "fqn": "\\AMQPQueueException",
        "type": 0,
        "extends": "AMQPException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AMQPExchangeException",
        "fqn": "\\AMQPExchangeException",
        "type": 0,
        "extends": "AMQPException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_NOPARAM",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_DURABLE",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_PASSIVE",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_EXCLUSIVE",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_AUTODELETE",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_INTERNAL",
        "value": 32
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_NOLOCAL",
        "value": 64
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_AUTOACK",
        "value": 128
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_IFEMPTY",
        "value": 256
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_IFUNUSED",
        "value": 512
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_MANDATORY",
        "value": 1024
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_IMMEDIATE",
        "value": 2048
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_MULTIPLE",
        "value": 4096
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_NOWAIT",
        "value": 8192
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_REQUEUE",
        "value": 16384
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_EX_TYPE_DIRECT",
        "value": "direct"
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_EX_TYPE_FANOUT",
        "value": "fanout"
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_EX_TYPE_TOPIC",
        "value": "topic"
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_EX_TYPE_HEADERS",
        "value": "headers"
    },
    {
        "stmtType": "Constant",
        "name": "AMQP_OS_SOCKET_TIMEOUT_ERRNO",
        "value": 536870947
    }
]
