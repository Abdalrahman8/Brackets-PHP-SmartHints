[
    {
        "stmtType": "Class",
        "name": "DOMException",
        "fqn": "\\DOMException",
        "type": 0,
        "extends": "Exception",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [
            {
                "name": "code",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMStringList",
        "fqn": "\\DOMStringList",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param index\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNameList",
        "fqn": "\\DOMNameList",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param index\n *\/"
            },
            {
                "name": "getNamespaceURI",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param index\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMImplementationList",
        "fqn": "\\DOMImplementationList",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param index\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMImplementationSource",
        "fqn": "\\DOMImplementationSource",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "getDomimplementation",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "features",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param features\n *\/"
            },
            {
                "name": "getDomimplementations",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "features",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param features\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMImplementation",
        "fqn": "\\DOMImplementation",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "hasFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Test if the DOM implementation implements a specific feature\n * @link http:\/\/www.php.net\/manual\/en\/domimplementation.hasfeature.php\n * @param feature string <p>\n * The feature to test.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test. In\n * level 2, this can be either 2.0 or\n * 1.0.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "createDocumentType",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "publicId",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "systemId",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Creates an empty DOMDocumentType object\n * @link http:\/\/www.php.net\/manual\/en\/domimplementation.createdocumenttype.php\n * @param qualifiedName string[optional] <p>\n * The qualified name of the document type to create.\n * <\/p>\n * @param publicId string[optional] <p>\n * The external subset public identifier.\n * <\/p>\n * @param systemId string[optional] <p>\n * The external subset system identifier.\n * <\/p>\n * @return DOMDocumentType A new DOMDocumentType node with its\n * ownerDocument set to &null;.\n *\/"
            },
            {
                "name": "createDocument",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "doctype",
                        "type": "DOMDocumentType",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Creates a DOMDocument object of the specified type with its document element\n * @link http:\/\/www.php.net\/manual\/en\/domimplementation.createdocument.php\n * @param namespaceURI string[optional] <p>\n * The namespace URI of the document element to create.\n * <\/p>\n * @param qualifiedName string[optional] <p>\n * The qualified name of the document element to create.\n * <\/p>\n * @param doctype DOMDocumentType[optional] <p>\n * The type of document to create or &null;.\n * <\/p>\n * @return DOMDocument A new DOMDocument object. If\n * namespaceURI, qualifiedName,\n * and doctype are null, the returned\n * DOMDocument is empty with no document element\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNode",
        "fqn": "\\DOMNode",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNameSpaceNode",
        "fqn": "\\DOMNameSpaceNode",
        "type": 0,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDocumentFragment",
        "fqn": "\\DOMDocumentFragment",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "appendXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Append raw XML data\n * @link http:\/\/www.php.net\/manual\/en\/domdocumentfragment.appendxml.php\n * @param data string <p>\n * XML to append.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDocument",
        "fqn": "\\DOMDocument",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "createElement",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create new element node\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createelement.php\n * @param name string <p>\n * The tag name of the element.\n * <\/p>\n * @param value string[optional] <p>\n * The value of the element. By default, an empty element will be created.\n * The value can also be set later with DOMElement::$nodeValue.\n * <\/p>\n * @return DOMElement a new instance of class DOMElement or false\n * if an error occurred.\n *\/"
            },
            {
                "name": "createDocumentFragment",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create new document fragment\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createdocumentfragment.php\n * @return DOMDocumentFragment The new DOMDocumentFragment or false if an error occurred.\n *\/"
            },
            {
                "name": "createTextNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "content",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create new text node\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createtextnode.php\n * @param content string <p>\n * The content of the text.\n * <\/p>\n * @return DOMText The new DOMText or false if an error occurred.\n *\/"
            },
            {
                "name": "createComment",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create new comment node\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createcomment.php\n * @param data string <p>\n * The content of the comment.\n * <\/p>\n * @return DOMComment The new DOMComment or false if an error occurred.\n *\/"
            },
            {
                "name": "createCDATASection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create new cdata node\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createcdatasection.php\n * @param data string <p>\n * The content of the cdata.\n * <\/p>\n * @return DOMCDATASection The new DOMCDATASection or false if an error occurred.\n *\/"
            },
            {
                "name": "createProcessingInstruction",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "target",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Creates new PI node\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createprocessinginstruction.php\n * @param target string <p>\n * The target of the processing instruction.\n * <\/p>\n * @param data string[optional] <p>\n * The content of the processing instruction.\n * <\/p>\n * @return DOMProcessingInstruction The new DOMProcessingInstruction or false if an error occurred.\n *\/"
            },
            {
                "name": "createAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create new attribute\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createattribute.php\n * @param name string <p>\n * The name of the attribute.\n * <\/p>\n * @return DOMAttr The new DOMAttr or false if an error occurred.\n *\/"
            },
            {
                "name": "createEntityReference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create new entity reference node\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createentityreference.php\n * @param name string <p>\n * The content of the entity reference, e.g. the entity reference minus\n * the leading &amp; and the trailing\n * ; characters.\n * <\/p>\n * @return DOMEntityReference The new DOMEntityReference or false if an error\n * occurred.\n *\/"
            },
            {
                "name": "getElementsByTagName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Searches for all elements with given local tag name\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.getelementsbytagname.php\n * @param name string <p>\n * The local name (without namespace) of the tag to match on. The special value *\n * matches all tags.\n * <\/p>\n * @return DOMNodeList A new DOMNodeList object containing all the matched\n * elements.\n *\/"
            },
            {
                "name": "importNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "importedNode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Import node into current document\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.importnode.php\n * @param importedNode DOMNode <p>\n * The node to import.\n * <\/p>\n * @param deep bool[optional] <p>\n * If set to true, this method will recursively import the subtree under\n * the importedNode.\n * <\/p>\n * <p>\n * To copy the nodes attributes deep needs to be set to true\n * <\/p>\n * @return DOMNode The copied node or false, if it cannot be copied.\n *\/"
            },
            {
                "name": "createElementNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create new element node with an associated namespace\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createelementns.php\n * @param namespaceURI string <p>\n * The URI of the namespace.\n * <\/p>\n * @param qualifiedName string <p>\n * The qualified name of the element, as prefix:tagname.\n * <\/p>\n * @param value string[optional] <p>\n * The value of the element. By default, an empty element will be created.\n * You can also set the value later with DOMElement::$nodeValue.\n * <\/p>\n * @return DOMElement The new DOMElement or false if an error occurred.\n *\/"
            },
            {
                "name": "createAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create new attribute node with an associated namespace\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.createattributens.php\n * @param namespaceURI string <p>\n * The URI of the namespace.\n * <\/p>\n * @param qualifiedName string <p>\n * The tag name and prefix of the attribute, as prefix:tagname.\n * <\/p>\n * @return DOMAttr The new DOMAttr or false if an error occurred.\n *\/"
            },
            {
                "name": "getElementsByTagNameNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Searches for all elements with given tag name in specified namespace\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.getelementsbytagnamens.php\n * @param namespaceURI string <p>\n * The namespace URI of the elements to match on.\n * The special value * matches all namespaces.\n * <\/p>\n * @param localName string <p>\n * The local name of the elements to match on.\n * The special value * matches all local names.\n * <\/p>\n * @return DOMNodeList A new DOMNodeList object containing all the matched\n * elements.\n *\/"
            },
            {
                "name": "getElementById",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "elementId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Searches for an element with a certain id\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.getelementbyid.php\n * @param elementId string <p>\n * The unique id value for an element.\n * <\/p>\n * @return DOMElement the DOMElement or &null; if the element is\n * not found.\n *\/"
            },
            {
                "name": "adoptNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param source DOMNode\n *\/"
            },
            {
                "name": "normalizeDocument",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the document\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.normalizedocument.php\n * @return void\n *\/"
            },
            {
                "name": "renameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param node DOMNode\n * @param namespaceURI\n * @param qualifiedName\n *\/"
            },
            {
                "name": "load",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Load XML from a file\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.load.php\n * @param filename string <p>\n * The path to the XML document.\n * <\/p>\n * @param options int[optional] <p>\n * Bitwise OR\n * of the libxml option constants.\n * <\/p>\n * @return mixed Returns true on success or false on failure. If called statically, returns a\n * DOMDocument or false on failure.\n *\/"
            },
            {
                "name": "save",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Dumps the internal XML tree back into a file\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.save.php\n * @param filename string <p>\n * The path to the saved XML document.\n * <\/p>\n * @param options int[optional] <p>\n * Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.\n * <\/p>\n * @return int the number of bytes written or false if an error occurred.\n *\/"
            },
            {
                "name": "loadXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Load XML from a string\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.loadxml.php\n * @param source string <p>\n * The string containing the XML.\n * <\/p>\n * @param options int[optional] <p>\n * Bitwise OR\n * of the libxml option constants.\n * <\/p>\n * @return mixed Returns true on success or false on failure. If called statically, returns a\n * DOMDocument or false on failure.\n *\/"
            },
            {
                "name": "saveXML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Dumps the internal XML tree back into a string\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.savexml.php\n * @param node DOMNode[optional] <p>\n * Use this parameter to output only a specific node without XML declaration\n * rather than the entire document.\n * <\/p>\n * @param options int[optional] <p>\n * Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.\n * <\/p>\n * @return string the XML, or false if an error occurred.\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "encoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new DOMDocument object\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.construct.php\n * @param version[optional]\n * @param encoding[optional]\n *\/"
            },
            {
                "name": "validate",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Validates the document based on its DTD\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.validate.php\n * @return bool Returns true on success or false on failure.\n * If the document have no DTD attached, this method will return false.\n *\/"
            },
            {
                "name": "xinclude",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Substitutes XIncludes in a DomDocument Object\n * @link http:\/\/www.php.net\/manual\/en\/function.domdocument-xinclude.php\n * @param options int[optional] <p>\n * libxml parameters. Available\n * since PHP 5.1.0 and Libxml 2.6.7.\n * <\/p>\n * @return int the number of XIncludes in the document, -1 if some processing failed,\n * or false if there were no substitutions.\n *\/"
            },
            {
                "name": "loadHTML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Load HTML from a string\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.loadhtml.php\n * @param source string <p>\n * The HTML string.\n * <\/p>\n * @param options int[optional] <p>\n * Since PHP 5.4.0 and Libxml 2.6.0, you may also use the\n * options parameter to specify additional Libxml parameters.\n * <\/p>\n * @return bool Returns true on success or false on failure. If called statically, returns a\n * DOMDocument or false on failure.\n *\/"
            },
            {
                "name": "loadHTMLFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Load HTML from a file\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.loadhtmlfile.php\n * @param filename string <p>\n * The path to the HTML file.\n * <\/p>\n * @param options int[optional] <p>\n * Since PHP 5.4.0 and Libxml 2.6.0, you may also use the\n * options parameter to specify additional Libxml parameters.\n * <\/p>\n * @return bool Returns true on success or false on failure. If called statically, returns a\n * DOMDocument or false on failure.\n *\/"
            },
            {
                "name": "saveHTML",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Dumps the internal document into a string using HTML formatting\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.savehtml.php\n * @param node DOMNode[optional] <p>\n * Optional parameter to output a subset of the document.\n * <\/p>\n * @return string the HTML, or false if an error occurred.\n *\/"
            },
            {
                "name": "saveHTMLFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Dumps the internal document into a file using HTML formatting\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.savehtmlfile.php\n * @param filename string <p>\n * The path to the saved HTML document.\n * <\/p>\n * @return int the number of bytes written or false if an error occurred.\n *\/"
            },
            {
                "name": "schemaValidate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Validates a document based on a schema\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.schemavalidate.php\n * @param filename string <p>\n * The path to the schema.\n * <\/p>\n * @param flags int[optional] <p>\n * A bitmask of Libxml schema validation flags. Currently the only supported value is LIBXML_SCHEMA_CREATE. Available since PHP 5.5.2 and Libxml 2.6.14.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "schemaValidateSource",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Validates a document based on a schema\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.schemavalidatesource.php\n * @param source string <p>\n * A string containing the schema.\n * <\/p>\n * @param flags int[optional] <p>\n * A bitmask of Libxml schema validation flags. Currently the only supported value is LIBXML_SCHEMA_CREATE. Available since PHP 5.5.2 and Libxml 2.6.14.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "relaxNGValidate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Performs relaxNG validation on the document\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.relaxngvalidate.php\n * @param filename string <p>\n * The RNG file.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "relaxNGValidateSource",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Performs relaxNG validation on the document\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.relaxngvalidatesource.php\n * @param source string <p>\n * A string containing the RNG schema.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "registerNodeClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "baseclass",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "extendedclass",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Register extended class used to create base node type\n * @link http:\/\/www.php.net\/manual\/en\/domdocument.registernodeclass.php\n * @param baseclass string <p>\n * The DOM class that you want to extend. You can find a list of these\n * classes in the chapter introduction.\n * <\/p>\n * @param extendedclass string <p>\n * Your extended class name. If &null; is provided, any previously\n * registered class extending baseclass will\n * be removed.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNodeList",
        "fqn": "\\DOMNodeList",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Retrieves a node specified by index\n * @link http:\/\/www.php.net\/manual\/en\/domnodelist.item.php\n * @param index int <p>\n * Index of the node into the collection.\n * <\/p>\n * @return DOMNode The node at the indexth position in the\n * DOMNodeList, or &null; if that is not a valid\n * index.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNamedNodeMap",
        "fqn": "\\DOMNamedNodeMap",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "getNamedItem",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Retrieves a node specified by name\n * @link http:\/\/www.php.net\/manual\/en\/domnamednodemap.getnameditem.php\n * @param name string <p>\n * The nodeName of the node to retrieve.\n * <\/p>\n * @return DOMNode A node (of any type) with the specified nodeName, or\n * &null; if no node is found.\n *\/"
            },
            {
                "name": "setNamedItem",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "removeNamedItem",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param name[optional]\n *\/"
            },
            {
                "name": "item",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Retrieves a node specified by index\n * @link http:\/\/www.php.net\/manual\/en\/domnamednodemap.item.php\n * @param index int <p>\n * Index into this map.\n * <\/p>\n * @return DOMNode The node at the indexth position in the map, or &null;\n * if that is not a valid index (greater than or equal to the number of nodes\n * in this map).\n *\/"
            },
            {
                "name": "getNamedItemNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Retrieves a node specified by local name and namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnamednodemap.getnameditemns.php\n * @param namespaceURI string <p>\n * The namespace URI of the node to retrieve.\n * <\/p>\n * @param localName string <p>\n * The local name of the node to retrieve.\n * <\/p>\n * @return DOMNode A node (of any type) with the specified local name and namespace URI, or\n * &null; if no node is found.\n *\/"
            },
            {
                "name": "setNamedItemNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode[optional]\n *\/"
            },
            {
                "name": "removeNamedItemNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param namespaceURI[optional]\n * @param localName[optional]\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMCharacterData",
        "fqn": "\\DOMCharacterData",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Extracts a range of data from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param offset int <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param count int <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of offset\n * and count exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Append the string to the end of the character data of the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param data string <p>\n * The string to append.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param offset int <p>\n * The character offset at which to insert.\n * <\/p>\n * @param data string <p>\n * The string to insert.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Remove a range of characters from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param offset int <p>\n * The offset from which to start removing.\n * <\/p>\n * @param count int <p>\n * The number of characters to delete. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param offset int <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param count int <p>\n * The number of characters to replace. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param data string <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMAttr",
        "fqn": "\\DOMAttr",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "isId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if attribute is a defined ID\n * @link http:\/\/www.php.net\/manual\/en\/domattr.isid.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new <classname>DOMAttr<\/classname> object\n * @link http:\/\/www.php.net\/manual\/en\/domattr.construct.php\n * @param name\n * @param value[optional]\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMElement",
        "fqn": "\\DOMElement",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns value of attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.getattribute.php\n * @param name string <p>\n * The name of the attribute.\n * <\/p>\n * @return string The value of the attribute, or an empty string if no attribute with the\n * given name is found.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setattribute.php\n * @param name string <p>\n * The name of the attribute.\n * <\/p>\n * @param value string <p>\n * The value of the attribute.\n * <\/p>\n * @return DOMAttr The new DOMAttr or false if an error occurred.\n *\/"
            },
            {
                "name": "removeAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.removeattribute.php\n * @param name string <p>\n * The name of the attribute.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns attribute node\n * @link http:\/\/www.php.net\/manual\/en\/domelement.getattributenode.php\n * @param name string <p>\n * The name of the attribute.\n * <\/p>\n * @return DOMAttr The attribute node.\n *\/"
            },
            {
                "name": "setAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new attribute node to element\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setattributenode.php\n * @param attr DOMAttr <p>\n * The attribute node.\n * <\/p>\n * @return DOMAttr old node if the attribute has been replaced or &null;.\n *\/"
            },
            {
                "name": "removeAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.removeattributenode.php\n * @param oldnode DOMAttr <p>\n * The attribute node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getElementsByTagName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets elements by tagname\n * @link http:\/\/www.php.net\/manual\/en\/domelement.getelementsbytagname.php\n * @param name string <p>\n * The tag name. Use * to return all elements within\n * the element tree.\n * <\/p>\n * @return DOMNodeList This function returns a new instance of the class\n * DOMNodeList of all matched elements.\n *\/"
            },
            {
                "name": "getAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns value of attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.getattributens.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @param localName string <p>\n * The local name.\n * <\/p>\n * @return string The value of the attribute, or an empty string if no attribute with the\n * given localName and namespaceURI\n * is found.\n *\/"
            },
            {
                "name": "setAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "qualifiedName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setattributens.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @param qualifiedName string <p>\n * The qualified name of the attribute, as prefix:tagname.\n * <\/p>\n * @param value string <p>\n * The value of the attribute.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "removeAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes attribute\n * @link http:\/\/www.php.net\/manual\/en\/domelement.removeattributens.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @param localName string <p>\n * The local name.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getAttributeNodeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns attribute node\n * @link http:\/\/www.php.net\/manual\/en\/domelement.getattributenodens.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @param localName string <p>\n * The local name.\n * <\/p>\n * @return DOMAttr The attribute node.\n *\/"
            },
            {
                "name": "setAttributeNodeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new attribute node to element\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setattributenodens.php\n * @param attr DOMAttr <p>\n * The attribute node.\n * <\/p>\n * @return DOMAttr the old node if the attribute has been replaced.\n *\/"
            },
            {
                "name": "getElementsByTagNameNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get elements by namespaceURI and localName\n * @link http:\/\/www.php.net\/manual\/en\/domelement.getelementsbytagnamens.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @param localName string <p>\n * The local name. Use * to return all elements within\n * the element tree.\n * <\/p>\n * @return DOMNodeList This function returns a new instance of the class\n * DOMNodeList of all matched elements in the order in\n * which they are encountered in a preorder traversal of this element tree.\n *\/"
            },
            {
                "name": "hasAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks to see if attribute exists\n * @link http:\/\/www.php.net\/manual\/en\/domelement.hasattribute.php\n * @param name string <p>\n * The attribute name.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks to see if attribute exists\n * @link http:\/\/www.php.net\/manual\/en\/domelement.hasattributens.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @param localName string <p>\n * The local name.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setIdAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Declares the attribute specified by name to be of type ID\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setidattribute.php\n * @param name string <p>\n * The name of the attribute.\n * <\/p>\n * @param isId bool <p>\n * Set it to true if you want name to be of type\n * ID, false otherwise.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setIdAttributeNS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localName",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Declares the attribute specified by local name and namespace URI to be of type ID\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setidattributens.php\n * @param namespaceURI string <p>\n * The namespace URI of the attribute.\n * <\/p>\n * @param localName string <p>\n * The local name of the attribute, as prefix:tagname.\n * <\/p>\n * @param isId bool <p>\n * Set it to true if you want name to be of type\n * ID, false otherwise.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setIdAttributeNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": "DOMAttr",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Declares the attribute specified by node to be of type ID\n * @link http:\/\/www.php.net\/manual\/en\/domelement.setidattributenode.php\n * @param attr DOMAttr <p>\n * The attribute node.\n * <\/p>\n * @param isId bool <p>\n * Set it to true if you want name to be of type\n * ID, false otherwise.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new DOMElement object\n * @link http:\/\/www.php.net\/manual\/en\/domelement.construct.php\n * @param name\n * @param value[optional]\n * @param uri[optional]\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMText",
        "fqn": "\\DOMText",
        "type": 0,
        "extends": "DOMCharacterData",
        "methods": [
            {
                "name": "splitText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Breaks this node into two nodes at the specified offset\n * @link http:\/\/www.php.net\/manual\/en\/domtext.splittext.php\n * @param offset int <p>\n * The offset at which to split, starting from 0.\n * <\/p>\n * @return DOMText The new node of the same type, which contains all the content at and after the\n * offset.\n *\/"
            },
            {
                "name": "isWhitespaceInElementContent",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Indicates whether this text node contains whitespace\n * @link http:\/\/www.php.net\/manual\/en\/domtext.iswhitespaceinelementcontent.php\n * @return bool true if node contains zero or more whitespace characters and\n * nothing else. Returns false otherwise.\n *\/"
            },
            {
                "name": "isElementContentWhitespace",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "replaceWholeText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "content",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param content\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new <classname>DOMText<\/classname> object\n * @link http:\/\/www.php.net\/manual\/en\/domtext.construct.php\n * @param value[optional]\n *\/"
            },
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Extracts a range of data from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param offset int <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param count int <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of offset\n * and count exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Append the string to the end of the character data of the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param data string <p>\n * The string to append.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param offset int <p>\n * The character offset at which to insert.\n * <\/p>\n * @param data string <p>\n * The string to insert.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Remove a range of characters from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param offset int <p>\n * The offset from which to start removing.\n * <\/p>\n * @param count int <p>\n * The number of characters to delete. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param offset int <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param count int <p>\n * The number of characters to replace. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param data string <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMComment",
        "fqn": "\\DOMComment",
        "type": 0,
        "extends": "DOMCharacterData",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new DOMComment object\n * @link http:\/\/www.php.net\/manual\/en\/domcomment.construct.php\n * @param value[optional]\n *\/"
            },
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Extracts a range of data from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param offset int <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param count int <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of offset\n * and count exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Append the string to the end of the character data of the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param data string <p>\n * The string to append.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param offset int <p>\n * The character offset at which to insert.\n * <\/p>\n * @param data string <p>\n * The string to insert.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Remove a range of characters from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param offset int <p>\n * The offset from which to start removing.\n * <\/p>\n * @param count int <p>\n * The number of characters to delete. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param offset int <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param count int <p>\n * The number of characters to replace. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param data string <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMTypeinfo",
        "fqn": "\\DOMTypeinfo",
        "type": 0,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMUserDataHandler",
        "fqn": "\\DOMUserDataHandler",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "handle",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDomError",
        "fqn": "\\DOMDomError",
        "type": 0,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMErrorHandler",
        "fqn": "\\DOMErrorHandler",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "handleError",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "error",
                        "type": "DOMDomError",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param error DOMDomError\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMLocator",
        "fqn": "\\DOMLocator",
        "type": 0,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMConfiguration",
        "fqn": "\\DOMConfiguration",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "setParameter",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param name\n * @param value\n *\/"
            },
            {
                "name": "getParameter",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param name[optional]\n *\/"
            },
            {
                "name": "canSetParameter",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param name[optional]\n * @param value[optional]\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMCdataSection",
        "fqn": "\\DOMCdataSection",
        "type": 0,
        "extends": "DOMText",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Constructs a new DOMCdataSection object\n * @link http:\/\/www.php.net\/manual\/en\/domcdatasection.construct.php\n * @param value\n *\/"
            },
            {
                "name": "splitText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Breaks this node into two nodes at the specified offset\n * @link http:\/\/www.php.net\/manual\/en\/domtext.splittext.php\n * @param offset int <p>\n * The offset at which to split, starting from 0.\n * <\/p>\n * @return DOMText The new node of the same type, which contains all the content at and after the\n * offset.\n *\/"
            },
            {
                "name": "isWhitespaceInElementContent",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Indicates whether this text node contains whitespace\n * @link http:\/\/www.php.net\/manual\/en\/domtext.iswhitespaceinelementcontent.php\n * @return bool true if node contains zero or more whitespace characters and\n * nothing else. Returns false otherwise.\n *\/"
            },
            {
                "name": "isElementContentWhitespace",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "replaceWholeText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "content",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param content\n *\/"
            },
            {
                "name": "substringData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Extracts a range of data from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.substringdata.php\n * @param offset int <p>\n * Start offset of substring to extract.\n * <\/p>\n * @param count int <p>\n * The number of characters to extract.\n * <\/p>\n * @return string The specified substring. If the sum of offset\n * and count exceeds the length, then all 16-bit units\n * to the end of the data are returned.\n *\/"
            },
            {
                "name": "appendData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Append the string to the end of the character data of the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.appenddata.php\n * @param data string <p>\n * The string to append.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Insert a string at the specified 16-bit unit offset\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.insertdata.php\n * @param offset int <p>\n * The character offset at which to insert.\n * <\/p>\n * @param data string <p>\n * The string to insert.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "deleteData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Remove a range of characters from the node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.deletedata.php\n * @param offset int <p>\n * The offset from which to start removing.\n * <\/p>\n * @param count int <p>\n * The number of characters to delete. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are deleted.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "replaceData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replace a substring within the DOMCharacterData node\n * @link http:\/\/www.php.net\/manual\/en\/domcharacterdata.replacedata.php\n * @param offset int <p>\n * The offset from which to start replacing.\n * <\/p>\n * @param count int <p>\n * The number of characters to replace. If the sum of\n * offset and count exceeds\n * the length, then all characters to the end of the data are replaced.\n * <\/p>\n * @param data string <p>\n * The string with which the range must be replaced.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMDocumentType",
        "fqn": "\\DOMDocumentType",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMNotation",
        "fqn": "\\DOMNotation",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMEntity",
        "fqn": "\\DOMEntity",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMEntityReference",
        "fqn": "\\DOMEntityReference",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new DOMEntityReference object\n * @link http:\/\/www.php.net\/manual\/en\/domentityreference.construct.php\n * @param name\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMProcessingInstruction",
        "fqn": "\\DOMProcessingInstruction",
        "type": 0,
        "extends": "DOMNode",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new <classname>DOMProcessingInstruction<\/classname> object\n * @link http:\/\/www.php.net\/manual\/en\/domprocessinginstruction.construct.php\n * @param name\n * @param value[optional]\n *\/"
            },
            {
                "name": "insertBefore",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "refnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Adds a new child before a reference node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.insertbefore.php\n * @param newnode DOMNode <p>\n * The new node.\n * <\/p>\n * @param refnode DOMNode[optional] <p>\n * The reference node. If not supplied, newnode is\n * appended to the children.\n * <\/p>\n * @return DOMNode The inserted node.\n *\/"
            },
            {
                "name": "replaceChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Replaces a child\n * @link http:\/\/www.php.net\/manual\/en\/domnode.replacechild.php\n * @param newnode DOMNode <p>\n * The new node. It must be a member of the target document, i.e.\n * created by one of the DOMDocument->createXXX() methods or imported in\n * the document by .\n * <\/p>\n * @param oldnode DOMNode <p>\n * The old node.\n * <\/p>\n * @return DOMNode The old node or false if an error occur.\n *\/"
            },
            {
                "name": "removeChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "oldnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Removes child from list of children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.removechild.php\n * @param oldnode DOMNode <p>\n * The removed child.\n * <\/p>\n * @return DOMNode If the child could be removed the function returns the old child.\n *\/"
            },
            {
                "name": "appendChild",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "newnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Adds new child at the end of the children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.appendchild.php\n * @param newnode DOMNode <p>\n * The appended child.\n * <\/p>\n * @return DOMNode The node added.\n *\/"
            },
            {
                "name": "hasChildNodes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has children\n * @link http:\/\/www.php.net\/manual\/en\/domnode.haschildnodes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "cloneNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "deep",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clones a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.clonenode.php\n * @param deep bool[optional] <p>\n * Indicates whether to copy all descendant nodes. This parameter is\n * defaulted to false.\n * <\/p>\n * @return DOMNode The cloned node.\n *\/"
            },
            {
                "name": "normalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Normalizes the node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.normalize.php\n * @return void\n *\/"
            },
            {
                "name": "isSupported",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if feature is supported for specified version\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issupported.php\n * @param feature string <p>\n * The feature to test. See the example of\n * DOMImplementation::hasFeature for a\n * list of features.\n * <\/p>\n * @param version string <p>\n * The version number of the feature to test.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "hasAttributes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Checks if node has attributes\n * @link http:\/\/www.php.net\/manual\/en\/domnode.hasattributes.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "compareDocumentPosition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param other DOMNode\n *\/"
            },
            {
                "name": "isSameNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "node",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Indicates if two nodes are the same node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.issamenode.php\n * @param node DOMNode <p>\n * The compared node.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "lookupPrefix",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace prefix of the node based on the namespace URI\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupprefix.php\n * @param namespaceURI string <p>\n * The namespace URI.\n * <\/p>\n * @return string The prefix of the namespace.\n *\/"
            },
            {
                "name": "isDefaultNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Checks if the specified namespaceURI is the default namespace or not\n * @link http:\/\/www.php.net\/manual\/en\/domnode.isdefaultnamespace.php\n * @param namespaceURI string <p>\n * The namespace URI to look for.\n * <\/p>\n * @return bool Return true if namespaceURI is the default\n * namespace, false otherwise.\n *\/"
            },
            {
                "name": "lookupNamespaceUri",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the namespace URI of the node based on the prefix\n * @link http:\/\/www.php.net\/manual\/en\/domnode.lookupnamespaceuri.php\n * @param prefix string <p>\n * The prefix of the namespace.\n * <\/p>\n * @return string The namespace URI of the node.\n *\/"
            },
            {
                "name": "isEqualNode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param arg DOMNode\n *\/"
            },
            {
                "name": "getFeature",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "feature",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "version",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param feature\n * @param version\n *\/"
            },
            {
                "name": "setUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "handler",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n * @param data\n * @param handler\n *\/"
            },
            {
                "name": "getUserData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param key\n *\/"
            },
            {
                "name": "getNodePath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get an XPath for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getnodepath.php\n * @return string a string containing the XPath, or &null; in case of an error.\n *\/"
            },
            {
                "name": "getLineNo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get line number for a node\n * @link http:\/\/www.php.net\/manual\/en\/domnode.getlineno.php\n * @return int Always returns the line number where the node was defined in.\n *\/"
            },
            {
                "name": "C14N",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a string\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14n.php\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return string canonicalized nodes as a string or false on failure\n *\/"
            },
            {
                "name": "C14NFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "uri",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "exclusive",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "with_comments",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "xpath",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "ns_prefixes",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Canonicalize nodes to a file\n * @link http:\/\/www.php.net\/manual\/en\/domnode.c14nfile.php\n * @param uri string <p>\n * Path to write the output to.\n * <\/p>\n * @param exclusive bool[optional] <p>\n * Enable exclusive parsing of only the nodes matched by the provided\n * xpath or namespace prefixes.\n * <\/p>\n * @param with_comments bool[optional] <p>\n * Retain comments in output.\n * <\/p>\n * @param xpath array[optional] <p>\n * An array of xpaths to filter the nodes by.\n * <\/p>\n * @param ns_prefixes array[optional] <p>\n * An array of namespace prefixes to filter the nodes by.\n * <\/p>\n * @return int Number of bytes written or false on failure\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMStringExtend",
        "fqn": "\\DOMStringExtend",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "findOffset16",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset32",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param offset32\n *\/"
            },
            {
                "name": "findOffset32",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset16",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param offset16\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DOMXPath",
        "fqn": "\\DOMXPath",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "doc",
                        "type": "DOMDocument",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Creates a new <classname>DOMXPath<\/classname> object\n * @link http:\/\/www.php.net\/manual\/en\/domxpath.construct.php\n * @param doc DOMDocument\n *\/"
            },
            {
                "name": "registerNamespace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "namespaceURI",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Registers the namespace with the <classname>DOMXPath<\/classname> object\n * @link http:\/\/www.php.net\/manual\/en\/domxpath.registernamespace.php\n * @param prefix string <p>\n * The prefix.\n * <\/p>\n * @param namespaceURI string <p>\n * The URI of the namespace.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "query",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "expression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "contextnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "registerNodeNS",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Evaluates the given XPath expression\n * @link http:\/\/www.php.net\/manual\/en\/domxpath.query.php\n * @param expression string <p>\n * The XPath expression to execute.\n * <\/p>\n * @param contextnode DOMNode[optional] <p>\n * The optional contextnode can be specified for\n * doing relative XPath queries. By default, the queries are relative to\n * the root element.\n * <\/p>\n * @param registerNodeNS bool[optional] <p>\n * The optional registerNodeNS can be specified to\n * disable automatic registration of the context node.\n * <\/p>\n * @return DOMNodeList a DOMNodeList containing all nodes matching\n * the given XPath expression. Any expression which\n * does not return nodes will return an empty\n * DOMNodeList.\n * <\/p>\n * <p>\n * If the expression is malformed or the\n * contextnode is invalid,\n * DOMXPath::query returns false.\n *\/"
            },
            {
                "name": "evaluate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "expression",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "contextnode",
                        "type": "DOMNode",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "registerNodeNS",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Evaluates the given XPath expression and returns a typed result if possible\n * @link http:\/\/www.php.net\/manual\/en\/domxpath.evaluate.php\n * @param expression string <p>\n * The XPath expression to execute.\n * <\/p>\n * @param contextnode DOMNode[optional] <p>\n * The optional contextnode can be specified for\n * doing relative XPath queries. By default, the queries are relative to\n * the root element.\n * <\/p>\n * @param registerNodeNS bool[optional] <p>\n * The optional registerNodeNS can be specified to\n * disable automatic registration of the context node.\n * <\/p>\n * @return mixed a typed result if possible or a DOMNodeList\n * containing all nodes matching the given XPath expression.\n * <\/p>\n * <p>\n * If the expression is malformed or the\n * contextnode is invalid,\n * DOMXPath::evaluate returns false.\n *\/"
            },
            {
                "name": "registerPhpFunctions",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "restrict",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Register PHP functions as XPath functions\n * @link http:\/\/www.php.net\/manual\/en\/domxpath.registerphpfunctions.php\n * @param restrict mixed[optional] <p>\n * Use this parameter to only allow certain functions to be called from XPath.\n * <\/p>\n * <p>\n * This parameter can be either a string (a function name) or\n * an array of function names.\n * <\/p>\n * @return void\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "dom_import_simplexml",
        "params": [
            {
                "name": "node",
                "type": "SimpleXMLElement",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Constant",
        "name": "XML_ELEMENT_NODE",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NODE",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "XML_TEXT_NODE",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "XML_CDATA_SECTION_NODE",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "XML_ENTITY_REF_NODE",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "XML_ENTITY_NODE",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "XML_PI_NODE",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "XML_COMMENT_NODE",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "XML_DOCUMENT_NODE",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "XML_DOCUMENT_TYPE_NODE",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "XML_DOCUMENT_FRAG_NODE",
        "value": 11
    },
    {
        "stmtType": "Constant",
        "name": "XML_NOTATION_NODE",
        "value": 12
    },
    {
        "stmtType": "Constant",
        "name": "XML_HTML_DOCUMENT_NODE",
        "value": 13
    },
    {
        "stmtType": "Constant",
        "name": "XML_DTD_NODE",
        "value": 14
    },
    {
        "stmtType": "Constant",
        "name": "XML_ELEMENT_DECL_NODE",
        "value": 15
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_DECL_NODE",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "XML_ENTITY_DECL_NODE",
        "value": 17
    },
    {
        "stmtType": "Constant",
        "name": "XML_NAMESPACE_DECL_NODE",
        "value": 18
    },
    {
        "stmtType": "Constant",
        "name": "XML_LOCAL_NAMESPACE",
        "value": 18
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_CDATA",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_ID",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_IDREF",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_IDREFS",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_ENTITY",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NMTOKEN",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NMTOKENS",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_ENUMERATION",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "XML_ATTRIBUTE_NOTATION",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "DOM_PHP_ERR",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INDEX_SIZE_ERR",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "DOMSTRING_SIZE_ERR",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "DOM_HIERARCHY_REQUEST_ERR",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "DOM_WRONG_DOCUMENT_ERR",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_CHARACTER_ERR",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NO_DATA_ALLOWED_ERR",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NO_MODIFICATION_ALLOWED_ERR",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NOT_FOUND_ERR",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NOT_SUPPORTED_ERR",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INUSE_ATTRIBUTE_ERR",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_STATE_ERR",
        "value": 11
    },
    {
        "stmtType": "Constant",
        "name": "DOM_SYNTAX_ERR",
        "value": 12
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_MODIFICATION_ERR",
        "value": 13
    },
    {
        "stmtType": "Constant",
        "name": "DOM_NAMESPACE_ERR",
        "value": 14
    },
    {
        "stmtType": "Constant",
        "name": "DOM_INVALID_ACCESS_ERR",
        "value": 15
    },
    {
        "stmtType": "Constant",
        "name": "DOM_VALIDATION_ERR",
        "value": 16
    }
]
