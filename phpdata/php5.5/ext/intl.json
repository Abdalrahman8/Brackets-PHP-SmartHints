[
    {
        "stmtType": "Class",
        "name": "Collator",
        "fqn": "\\Collator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arg1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create a collator\n * @link http:\/\/www.php.net\/manual\/en\/collator.construct.php\n * @param arg1\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create a collator\n * @link http:\/\/www.php.net\/manual\/en\/collator.create.php\n * @param locale string <p>\n * The locale containing the required collation rules. Special values for\n * locales can be passed in - if null is passed for the locale, the\n * default locale collation rules will be used. If empty string (\"\") or\n * \"root\" are passed, UCA rules will be used.\n * <\/p>\n * @return Collator Return new instance of Collator object, or &null;\n * on error.\n *\/"
            },
            {
                "name": "compare",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "str2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Compare two Unicode strings\n * @link http:\/\/www.php.net\/manual\/en\/collator.compare.php\n * @param str1 string <p>\n * The first string to compare.\n * <\/p>\n * @param str2 string <p>\n * The second string to compare.\n * <\/p>\n * @return int Return comparison result:<\/p>\n * <p>\n * <p>\n * 1 if str1 is greater than\n * str2 ;\n * <\/p>\n * <p>\n * 0 if str1 is equal to\n * str2;\n * <\/p>\n * <p>\n * -1 if str1 is less than\n * str2 .\n * <\/p>\n * On error\n * boolean\n * false\n * is returned.\n *\/"
            },
            {
                "name": "sort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arr",
                        "type": "array",
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "sort_flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sort array using specified collator\n * @link http:\/\/www.php.net\/manual\/en\/collator.sort.php\n * @param arr array <p>\n * Array of strings to sort.\n * <\/p>\n * @param sort_flag int[optional] <p>\n * Optional sorting type, one of the following:\n * <\/p>\n * <p>\n * <p>\n * Collator::SORT_REGULAR\n * - compare items normally (don't change types)\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "sortWithSortKeys",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arr",
                        "type": "array",
                        "byRef": true,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sort array using specified collator and sort keys\n * @link http:\/\/www.php.net\/manual\/en\/collator.sortwithsortkeys.php\n * @param arr array <p>Array of strings to sort<\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "arr",
                        "type": "array",
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "sort_flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Sort array maintaining index association\n * @link http:\/\/www.php.net\/manual\/en\/collator.asort.php\n * @param arr array <p>Array of strings to sort.<\/p>\n * @param sort_flag int[optional] <p>\n * Optional sorting type, one of the following:\n * <p>\n * Collator::SORT_REGULAR\n * - compare items normally (don't change types)\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get collation attribute value\n * @link http:\/\/www.php.net\/manual\/en\/collator.getattribute.php\n * @param attr int <p>\n * Attribute to get value for.\n * <\/p>\n * @return int Attribute value, or boolean false on error.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "val",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set collation attribute\n * @link http:\/\/www.php.net\/manual\/en\/collator.setattribute.php\n * @param attr int <p>Attribute.<\/p>\n * @param val int <p>\n * Attribute value.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getStrength",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get current collation strength\n * @link http:\/\/www.php.net\/manual\/en\/collator.getstrength.php\n * @return int current collation strength, or boolean false on error.\n *\/"
            },
            {
                "name": "setStrength",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "strength",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set collation strength\n * @link http:\/\/www.php.net\/manual\/en\/collator.setstrength.php\n * @param strength int <p>Strength to set.<\/p>\n * <p>\n * Possible values are:\n * <p>\n * Collator::PRIMARY\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the locale name of the collator\n * @link http:\/\/www.php.net\/manual\/en\/collator.getlocale.php\n * @param type int <p>\n * You can choose between valid and actual locale (\n * Locale::VALID_LOCALE and\n * Locale::ACTUAL_LOCALE,\n * respectively).\n * <\/p>\n * @return string Real locale name from which the collation data comes. If the collator was\n * instantiated from rules or an error occurred, returns\n * boolean false.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get collator's last error code\n * @link http:\/\/www.php.net\/manual\/en\/collator.geterrorcode.php\n * @return int Error code returned by the last Collator API function call.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get text for collator's last error code\n * @link http:\/\/www.php.net\/manual\/en\/collator.geterrormessage.php\n * @return string Description of an error occurred in the last Collator API function call.\n *\/"
            },
            {
                "name": "getSortKey",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get sorting key for a string\n * @link http:\/\/www.php.net\/manual\/en\/collator.getsortkey.php\n * @param str string <p>\n * The string to produce the key from.\n * <\/p>\n * @return string the collation key for the string. Collation keys can be compared directly instead of strings.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DEFAULT_VALUE",
                "value": null,
                "doc": null
            },
            {
                "name": "PRIMARY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SECONDARY",
                "value": 1,
                "doc": null
            },
            {
                "name": "TERTIARY",
                "value": 2,
                "doc": null
            },
            {
                "name": "DEFAULT_STRENGTH",
                "value": 2,
                "doc": null
            },
            {
                "name": "QUATERNARY",
                "value": 3,
                "doc": null
            },
            {
                "name": "IDENTICAL",
                "value": 15,
                "doc": null
            },
            {
                "name": "OFF",
                "value": 16,
                "doc": null
            },
            {
                "name": "ON",
                "value": 17,
                "doc": null
            },
            {
                "name": "SHIFTED",
                "value": 20,
                "doc": null
            },
            {
                "name": "NON_IGNORABLE",
                "value": 21,
                "doc": null
            },
            {
                "name": "LOWER_FIRST",
                "value": 24,
                "doc": null
            },
            {
                "name": "UPPER_FIRST",
                "value": 25,
                "doc": null
            },
            {
                "name": "FRENCH_COLLATION",
                "value": 0,
                "doc": null
            },
            {
                "name": "ALTERNATE_HANDLING",
                "value": 1,
                "doc": null
            },
            {
                "name": "CASE_FIRST",
                "value": 2,
                "doc": null
            },
            {
                "name": "CASE_LEVEL",
                "value": 3,
                "doc": null
            },
            {
                "name": "NORMALIZATION_MODE",
                "value": 4,
                "doc": null
            },
            {
                "name": "STRENGTH",
                "value": 5,
                "doc": null
            },
            {
                "name": "HIRAGANA_QUATERNARY_MODE",
                "value": 6,
                "doc": null
            },
            {
                "name": "NUMERIC_COLLATION",
                "value": 7,
                "doc": null
            },
            {
                "name": "SORT_REGULAR",
                "value": 0,
                "doc": null
            },
            {
                "name": "SORT_STRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "SORT_NUMERIC",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "NumberFormatter",
        "fqn": "\\NumberFormatter",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "style",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param locale\n * @param style\n * @param pattern[optional]\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "style",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a number formatter\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.create.php\n * @param locale string <p>\n * Locale in which the number would be formatted (locale name, e.g. en_CA).\n * <\/p>\n * @param style int <p>\n * Style of the formatting, one of the\n * format style constants. If\n * NumberFormatter::PATTERN_DECIMAL\n * or NumberFormatter::PATTERN_RULEBASED\n * is passed then the number format is opened using the given pattern,\n * which must conform to the syntax described in\n * ICU DecimalFormat\n * documentation or\n * ICU RuleBasedNumberFormat\n * documentation, respectively.\n * <\/p>\n * @param pattern string[optional] <p>\n * Pattern string if the chosen style requires a pattern.\n * <\/p>\n * @return NumberFormatter NumberFormatter object or false on error.\n *\/"
            },
            {
                "name": "format",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Format a number\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.format.php\n * @param value number <p>\n * The value to format. Can be integer or float,\n * other values will be converted to a numeric value.\n * <\/p>\n * @param type int[optional] <p>\n * The\n * formatting type to use.\n * <\/p>\n * @return string the string containing formatted value, or false on error.\n *\/"
            },
            {
                "name": "parse",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Parse a number\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.parse.php\n * @param value string\n * @param type int[optional] <p>\n * The\n * formatting type to use. By default,\n * NumberFormatter::TYPE_DOUBLE is used.\n * <\/p>\n * @param position int[optional] <p>\n * Offset in the string at which to begin parsing. On return, this value\n * will hold the offset at which parsing ended.\n * <\/p>\n * @return mixed The value of the parsed number or false on error.\n *\/"
            },
            {
                "name": "formatCurrency",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "currency",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Format a currency value\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.formatcurrency.php\n * @param value float <p>\n * The numeric currency value.\n * <\/p>\n * @param currency string <p>\n * The 3-letter ISO 4217 currency code indicating the currency to use.\n * <\/p>\n * @return string String representing the formatted currency value.\n *\/"
            },
            {
                "name": "parseCurrency",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "currency",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Parse a currency number\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.parsecurrency.php\n * @param value string\n * @param currency string <p>\n * Parameter to receive the currency name (3-letter ISO 4217 currency\n * code).\n * <\/p>\n * @param position int[optional] <p>\n * Offset in the string at which to begin parsing. On return, this value\n * will hold the offset at which parsing ended.\n * <\/p>\n * @return float The parsed numeric value or false on error.\n *\/"
            },
            {
                "name": "setAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set an attribute\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.setattribute.php\n * @param attr int <p>\n * Attribute specifier - one of the\n * numeric attribute constants.\n * <\/p>\n * @param value int <p>\n * The attribute value.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get an attribute\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.getattribute.php\n * @param attr int <p>\n * Attribute specifier - one of the\n * numeric attribute constants.\n * <\/p>\n * @return int Return attribute value on success, or false on error.\n *\/"
            },
            {
                "name": "setTextAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set a text attribute\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.settextattribute.php\n * @param attr int <p>\n * Attribute specifier - one of the\n * text attribute\n * constants.\n * <\/p>\n * @param value string <p>\n * Text for the attribute value.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getTextAttribute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get a text attribute\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.gettextattribute.php\n * @param attr int <p>\n * Attribute specifier - one of the\n * text attribute constants.\n * <\/p>\n * @return string Return attribute value on success, or false on error.\n *\/"
            },
            {
                "name": "setSymbol",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set a symbol value\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.setsymbol.php\n * @param attr int <p>\n * Symbol specifier, one of the\n * format symbol constants.\n * <\/p>\n * @param value string <p>\n * Text for the symbol.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getSymbol",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "attr",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get a symbol value\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.getsymbol.php\n * @param attr int <p>\n * Symbol specifier, one of the\n * format symbol constants.\n * <\/p>\n * @return string The symbol string or false on error.\n *\/"
            },
            {
                "name": "setPattern",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set formatter pattern\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.setpattern.php\n * @param pattern string <p>\n * Pattern in syntax described in\n * ICU DecimalFormat\n * documentation.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPattern",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get formatter pattern\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.getpattern.php\n * @return string Pattern string that is used by the formatter, or false if an error happens.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get formatter locale\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.getlocale.php\n * @param type int[optional] <p>\n * You can choose between valid and actual locale (\n * Locale::VALID_LOCALE,\n * Locale::ACTUAL_LOCALE,\n * respectively). The default is the actual locale.\n * <\/p>\n * @return string The locale name used to create the formatter.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get formatter's last error code.\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.geterrorcode.php\n * @return int error code from last formatter call.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get formatter's last error message.\n * @link http:\/\/www.php.net\/manual\/en\/numberformatter.geterrormessage.php\n * @return string error message from last formatter call.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "PATTERN_DECIMAL",
                "value": 0,
                "doc": null
            },
            {
                "name": "DECIMAL",
                "value": 1,
                "doc": null
            },
            {
                "name": "CURRENCY",
                "value": 2,
                "doc": null
            },
            {
                "name": "PERCENT",
                "value": 3,
                "doc": null
            },
            {
                "name": "SCIENTIFIC",
                "value": 4,
                "doc": null
            },
            {
                "name": "SPELLOUT",
                "value": 5,
                "doc": null
            },
            {
                "name": "ORDINAL",
                "value": 6,
                "doc": null
            },
            {
                "name": "DURATION",
                "value": 7,
                "doc": null
            },
            {
                "name": "PATTERN_RULEBASED",
                "value": 9,
                "doc": null
            },
            {
                "name": "IGNORE",
                "value": 0,
                "doc": null
            },
            {
                "name": "DEFAULT_STYLE",
                "value": 1,
                "doc": null
            },
            {
                "name": "ROUND_CEILING",
                "value": 0,
                "doc": null
            },
            {
                "name": "ROUND_FLOOR",
                "value": 1,
                "doc": null
            },
            {
                "name": "ROUND_DOWN",
                "value": 2,
                "doc": null
            },
            {
                "name": "ROUND_UP",
                "value": 3,
                "doc": null
            },
            {
                "name": "ROUND_HALFEVEN",
                "value": 4,
                "doc": null
            },
            {
                "name": "ROUND_HALFDOWN",
                "value": 5,
                "doc": null
            },
            {
                "name": "ROUND_HALFUP",
                "value": 6,
                "doc": null
            },
            {
                "name": "PAD_BEFORE_PREFIX",
                "value": 0,
                "doc": null
            },
            {
                "name": "PAD_AFTER_PREFIX",
                "value": 1,
                "doc": null
            },
            {
                "name": "PAD_BEFORE_SUFFIX",
                "value": 2,
                "doc": null
            },
            {
                "name": "PAD_AFTER_SUFFIX",
                "value": 3,
                "doc": null
            },
            {
                "name": "PARSE_INT_ONLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "GROUPING_USED",
                "value": 1,
                "doc": null
            },
            {
                "name": "DECIMAL_ALWAYS_SHOWN",
                "value": 2,
                "doc": null
            },
            {
                "name": "MAX_INTEGER_DIGITS",
                "value": 3,
                "doc": null
            },
            {
                "name": "MIN_INTEGER_DIGITS",
                "value": 4,
                "doc": null
            },
            {
                "name": "INTEGER_DIGITS",
                "value": 5,
                "doc": null
            },
            {
                "name": "MAX_FRACTION_DIGITS",
                "value": 6,
                "doc": null
            },
            {
                "name": "MIN_FRACTION_DIGITS",
                "value": 7,
                "doc": null
            },
            {
                "name": "FRACTION_DIGITS",
                "value": 8,
                "doc": null
            },
            {
                "name": "MULTIPLIER",
                "value": 9,
                "doc": null
            },
            {
                "name": "GROUPING_SIZE",
                "value": 10,
                "doc": null
            },
            {
                "name": "ROUNDING_MODE",
                "value": 11,
                "doc": null
            },
            {
                "name": "ROUNDING_INCREMENT",
                "value": 12,
                "doc": null
            },
            {
                "name": "FORMAT_WIDTH",
                "value": 13,
                "doc": null
            },
            {
                "name": "PADDING_POSITION",
                "value": 14,
                "doc": null
            },
            {
                "name": "SECONDARY_GROUPING_SIZE",
                "value": 15,
                "doc": null
            },
            {
                "name": "SIGNIFICANT_DIGITS_USED",
                "value": 16,
                "doc": null
            },
            {
                "name": "MIN_SIGNIFICANT_DIGITS",
                "value": 17,
                "doc": null
            },
            {
                "name": "MAX_SIGNIFICANT_DIGITS",
                "value": 18,
                "doc": null
            },
            {
                "name": "LENIENT_PARSE",
                "value": 19,
                "doc": null
            },
            {
                "name": "POSITIVE_PREFIX",
                "value": 0,
                "doc": null
            },
            {
                "name": "POSITIVE_SUFFIX",
                "value": 1,
                "doc": null
            },
            {
                "name": "NEGATIVE_PREFIX",
                "value": 2,
                "doc": null
            },
            {
                "name": "NEGATIVE_SUFFIX",
                "value": 3,
                "doc": null
            },
            {
                "name": "PADDING_CHARACTER",
                "value": 4,
                "doc": null
            },
            {
                "name": "CURRENCY_CODE",
                "value": 5,
                "doc": null
            },
            {
                "name": "DEFAULT_RULESET",
                "value": 6,
                "doc": null
            },
            {
                "name": "PUBLIC_RULESETS",
                "value": 7,
                "doc": null
            },
            {
                "name": "DECIMAL_SEPARATOR_SYMBOL",
                "value": 0,
                "doc": null
            },
            {
                "name": "GROUPING_SEPARATOR_SYMBOL",
                "value": 1,
                "doc": null
            },
            {
                "name": "PATTERN_SEPARATOR_SYMBOL",
                "value": 2,
                "doc": null
            },
            {
                "name": "PERCENT_SYMBOL",
                "value": 3,
                "doc": null
            },
            {
                "name": "ZERO_DIGIT_SYMBOL",
                "value": 4,
                "doc": null
            },
            {
                "name": "DIGIT_SYMBOL",
                "value": 5,
                "doc": null
            },
            {
                "name": "MINUS_SIGN_SYMBOL",
                "value": 6,
                "doc": null
            },
            {
                "name": "PLUS_SIGN_SYMBOL",
                "value": 7,
                "doc": null
            },
            {
                "name": "CURRENCY_SYMBOL",
                "value": 8,
                "doc": null
            },
            {
                "name": "INTL_CURRENCY_SYMBOL",
                "value": 9,
                "doc": null
            },
            {
                "name": "MONETARY_SEPARATOR_SYMBOL",
                "value": 10,
                "doc": null
            },
            {
                "name": "EXPONENTIAL_SYMBOL",
                "value": 11,
                "doc": null
            },
            {
                "name": "PERMILL_SYMBOL",
                "value": 12,
                "doc": null
            },
            {
                "name": "PAD_ESCAPE_SYMBOL",
                "value": 13,
                "doc": null
            },
            {
                "name": "INFINITY_SYMBOL",
                "value": 14,
                "doc": null
            },
            {
                "name": "NAN_SYMBOL",
                "value": 15,
                "doc": null
            },
            {
                "name": "SIGNIFICANT_DIGIT_SYMBOL",
                "value": 16,
                "doc": null
            },
            {
                "name": "MONETARY_GROUPING_SEPARATOR_SYMBOL",
                "value": 17,
                "doc": null
            },
            {
                "name": "TYPE_DEFAULT",
                "value": 0,
                "doc": null
            },
            {
                "name": "TYPE_INT32",
                "value": 1,
                "doc": null
            },
            {
                "name": "TYPE_INT64",
                "value": 2,
                "doc": null
            },
            {
                "name": "TYPE_DOUBLE",
                "value": 3,
                "doc": null
            },
            {
                "name": "TYPE_CURRENCY",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "Normalizer",
        "fqn": "\\Normalizer",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "normalize",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "input",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "form",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Normalizes the input provided and returns the normalized string\n * @link http:\/\/www.php.net\/manual\/en\/normalizer.normalize.php\n * @param input string <p>The input string to normalize<\/p>\n * @param form string[optional] <p>One of the normalization forms.<\/p>\n * @return string The normalized string or &null; if an error occurred.\n *\/"
            },
            {
                "name": "isNormalized",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "input",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "form",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n* Checks if the provided string is already in the specified normalization\n   form.\n* @link http:\/\/www.php.net\/manual\/en\/normalizer.isnormalized.php\n* @param input string <p>The input string to normalize<\/p>\n* @param form string[optional] <p>\n* One of the normalization forms.\n* <\/p>\n* @return bool true if normalized, false otherwise or if there an error\n*\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "NONE",
                "value": 1,
                "doc": null
            },
            {
                "name": "FORM_D",
                "value": 2,
                "doc": null
            },
            {
                "name": "NFD",
                "value": 2,
                "doc": null
            },
            {
                "name": "FORM_KD",
                "value": 3,
                "doc": null
            },
            {
                "name": "NFKD",
                "value": 3,
                "doc": null
            },
            {
                "name": "FORM_C",
                "value": 4,
                "doc": null
            },
            {
                "name": "NFC",
                "value": 4,
                "doc": null
            },
            {
                "name": "FORM_KC",
                "value": 5,
                "doc": null
            },
            {
                "name": "NFKC",
                "value": 5,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "Locale",
        "fqn": "\\Locale",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "getDefault",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Gets the default locale value from the INTL global 'default_locale'\n * @link http:\/\/www.php.net\/manual\/en\/locale.getdefault.php\n * @return string The current runtime locale\n *\/"
            },
            {
                "name": "setDefault",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * sets the default runtime locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.setdefault.php\n * @param locale string <p>\n * Is a BCP 47 compliant language tag containing the\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPrimaryLanguage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the primary language for the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getprimarylanguage.php\n * @param locale string <p>\n * The locale to extract the primary language code from\n * <\/p>\n * @return string The language code associated with the language or &null; in case of error.\n *\/"
            },
            {
                "name": "getScript",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the script for the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getscript.php\n * @param locale string <p>\n * The locale to extract the script code from\n * <\/p>\n * @return string The script subtag for the locale or &null; if not present\n *\/"
            },
            {
                "name": "getRegion",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the region for the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getregion.php\n * @param locale string <p>\n * The locale to extract the region code from\n * <\/p>\n * @return string The region subtag for the locale or &null; if not present\n *\/"
            },
            {
                "name": "getKeywords",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the keywords for the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getkeywords.php\n * @param locale string <p>\n * The locale to extract the keywords from\n * <\/p>\n * @return array Associative array containing the keyword-value pairs for this locale\n *\/"
            },
            {
                "name": "getDisplayScript",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns an appropriately localized display name for script of the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getdisplayscript.php\n * @param locale string <p>\n * The locale to return a display script for\n * <\/p>\n * @param in_locale string[optional] <p>\n * Optional format locale to use to display the script name\n * <\/p>\n * @return string Display name of the script for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "getDisplayRegion",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns an appropriately localized display name for region of the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getdisplayregion.php\n * @param locale string <p>\n * The locale to return a display region for.\n * <\/p>\n * @param in_locale string[optional] <p>\n * Optional format locale to use to display the region name\n * <\/p>\n * @return string display name of the region for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "getDisplayName",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns an appropriately localized display name for the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getdisplayname.php\n * @param locale string <p>\n * The locale to return a display name for.\n * <\/p>\n * @param in_locale string[optional] <p>optional format locale<\/p>\n * @return string Display name of the locale in the format appropriate for $in_locale.\n *\/"
            },
            {
                "name": "getDisplayLanguage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns an appropriately localized display name for language of the inputlocale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getdisplaylanguage.php\n * @param locale string <p>\n * The locale to return a display language for\n * <\/p>\n * @param in_locale string[optional] <p>\n * Optional format locale to use to display the language name\n * <\/p>\n * @return string display name of the language for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "getDisplayVariant",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "in_locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns an appropriately localized display name for variants of the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getdisplayvariant.php\n * @param locale string <p>\n * The locale to return a display variant for\n * <\/p>\n * @param in_locale string[optional] <p>\n * Optional format locale to use to display the variant name\n * <\/p>\n * @return string Display name of the variant for the $locale in the format appropriate for\n * $in_locale.\n *\/"
            },
            {
                "name": "composeLocale",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "subtags",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns a correctly ordered and delimited locale ID\n * @link http:\/\/www.php.net\/manual\/en\/locale.composelocale.php\n * @param subtags array <p>\n * an array containing a list of key-value pairs, where the keys identify\n * the particular locale ID subtags, and the values are the associated\n * subtag values.\n * <p>\n * The 'variant' and 'private' subtags can take maximum 15 values\n * whereas 'extlang' can take maximum 3 values.e.g. Variants are allowed\n * with the suffix ranging from 0-14. Hence the keys for the input array\n * can be variant0, variant1, ...,variant14. In the returned locale id,\n * the subtag is ordered by suffix resulting in variant0 followed by\n * variant1 followed by variant2 and so on.\n * <\/p>\n * <p>\n * The 'variant', 'private' and 'extlang' multiple values can be specified both\n * as array under specific key (e.g. 'variant') and as multiple numbered keys\n * (e.g. 'variant0', 'variant1', etc.).\n * <\/p>\n * <\/p>\n * @return string The corresponding locale identifier.\n *\/"
            },
            {
                "name": "parseLocale",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns a key-value array of locale ID subtag elements.\n * @link http:\/\/www.php.net\/manual\/en\/locale.parselocale.php\n * @param locale string <p>\n * The locale to extract the subtag array from. Note: The 'variant' and\n * 'private' subtags can take maximum 15 values whereas 'extlang' can take\n * maximum 3 values.\n * <\/p>\n * @return array an array containing a list of key-value pairs, where the keys\n * identify the particular locale ID subtags, and the values are the\n * associated subtag values. The array will be ordered as the locale id\n * subtags e.g. in the locale id if variants are '-varX-varY-varZ' then the\n * returned array will have variant0=&gt;varX , variant1=&gt;varY ,\n * variant2=&gt;varZ\n *\/"
            },
            {
                "name": "getAllVariants",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Gets the variants for the input locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.getallvariants.php\n * @param locale string <p>\n * The locale to extract the variants from\n * <\/p>\n * @return array The array containing the list of all variants subtag for the locale\n * or &null; if not present\n *\/"
            },
            {
                "name": "filterMatches",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "langtag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "canonicalize",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Checks if a language tag filter matches with locale\n * @link http:\/\/www.php.net\/manual\/en\/locale.filtermatches.php\n * @param langtag string <p>\n * The language tag to check\n * <\/p>\n * @param locale string <p>\n * The language range to check against\n * <\/p>\n * @param canonicalize bool[optional] <p>\n * If true, the arguments will be converted to canonical form before\n * matching.\n * <\/p>\n * @return bool true if $locale matches $langtag false otherwise.\n *\/"
            },
            {
                "name": "lookup",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "langtag",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "canonicalize",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "default",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Searches the language tag list for the best match to the language\n * @link http:\/\/www.php.net\/manual\/en\/locale.lookup.php\n * @param langtag array <p>\n * An array containing a list of language tags to compare to\n * locale. Maximum 100 items allowed.\n * <\/p>\n * @param locale string <p>\n * The locale to use as the language range when matching.\n * <\/p>\n * @param canonicalize bool[optional] <p>\n * If true, the arguments will be converted to canonical form before\n * matching.\n * <\/p>\n * @param default string[optional] <p>\n * The locale to use if no match is found.\n * <\/p>\n * @return string The closest matching language tag or default value.\n *\/"
            },
            {
                "name": "canonicalize",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Canonicalize the locale string\n * @link http:\/\/www.php.net\/manual\/en\/locale.canonicalize.php\n * @param locale string <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "acceptFromHttp",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "header",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Tries to find out best available locale based on HTTP \"Accept-Language\" header\n * @link http:\/\/www.php.net\/manual\/en\/locale.acceptfromhttp.php\n * @param header string <p>\n * The string containing the \"Accept-Language\" header according to format in RFC 2616.\n * <\/p>\n * @return string The corresponding locale identifier.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "ACTUAL_LOCALE",
                "value": 0,
                "doc": null
            },
            {
                "name": "VALID_LOCALE",
                "value": 1,
                "doc": null
            },
            {
                "name": "DEFAULT_LOCALE",
                "value": null,
                "doc": null
            },
            {
                "name": "LANG_TAG",
                "value": "language",
                "doc": null
            },
            {
                "name": "EXTLANG_TAG",
                "value": "extlang",
                "doc": null
            },
            {
                "name": "SCRIPT_TAG",
                "value": "script",
                "doc": null
            },
            {
                "name": "REGION_TAG",
                "value": "region",
                "doc": null
            },
            {
                "name": "VARIANT_TAG",
                "value": "variant",
                "doc": null
            },
            {
                "name": "GRANDFATHERED_LANG_TAG",
                "value": "grandfathered",
                "doc": null
            },
            {
                "name": "PRIVATE_TAG",
                "value": "private",
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MessageFormatter",
        "fqn": "\\MessageFormatter",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param locale\n * @param pattern\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Constructs a new Message Formatter\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.create.php\n * @param locale string <p>\n * The locale to use when formatting arguments\n * <\/p>\n * @param pattern string <p>\n * The pattern string to stick arguments into.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n * @return MessageFormatter The formatter object\n *\/"
            },
            {
                "name": "format",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "args",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Format the message\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.format.php\n * @param args array <p>\n * Arguments to insert into the format string\n * <\/p>\n * @return string The formatted string, or false if an error occurred\n *\/"
            },
            {
                "name": "formatMessage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "args",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Quick format message\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.formatmessage.php\n * @param locale string <p>\n * The locale to use for formatting locale-dependent parts\n * <\/p>\n * @param pattern string <p>\n * The pattern string to insert things into.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n * @param args array <p>\n * The array of values to insert into the format string\n * <\/p>\n * @return string The formatted pattern string or false if an error occurred\n *\/"
            },
            {
                "name": "parse",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Parse input string according to pattern\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.parse.php\n * @param value string <p>\n * The string to parse\n * <\/p>\n * @return array An array containing the items extracted, or false on error\n *\/"
            },
            {
                "name": "parseMessage",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Quick parse input string\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.parsemessage.php\n * @param locale string <p>\n * The locale to use for parsing locale-dependent parts\n * <\/p>\n * @param pattern string <p>\n * The pattern with which to parse the value.\n * <\/p>\n * @param source string <p>\n * The string to parse, conforming to the pattern.\n * <\/p>\n * @return array An array containing items extracted, or false on error\n *\/"
            },
            {
                "name": "setPattern",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the pattern used by the formatter\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.setpattern.php\n * @param pattern string <p>\n * The pattern string to use in this message formatter.\n * The pattern uses an 'apostrophe-friendly' syntax; it is run through\n * umsg_autoQuoteApostrophe\n * before being interpreted.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getPattern",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the pattern used by the formatter\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.getpattern.php\n * @return string The pattern string for this message formatter\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the locale for which the formatter was created.\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.getlocale.php\n * @return string The locale name\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the error code from last operation\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.geterrorcode.php\n * @return int The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the error text from the last operation\n * @link http:\/\/www.php.net\/manual\/en\/messageformatter.geterrormessage.php\n * @return string Description of the last error.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlDateFormatter",
        "fqn": "\\IntlDateFormatter",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "datetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timezone",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "calendar",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param locale\n * @param datetype\n * @param timetype\n * @param timezone[optional]\n * @param calendar[optional]\n * @param pattern[optional]\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "datetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timetype",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timezone",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "calendar",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a date formatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.create.php\n * @param locale string <p>\n * Locale to use when formatting or parsing or &null; to use the value\n * specified in the ini setting intl.default_locale.\n * <\/p>\n * @param datetype int <p>\n * Date type to use (none, short,\n * medium, long,\n * full). This is one of the IntlDateFormatter\n * constants. It can also be &null;, in which case ICU\u02bcs default\n * date type will be used.\n * <\/p>\n * @param timetype int <p>\n * Time type to use (none, short,\n * medium, long,\n * full). This is one of the IntlDateFormatter\n * constants. It can also be &null;, in which case ICU\u02bcs default\n * time type will be used.\n * <\/p>\n * @param timezone mixed[optional] <p>\n * Time zone ID. The default (and the one used if &null; is given) is the\n * one returned by date_default_timezone_get or, if\n * applicable, that of the IntlCalendar object passed\n * for the calendar parameter. This ID must be a\n * valid identifier on ICU\u02bcs database or an ID representing an\n * explicit offset, such as GMT-05:30.\n * <\/p>\n * <p>\n * This can also be an IntlTimeZone or a\n * DateTimeZone object.\n * <\/p>\n * @param calendar mixed[optional] <p>\n * Calendar to use for formatting or parsing. The default value is &null;,\n * which corresponds to IntlDateFormatter::GREGORIAN.\n * This can either be one of the\n * IntlDateFormatter\n * calendar constants or an IntlCalendar. Any\n * IntlCalendar object passed will be clone; it will\n * not be changed by the IntlDateFormatter. This will\n * determine the calendar type used (gregorian, islamic, persian, etc.) and,\n * if &null; is given for the timezone parameter,\n * also the timezone used.\n * <\/p>\n * @param pattern string[optional] <p>\n * Optional pattern to use when formatting or parsing.\n * Possible patterns are documented at &url.icu.datepattern;.\n * <\/p>\n * @return IntlDateFormatter The created IntlDateFormatter or false in case of\n * failure.\n *\/"
            },
            {
                "name": "getDateType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the datetype used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.getdatetype.php\n * @return int The current date type value of the formatter.\n *\/"
            },
            {
                "name": "getTimeType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the timetype used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.gettimetype.php\n * @return int The current date type value of the formatter.\n *\/"
            },
            {
                "name": "getCalendar",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the calendar type used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.getcalendar.php\n * @return int The calendar\n * type being used by the formatter. Either\n * IntlDateFormatter::TRADITIONAL or\n * IntlDateFormatter::GREGORIAN.\n *\/"
            },
            {
                "name": "getCalendarObject",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get copy of formatter\u02bcs calendar object\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.getcalendarobject.php\n * @return IntlCalendar A copy of the internal calendar object used by this formatter.\n *\/"
            },
            {
                "name": "setCalendar",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "which",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets the calendar type used by the formatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.setcalendar.php\n * @param which mixed <p>\n * This can either be: the calendar\n * type to use (default is\n * IntlDateFormatter::GREGORIAN, which is also used if\n * &null; is specified) or an\n * IntlCalendar object.\n * <\/p>\n * <p>\n * Any IntlCalendar object passed in will be cloned;\n * no modifications will be made to the argument object.\n * <\/p>\n * <p>\n * The timezone of the formatter will only be kept if an\n * IntlCalendar object is not passed, otherwise the\n * new timezone will be that of the passed object.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getTimeZoneId",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the timezone-id used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.gettimezoneid.php\n * @return string ID string for the time zone used by this formatter.\n *\/"
            },
            {
                "name": "setTimeZoneId",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "zone",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets the time zone to use\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.settimezoneid.php\n * @param zone string <p>\n * The time zone ID string of the time zone to use.\n * If &null; or the empty string, the default time zone for the runtime is used.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n * @deprecated Since 5.5.0\n *\/"
            },
            {
                "name": "getTimeZone",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get formatter\u02bcs timezone\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.gettimezone.php\n * @return IntlTimeZone The associated IntlTimeZone\n * object or false on failure.\n *\/"
            },
            {
                "name": "setTimeZone",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "zone",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets formatter\u02bcs timezone\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.settimezone.php\n * @param zone mixed <p>\n * The timezone to use for this formatter. This can be specified in the\n * following forms:\n * <\/p>\n * &reference.intl.inctimezoneparam;\n * @return boolean true on success and false on failure.\n *\/"
            },
            {
                "name": "setPattern",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pattern",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the pattern used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.setpattern.php\n * @param pattern string <p>\n * New pattern string to use.\n * Possible patterns are documented at &url.icu.datepattern;.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n * Bad formatstrings are usually the cause of the failure.\n *\/"
            },
            {
                "name": "getPattern",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the pattern used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.getpattern.php\n * @return string The pattern string being used to format\/parse.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "which",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get the locale used by formatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.getlocale.php\n * @param which int[optional]\n * @return string the locale of this formatter or 'false' if error\n *\/"
            },
            {
                "name": "setLenient",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "lenient",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the leniency of the parser\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.setlenient.php\n * @param lenient bool <p>\n * Sets whether the parser is lenient or not, default is true (lenient).\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "isLenient",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the lenient used for the IntlDateFormatter\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.islenient.php\n * @return bool true if parser is lenient, false if parser is strict. By default the parser is lenient.\n *\/"
            },
            {
                "name": "format",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Format the date\/time value as a string\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.format.php\n * @param value mixed <p>\n * Value to format. This may be a DateTime object, an\n * IntlCalendar object, a numeric type\n * representing a (possibly fractional) number of seconds since epoch or an\n * array in the format output by\n * localtime.\n * <\/p>\n * <p>\n * If a DateTime or an\n * IntlCalendar object is passed, its timezone is not\n * considered. The object will be formatted using the formater\u02bcs configured\n * timezone. If one wants to use the timezone of the object to be formatted,\n * IntlDateFormatter::setTimeZone must be called before\n * with the object\u02bcs timezone. Alternatively, the static function\n * IntlDateFormatter::formatObject may be used instead.\n * <\/p>\n * @return string The formatted string or, if an error occurred, false.\n *\/"
            },
            {
                "name": "formatObject",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Formats an object\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.formatobject.php\n * @param object object <p>\n * An object of type IntlCalendar or\n * DateTime. The timezone information in the object\n * will be used.\n * <\/p>\n * @param format mixed[optional] <p>\n * How to format the date\/time. This can either be an array with\n * two elements (first the date style, then the time style, these being one\n * of the constants IntlDateFormatter::NONE,\n * IntlDateFormatter::SHORT,\n * IntlDateFormatter::MEDIUM,\n * IntlDateFormatter::LONG,\n * IntlDateFormatter::FULL), a long with\n * the value of one of these constants (in which case it will be used both\n * for the time and the date) or a string with the format\n * described in the ICU\n * documentation. If &null;, the default style will be used.\n * <\/p>\n * @param locale string[optional] <p>\n * The locale to use, or &null; to use the default one.\n * <\/p>\n * @return string A string with result or false on failure.\n *\/"
            },
            {
                "name": "parse",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Parse string to a timestamp value\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.parse.php\n * @param value string <p>\n * string to convert to a time\n * <\/p>\n * @param position int[optional] <p>\n * Position at which to start the parsing in $value (zero-based).\n * If no error occurs before $value is consumed, $parse_pos will contain -1\n * otherwise it will contain the position at which parsing ended (and the error occurred).\n * This variable will contain the end position if the parse fails.\n * If $parse_pos > strlen($value), the parse fails immediately.\n * <\/p>\n * @return int timestamp parsed value, or false if value can't be parsed.\n *\/"
            },
            {
                "name": "localtime",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "position",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Parse string to a field-based time value\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.localtime.php\n * @param value string <p>\n * string to convert to a time\n * <\/p>\n * @param position int[optional] <p>\n * Position at which to start the parsing in $value (zero-based).\n * If no error occurs before $value is consumed, $parse_pos will contain -1\n * otherwise it will contain the position at which parsing ended .\n * If $parse_pos > strlen($value), the parse fails immediately.\n * <\/p>\n * @return array Localtime compatible array of integers : contains 24 hour clock value in tm_hour field\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the error code from last operation\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.geterrorcode.php\n * @return int The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the error text from the last operation.\n * @link http:\/\/www.php.net\/manual\/en\/intldateformatter.geterrormessage.php\n * @return string Description of the last error.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "FULL",
                "value": 0,
                "doc": null
            },
            {
                "name": "LONG",
                "value": 1,
                "doc": null
            },
            {
                "name": "MEDIUM",
                "value": 2,
                "doc": null
            },
            {
                "name": "SHORT",
                "value": 3,
                "doc": null
            },
            {
                "name": "NONE",
                "value": null,
                "doc": null
            },
            {
                "name": "GREGORIAN",
                "value": 1,
                "doc": null
            },
            {
                "name": "TRADITIONAL",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "ResourceBundle",
        "fqn": "\\ResourceBundle",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "bundlename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fallback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param locale\n * @param bundlename\n * @param fallback[optional]\n *\/"
            },
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "bundlename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fallback",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a resource bundle\n * @link http:\/\/www.php.net\/manual\/en\/resourcebundle.create.php\n * @param locale string <p>\n * Locale for which the resources should be loaded (locale name, e.g. en_CA).\n * <\/p>\n * @param bundlename string <p>\n * The directory where the data is stored or the name of the .dat file.\n * <\/p>\n * @param fallback bool[optional] <p>\n * Whether locale should match exactly or fallback to parent locale is allowed.\n * <\/p>\n * @return ResourceBundle ResourceBundle object or false on error.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get data from the bundle\n * @link http:\/\/www.php.net\/manual\/en\/resourcebundle.get.php\n * @param index string|int <p>\n * Data index, must be string or integer.\n * <\/p>\n * @return mixed the data located at the index or &null; on error. Strings, integers and binary data strings\n * are returned as corresponding PHP types, integer array is returned as PHP array. Complex types are\n * returned as ResourceBundle object.\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get number of elements in the bundle\n * @link http:\/\/www.php.net\/manual\/en\/resourcebundle.count.php\n * @return int number of elements in the bundle.\n *\/"
            },
            {
                "name": "getLocales",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "bundlename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get supported locales\n * @link http:\/\/www.php.net\/manual\/en\/resourcebundle.locales.php\n * @param bundlename string <p>\n * Path of ResourceBundle for which to get available locales, or\n * empty string for default locales list.\n * <\/p>\n * @return array the list of locales supported by the bundle.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get bundle's last error code.\n * @link http:\/\/www.php.net\/manual\/en\/resourcebundle.geterrorcode.php\n * @return int error code from last bundle object call.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get bundle's last error message.\n * @link http:\/\/www.php.net\/manual\/en\/resourcebundle.geterrormessage.php\n * @return string error message from last bundle object's call.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "Transliterator",
        "fqn": "\\Transliterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "direction",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a transliterator\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.create.php\n * @param id string <p>\n * The id.\n * <\/p>\n * @param direction int[optional] <p>\n * The direction, defaults to\n * >Transliterator::FORWARD.\n * May also be set to\n * Transliterator::REVERSE.\n * <\/p>\n * @return Transliterator a Transliterator object on success,\n * or &null; on failure.\n *\/"
            },
            {
                "name": "createFromRules",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "rules",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "direction",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create transliterator from rules\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.createfromrules.php\n * @param rules string <p>\n * The rules.\n * <\/p>\n * @param direction string[optional] <p>\n * The direction, defaults to\n * >Transliterator::FORWARD.\n * May also be set to\n * Transliterator::REVERSE.\n * <\/p>\n * @return Transliterator a Transliterator object on success,\n * or &null; on failure.\n *\/"
            },
            {
                "name": "createInverse",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create an inverse transliterator\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.createinverse.php\n * @return Transliterator a Transliterator object on success,\n * or &null; on failure\n *\/"
            },
            {
                "name": "listIDs",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get transliterator IDs\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.listids.php\n * @return array An array of registered transliterator IDs on success,\n *  or false on failure.\n *\/"
            },
            {
                "name": "transliterate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "subject",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "start",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "end",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Transliterate a string\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.transliterate.php\n * @param subject string <p>\n * The string to be transformed.\n * <\/p>\n * @param start int[optional] <p>\n * The start index (in UTF-16 code units) from which the string will start\n * to be transformed, inclusive. Indexing starts at 0. The text before will\n * be left as is.\n * <\/p>\n * @param end int[optional] <p>\n * The end index (in UTF-16 code units) until which the string will be\n * transformed, exclusive. Indexing starts at 0. The text after will be\n * left as is.\n * <\/p>\n * @return string The transfomed string on success,  or false on failure.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.geterrorcode.php\n * @return int The error code on success,\n * or false if none exists, or on failure.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message\n * @link http:\/\/www.php.net\/manual\/en\/transliterator.geterrormessage.php\n * @return string The error code on success,\n * or false if none exists, or on failure.\n *\/"
            }
        ],
        "properties": [
            {
                "name": "id",
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "FORWARD",
                "value": 0,
                "doc": null
            },
            {
                "name": "REVERSE",
                "value": 1,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlTimeZone",
        "fqn": "\\IntlTimeZone",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "createTimeZone",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "zoneId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create a timezone object for the given ID\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.createtimezone.php\n * @param zoneId string <p>\n * <\/p>\n * @return IntlTimeZone\n *\/"
            },
            {
                "name": "fromDateTimeZone",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "zoneId",
                        "type": "DateTimeZone",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create a timezone object from <type>DateTimeZone<\/type>\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.fromdatetimezone.php\n * @param zoneId DateTimeZone <p>\n * <\/p>\n * @return IntlTimeZone\n *\/"
            },
            {
                "name": "createDefault",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create a new copy of the default timezone for this host\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.createdefault.php\n * @return IntlTimeZone\n *\/"
            },
            {
                "name": "getGMT",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create GMT (UTC) timezone\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getgmt.php\n * @return IntlTimeZone\n *\/"
            },
            {
                "name": "createEnumeration",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "countryOrRawOffset",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n* Get an enumeration over time zone IDs associated with the\n  given country or offset\n* @link http:\/\/www.php.net\/manual\/en\/intltimezone.createenumeration.php\n* @param countryOrRawOffset mixed[optional] <p>\n* <\/p>\n* @return IntlIterator\n*\/"
            },
            {
                "name": "countEquivalentIDs",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "zoneId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the number of IDs in the equivalency group that includes the given ID\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.countequivalentids.php\n * @param zoneId string <p>\n * <\/p>\n * @return integer\n *\/"
            },
            {
                "name": "getCanonicalID",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "zoneId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "isSystemID",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getcanonicalid.php\n * @param zoneId string <p>\n * <\/p>\n * @param isSystemID bool[optional] <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "getTZDataVersion",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the timezone data version currently used by ICU\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.gettzdataversion.php\n * @return string\n *\/"
            },
            {
                "name": "getEquivalentID",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "zoneId",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get an ID in the equivalency group that includes the given ID\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getequivalentid.php\n * @param zoneId string <p>\n * <\/p>\n * @param index integer <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "getID",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get timezone ID\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getid.php\n * @return string\n *\/"
            },
            {
                "name": "useDaylightTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check if this time zone uses daylight savings time\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.usedaylighttime.php\n * @return bool\n *\/"
            },
            {
                "name": "getOffset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "date",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "local",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "rawOffset",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "dstOffset",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the time zone raw and GMT offset for the given moment in time\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getoffset.php\n * @param date float <p>\n * <\/p>\n * @param local bool <p>\n * <\/p>\n * @param rawOffset integer <p>\n * <\/p>\n * @param dstOffset integer <p>\n * <\/p>\n * @return integer\n *\/"
            },
            {
                "name": "getRawOffset",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the raw GMT offset (before taking daylight savings time into account\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getrawoffset.php\n * @return integer\n *\/"
            },
            {
                "name": "hasSameRules",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "otherTimeZone",
                        "type": "IntlTimeZone",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Check if this zone has the same rules and offset as another zone\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.hassamerules.php\n * @param otherTimeZone IntlTimeZone <p>\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "getDisplayName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "isDaylight",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "style",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get a name of this time zone suitable for presentation to the user\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getdisplayname.php\n * @param isDaylight bool[optional] <p>\n * <\/p>\n * @param style integer[optional] <p>\n * <\/p>\n * @param locale string[optional] <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "getDSTSavings",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the amount of time to be added to local standard time to get local wall clock time\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.getdstsavings.php\n * @return integer\n *\/"
            },
            {
                "name": "toDateTimeZone",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Convert to <type>DateTimeZone<\/type> object\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.todatetimezone.php\n * @return DateTimeZone\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.geterrorcode.php\n * @return integer\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/intltimezone.geterrormessage.php\n * @return string\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DISPLAY_SHORT",
                "value": 1,
                "doc": null
            },
            {
                "name": "DISPLAY_LONG",
                "value": 2,
                "doc": null
            },
            {
                "name": "DISPLAY_SHORT_GENERIC",
                "value": 3,
                "doc": null
            },
            {
                "name": "DISPLAY_LONG_GENERIC",
                "value": 4,
                "doc": null
            },
            {
                "name": "DISPLAY_SHORT_GMT",
                "value": 5,
                "doc": null
            },
            {
                "name": "DISPLAY_LONG_GMT",
                "value": 6,
                "doc": null
            },
            {
                "name": "DISPLAY_SHORT_COMMONLY_USED",
                "value": 7,
                "doc": null
            },
            {
                "name": "DISPLAY_GENERIC_LOCATION",
                "value": 8,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlCalendar",
        "fqn": "\\IntlCalendar",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "createInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "timeZone",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a new IntlCalendar\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.createinstance.php\n * @param timeZone mixed[optional] <p>\n * The timezone to use.\n * <\/p>\n * &reference.intl.inctimezoneparam;\n * @param locale string[optional] <p>\n * A locale to use or &null; to use the default locale.\n * <\/p>\n * @return IntlCalendar The created IntlCalendar instance or &null; on\n * failure.\n *\/"
            },
            {
                "name": "getKeywordValuesForLocale",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "commonlyUsed",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get set of locale keyword values\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getkeywordvaluesforlocale.php\n * @param key string <p>\n * The locale keyword for which relevant values are to be queried. Only\n * 'calendar' is supported.\n * <\/p>\n * @param locale string <p>\n * The locale onto which the keyword\/value pair are to be appended.\n * <\/p>\n * @param commonlyUsed boolean <p>\n * Whether to show only the values commonly used for the specified locale.\n * <\/p>\n * @return Iterator An iterator that yields strings with the locale keyword\n * values or false on failure.\n *\/"
            },
            {
                "name": "getNow",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get number representing the current time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getnow.php\n * @return float A float representing a number of milliseconds since the epoch,\n * not counting leap seconds.\n *\/"
            },
            {
                "name": "getAvailableLocales",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get array of locales for which there is data\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getavailablelocales.php\n * @return array An array of strings, one for which locale.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.get.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An integer with the value of the time field.\n *\/"
            },
            {
                "name": "getTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get time currently represented by the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.gettime.php\n * @return float A float representing the number of milliseconds elapsed since the\n * reference time (1 Jan 1970 00:00:00 UTC).\n *\/"
            },
            {
                "name": "setTime",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "date",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the calendar time in milliseconds since the epoch\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.settime.php\n * @param date float <p>\n * An instant represented by the number of number of milliseconds between\n * such instant and the epoch, ignoring leap seconds.\n * <\/p>\n * @return bool true on success and false on failure.\n *\/"
            },
            {
                "name": "add",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "amount",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add a (signed) amount of time to a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.add.php\n * @param field int &reference.intl.incfieldparam;\n * @param amount int <p>\n * The signed amount to add to the current field. If the amount is positive,\n * the instant will be moved forward; if it is negative, the instant wil be\n * moved into the past. The unit is implicit to the field type. For instance,\n * hours for IntlCalendar::FIELD_HOUR_OF_DAY.\n * <\/p>\n * @return bool true on success or false on failure.\n *\/"
            },
            {
                "name": "setTimeZone",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "timeZone",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the timezone used by this calendar\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.settimezone.php\n * @param timeZone mixed <p>\n * The new timezone to be used by this calendar. It can be specified in the\n * following ways:\n * &reference.intl.inctimezoneparam;\n * <\/p>\n * @return bool true on success and false on failure.\n *\/"
            },
            {
                "name": "after",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Whether this object\u02bcs time is after that of the passed object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.after.php\n * @param other IntlCalendar <p>\n * The calendar whose time will be checked against the primary object\u02bcs time.\n * <\/p>\n * @return bool true if this object\u02bcs current time is after that of the\n * calendar argument\u02bcs time. Returns false otherwise.\n * Also returns false on failure. You can use exceptions or\n * intl_get_error_code to detect error conditions.\n *\/"
            },
            {
                "name": "before",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Whether this object\u02bcs time is before that of the passed object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.before.php\n * @param other IntlCalendar <p>\n * The calendar whose time will be checked against the primary object\u02bcs time.\n * <\/p>\n * @return bool true if this object\u02bcs current time is before that of the\n * calendar argument\u02bcs time. Returns false otherwise.\n * Also returns false on failure. You can use exceptions or\n * intl_get_error_code to detect error conditions.\n *\/"
            },
            {
                "name": "set",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set a time field or several common fields at once\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.set.php\n * @param field int &reference.intl.incfieldparam;\n * @param value int <p>\n * The new value of the given field.\n * <\/p>\n * @return bool true on success and false on failure.\n *\/"
            },
            {
                "name": "roll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "amountOrUpOrDown",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add value to field without carrying into more significant fields\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.roll.php\n * @param field int &reference.intl.incfieldparam;\n * @param amountOrUpOrDown mixed <p>\n * The (signed) amount to add to the field, true for rolling up (adding\n * 1), or false for rolling down (subtracting\n * 1).\n * <\/p>\n * @return bool true on success or false on failure.\n *\/"
            },
            {
                "name": "clear",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clear a field or all fields\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.clear.php\n * @param field int[optional] &reference.intl.incfieldparam;\n * @return bool true on success or false on failure. Failure can only occur is\n * invalid arguments are provided.\n *\/"
            },
            {
                "name": "fieldDifference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "when",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Calculate difference between given time and this object\u02bcs time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.fielddifference.php\n * @param when float <p>\n * The time against which to compare the quantity represented by the\n * field. For the result to be positive, the time\n * given for this parameter must be ahead of the time of the object the\n * method is being invoked on.\n * <\/p>\n * @param field int <p>\n * The field that represents the quantity being compared.\n * <\/p>\n * &reference.intl.incfieldparam;\n * @return int a (signed) difference of time in the unit associated with the\n * specified field or false on failure.\n *\/"
            },
            {
                "name": "getActualMaximum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * The maximum value for a field, considering the object\u02bcs current time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getactualmaximum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing the maximum value in the units associated\n * with the given field or false on failure.\n *\/"
            },
            {
                "name": "getActualMinimum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * The minimum value for a field, considering the object\u02bcs current time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getactualminimum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing the minimum value in the field\u02bcs\n * unit or false on failure.\n *\/"
            },
            {
                "name": "getDayOfWeekType",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dayOfWeek",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Tell whether a day is a weekday, weekend or a day that has a transition between the two\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getdayofweektype.php\n * @param dayOfWeek int <p>\n * One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY.\n * <\/p>\n * @return int one of the constants\n * IntlCalendar::DOW_TYPE_WEEKDAY,\n * IntlCalendar::DOW_TYPE_WEEKEND,\n * IntlCalendar::DOW_TYPE_WEEKEND_OFFSET or\n * IntlCalendar::DOW_TYPE_WEEKEND_CEASE or false on failure.\n *\/"
            },
            {
                "name": "getFirstDayOfWeek",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the first day of the week for the calendar\u02bcs locale\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getfirstdayofweek.php\n * @return int One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY or false on failure.\n *\/"
            },
            {
                "name": "getGreatestMinimum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the largest local minimum value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getgreatestminimum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a field value, in the field\u02bcs\n * unit, or false on failure.\n *\/"
            },
            {
                "name": "getLeastMaximum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the smallest local maximum for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getleastmaximum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a field value in the field\u02bcs\n * unit or false on failure.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "localeType",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the locale associated with the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getlocale.php\n * @param localeType int <p>\n * Whether to fetch the actual locale (the locale from which the calendar\n * data originates, with Locale::ACTUAL_LOCALE) or the\n * valid locale, i.e., the most specific locale supported by ICU relatively\n * to the requested locale \u2013 see Locale::VALID_LOCALE.\n * From the most general to the most specific, the locales are ordered in\n * this fashion \u2013 actual locale, valid locale, requested locale.\n * <\/p>\n * @return string A locale string or false on failure.\n *\/"
            },
            {
                "name": "getMaximum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the global maximum value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getmaximum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a field value in the field\u02bcs\n * unit or false on failure.\n *\/"
            },
            {
                "name": "getMinimalDaysInFirstWeek",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get minimal number of days the first week in a year or month can have\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getminimaldaysinfirstweek.php\n * @return int An int representing a number of days or false on failure.\n *\/"
            },
            {
                "name": "getMinimum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the global minimum value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getminimum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a value for the given\n * field in the field\u02bcs unit or false on failure.\n *\/"
            },
            {
                "name": "getTimeZone",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the object\u02bcs timezone\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.gettimezone.php\n * @return IntlTimeZone An IntlTimeZone object corresponding to the one used\n * internally in this object.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the calendar type\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.gettype.php\n * @return string A string representing the calendar type, such as\n * 'gregorian', 'islamic', etc.\n *\/"
            },
            {
                "name": "getWeekendTransition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dayOfWeek",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get time of the day at which weekend begins or ends\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getweekendtransition.php\n * @param dayOfWeek string <p>\n * One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY.\n * <\/p>\n * @return int The number of milliseconds into the day at which the the weekend begins or\n * ends or false on failure.\n *\/"
            },
            {
                "name": "inDaylightTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Whether the object\u02bcs time is in Daylight Savings Time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.indaylighttime.php\n * @return bool true if the date is in Daylight Savings Time, false otherwise.\n * The value false may also be returned on failure, for instance after\n * specifying invalid field values on non-lenient mode; use exceptions or query\n * intl_get_error_code to disambiguate.\n *\/"
            },
            {
                "name": "isEquivalentTo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Whether another calendar is equal but for a different time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.isequivalentto.php\n * @param other IntlCalendar <p>\n * The other calendar against which the comparison is to be made.\n * <\/p>\n * @return bool Assuming there are no argument errors, returns true iif the calendars are\n * equivalent except possibly for their set time.\n *\/"
            },
            {
                "name": "isLenient",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Whether date\/time interpretation is in lenient mode\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.islenient.php\n * @return bool A bool representing whether the calendar is set to lenient mode.\n *\/"
            },
            {
                "name": "isWeekend",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "date",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Whether a certain date\/time is in the weekend\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.isweekend.php\n * @param date float[optional] <p>\n * An optional timestamp representing the number of milliseconds since the\n * epoch, excluding leap seconds. If &null;, this object\u02bcs current time is\n * used instead.\n * <\/p>\n * @return bool A bool indicating whether the given or this object\u02bcs time occurs\n * in a weekend.\n * <\/p>\n * <p>\n * The value false may also be returned on failure, for instance after giving\n * a date out of bounds on non-lenient mode; use exceptions or query\n * intl_get_error_code to disambiguate.\n *\/"
            },
            {
                "name": "setFirstDayOfWeek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dayOfWeek",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the day on which the week is deemed to start\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.setfirstdayofweek.php\n * @param dayOfWeek int <p>\n * One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY.\n * <\/p>\n * @return bool true on success. Failure can only happen due to invalid parameters.\n *\/"
            },
            {
                "name": "setLenient",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "isLenient",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set whether date\/time interpretation is to be lenient\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.setlenient.php\n * @param isLenient string <p>\n * Use true to activate the lenient mode; false otherwise.\n * <\/p>\n * @return ReturnType true on success. Failure can only happen due to invalid parameters.\n *\/"
            },
            {
                "name": "setMinimalDaysInFirstWeek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "minimalDays",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set minimal number of days the first week in a year or month can have\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.setminimaldaysinfirstweek.php\n * @param minimalDays int <p>\n * The number of minimal days to set.\n * <\/p>\n * @return bool true on success, false on failure.\n *\/"
            },
            {
                "name": "equals",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Compare time of two IntlCalendar objects for equality\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.equals.php\n * @param other IntlCalendar <p>\n * The calendar to compare with the primary object.\n * <\/p>\n * @return bool true if the current time of both this and the passed in\n * IntlCalendar object are the same, or false\n * otherwise. The value false can also be returned on failure. This can only\n * happen if bad arguments are passed in. In any case, the two cases can be\n * distinguished by calling intl_get_error_code.\n *\/"
            },
            {
                "name": "fromDateTime",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "dateTime",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an IntlCalendar from a DateTime object or string\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.fromdatetime.php\n * @param dateTime mixed <p>\n * A DateTime object or a string that\n * can be passed to DateTime::__construct.\n * <\/p>\n * @return IntlCalendar The created IntlCalendar object or &null; in case of\n * failure. If a string is passed, any exception that occurs\n * inside the DateTime constructor is propagated.\n *\/"
            },
            {
                "name": "toDateTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Convert an IntlCalendar into a DateTime object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.todatetime.php\n * @return DateTime A DateTime object with the same timezone as this\n * object (though using PHP\u02bcs database instead of ICU\u02bcs) and the same time,\n * except for the smaller precision (second precision instead of millisecond).\n * Returns false on failure.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.geterrorcode.php\n * @return int An ICU error code indicating either success, failure or a warning.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.geterrormessage.php\n * @return string The error message associated with last error that occurred in a function call\n * on this object, or a string indicating the non-existance of an error.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "FIELD_ERA",
                "value": 0,
                "doc": null
            },
            {
                "name": "FIELD_YEAR",
                "value": 1,
                "doc": null
            },
            {
                "name": "FIELD_MONTH",
                "value": 2,
                "doc": null
            },
            {
                "name": "FIELD_WEEK_OF_YEAR",
                "value": 3,
                "doc": null
            },
            {
                "name": "FIELD_WEEK_OF_MONTH",
                "value": 4,
                "doc": null
            },
            {
                "name": "FIELD_DATE",
                "value": 5,
                "doc": null
            },
            {
                "name": "FIELD_DAY_OF_YEAR",
                "value": 6,
                "doc": null
            },
            {
                "name": "FIELD_DAY_OF_WEEK",
                "value": 7,
                "doc": null
            },
            {
                "name": "FIELD_DAY_OF_WEEK_IN_MONTH",
                "value": 8,
                "doc": null
            },
            {
                "name": "FIELD_AM_PM",
                "value": 9,
                "doc": null
            },
            {
                "name": "FIELD_HOUR",
                "value": 10,
                "doc": null
            },
            {
                "name": "FIELD_HOUR_OF_DAY",
                "value": 11,
                "doc": null
            },
            {
                "name": "FIELD_MINUTE",
                "value": 12,
                "doc": null
            },
            {
                "name": "FIELD_SECOND",
                "value": 13,
                "doc": null
            },
            {
                "name": "FIELD_MILLISECOND",
                "value": 14,
                "doc": null
            },
            {
                "name": "FIELD_ZONE_OFFSET",
                "value": 15,
                "doc": null
            },
            {
                "name": "FIELD_DST_OFFSET",
                "value": 16,
                "doc": null
            },
            {
                "name": "FIELD_YEAR_WOY",
                "value": 17,
                "doc": null
            },
            {
                "name": "FIELD_DOW_LOCAL",
                "value": 18,
                "doc": null
            },
            {
                "name": "FIELD_EXTENDED_YEAR",
                "value": 19,
                "doc": null
            },
            {
                "name": "FIELD_JULIAN_DAY",
                "value": 20,
                "doc": null
            },
            {
                "name": "FIELD_MILLISECONDS_IN_DAY",
                "value": 21,
                "doc": null
            },
            {
                "name": "FIELD_IS_LEAP_MONTH",
                "value": 22,
                "doc": null
            },
            {
                "name": "FIELD_FIELD_COUNT",
                "value": 23,
                "doc": null
            },
            {
                "name": "FIELD_DAY_OF_MONTH",
                "value": 5,
                "doc": null
            },
            {
                "name": "DOW_SUNDAY",
                "value": 1,
                "doc": null
            },
            {
                "name": "DOW_MONDAY",
                "value": 2,
                "doc": null
            },
            {
                "name": "DOW_TUESDAY",
                "value": 3,
                "doc": null
            },
            {
                "name": "DOW_WEDNESDAY",
                "value": 4,
                "doc": null
            },
            {
                "name": "DOW_THURSDAY",
                "value": 5,
                "doc": null
            },
            {
                "name": "DOW_FRIDAY",
                "value": 6,
                "doc": null
            },
            {
                "name": "DOW_SATURDAY",
                "value": 7,
                "doc": null
            },
            {
                "name": "DOW_TYPE_WEEKDAY",
                "value": 0,
                "doc": null
            },
            {
                "name": "DOW_TYPE_WEEKEND",
                "value": 1,
                "doc": null
            },
            {
                "name": "DOW_TYPE_WEEKEND_OFFSET",
                "value": 2,
                "doc": null
            },
            {
                "name": "DOW_TYPE_WEEKEND_CEASE",
                "value": 3,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlGregorianCalendar",
        "fqn": "\\IntlGregorianCalendar",
        "type": 0,
        "extends": "IntlCalendar",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "timeZoneOrYear",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "localeOrMonth",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "dayOfMonth",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "hour",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "minute",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "second",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param timeZoneOrYear[optional]\n * @param localeOrMonth[optional]\n * @param dayOfMonth[optional]\n * @param hour[optional]\n * @param minute[optional]\n * @param second[optional]\n *\/"
            },
            {
                "name": "setGregorianChange",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "date",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param date\n *\/"
            },
            {
                "name": "getGregorianChange",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "isLeapYear",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "year",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param year\n *\/"
            },
            {
                "name": "createInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "timeZone",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create a new IntlCalendar\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.createinstance.php\n * @param timeZone mixed[optional] <p>\n * The timezone to use.\n * <\/p>\n * &reference.intl.inctimezoneparam;\n * @param locale string[optional] <p>\n * A locale to use or &null; to use the default locale.\n * <\/p>\n * @return IntlCalendar The created IntlCalendar instance or &null; on\n * failure.\n *\/"
            },
            {
                "name": "getKeywordValuesForLocale",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "locale",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "commonlyUsed",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get set of locale keyword values\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getkeywordvaluesforlocale.php\n * @param key string <p>\n * The locale keyword for which relevant values are to be queried. Only\n * 'calendar' is supported.\n * <\/p>\n * @param locale string <p>\n * The locale onto which the keyword\/value pair are to be appended.\n * <\/p>\n * @param commonlyUsed boolean <p>\n * Whether to show only the values commonly used for the specified locale.\n * <\/p>\n * @return Iterator An iterator that yields strings with the locale keyword\n * values or false on failure.\n *\/"
            },
            {
                "name": "getNow",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get number representing the current time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getnow.php\n * @return float A float representing a number of milliseconds since the epoch,\n * not counting leap seconds.\n *\/"
            },
            {
                "name": "getAvailableLocales",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get array of locales for which there is data\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getavailablelocales.php\n * @return array An array of strings, one for which locale.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.get.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An integer with the value of the time field.\n *\/"
            },
            {
                "name": "getTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get time currently represented by the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.gettime.php\n * @return float A float representing the number of milliseconds elapsed since the\n * reference time (1 Jan 1970 00:00:00 UTC).\n *\/"
            },
            {
                "name": "setTime",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "date",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the calendar time in milliseconds since the epoch\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.settime.php\n * @param date float <p>\n * An instant represented by the number of number of milliseconds between\n * such instant and the epoch, ignoring leap seconds.\n * <\/p>\n * @return bool true on success and false on failure.\n *\/"
            },
            {
                "name": "add",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "amount",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add a (signed) amount of time to a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.add.php\n * @param field int &reference.intl.incfieldparam;\n * @param amount int <p>\n * The signed amount to add to the current field. If the amount is positive,\n * the instant will be moved forward; if it is negative, the instant wil be\n * moved into the past. The unit is implicit to the field type. For instance,\n * hours for IntlCalendar::FIELD_HOUR_OF_DAY.\n * <\/p>\n * @return bool true on success or false on failure.\n *\/"
            },
            {
                "name": "setTimeZone",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "timeZone",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the timezone used by this calendar\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.settimezone.php\n * @param timeZone mixed <p>\n * The new timezone to be used by this calendar. It can be specified in the\n * following ways:\n * &reference.intl.inctimezoneparam;\n * <\/p>\n * @return bool true on success and false on failure.\n *\/"
            },
            {
                "name": "after",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Whether this object\u02bcs time is after that of the passed object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.after.php\n * @param other IntlCalendar <p>\n * The calendar whose time will be checked against the primary object\u02bcs time.\n * <\/p>\n * @return bool true if this object\u02bcs current time is after that of the\n * calendar argument\u02bcs time. Returns false otherwise.\n * Also returns false on failure. You can use exceptions or\n * intl_get_error_code to detect error conditions.\n *\/"
            },
            {
                "name": "before",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Whether this object\u02bcs time is before that of the passed object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.before.php\n * @param other IntlCalendar <p>\n * The calendar whose time will be checked against the primary object\u02bcs time.\n * <\/p>\n * @return bool true if this object\u02bcs current time is before that of the\n * calendar argument\u02bcs time. Returns false otherwise.\n * Also returns false on failure. You can use exceptions or\n * intl_get_error_code to detect error conditions.\n *\/"
            },
            {
                "name": "set",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set a time field or several common fields at once\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.set.php\n * @param field int &reference.intl.incfieldparam;\n * @param value int <p>\n * The new value of the given field.\n * <\/p>\n * @return bool true on success and false on failure.\n *\/"
            },
            {
                "name": "roll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "amountOrUpOrDown",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Add value to field without carrying into more significant fields\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.roll.php\n * @param field int &reference.intl.incfieldparam;\n * @param amountOrUpOrDown mixed <p>\n * The (signed) amount to add to the field, true for rolling up (adding\n * 1), or false for rolling down (subtracting\n * 1).\n * <\/p>\n * @return bool true on success or false on failure.\n *\/"
            },
            {
                "name": "clear",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Clear a field or all fields\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.clear.php\n * @param field int[optional] &reference.intl.incfieldparam;\n * @return bool true on success or false on failure. Failure can only occur is\n * invalid arguments are provided.\n *\/"
            },
            {
                "name": "fieldDifference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "when",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Calculate difference between given time and this object\u02bcs time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.fielddifference.php\n * @param when float <p>\n * The time against which to compare the quantity represented by the\n * field. For the result to be positive, the time\n * given for this parameter must be ahead of the time of the object the\n * method is being invoked on.\n * <\/p>\n * @param field int <p>\n * The field that represents the quantity being compared.\n * <\/p>\n * &reference.intl.incfieldparam;\n * @return int a (signed) difference of time in the unit associated with the\n * specified field or false on failure.\n *\/"
            },
            {
                "name": "getActualMaximum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * The maximum value for a field, considering the object\u02bcs current time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getactualmaximum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing the maximum value in the units associated\n * with the given field or false on failure.\n *\/"
            },
            {
                "name": "getActualMinimum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * The minimum value for a field, considering the object\u02bcs current time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getactualminimum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing the minimum value in the field\u02bcs\n * unit or false on failure.\n *\/"
            },
            {
                "name": "getDayOfWeekType",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dayOfWeek",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Tell whether a day is a weekday, weekend or a day that has a transition between the two\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getdayofweektype.php\n * @param dayOfWeek int <p>\n * One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY.\n * <\/p>\n * @return int one of the constants\n * IntlCalendar::DOW_TYPE_WEEKDAY,\n * IntlCalendar::DOW_TYPE_WEEKEND,\n * IntlCalendar::DOW_TYPE_WEEKEND_OFFSET or\n * IntlCalendar::DOW_TYPE_WEEKEND_CEASE or false on failure.\n *\/"
            },
            {
                "name": "getFirstDayOfWeek",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the first day of the week for the calendar\u02bcs locale\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getfirstdayofweek.php\n * @return int One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY or false on failure.\n *\/"
            },
            {
                "name": "getGreatestMinimum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the largest local minimum value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getgreatestminimum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a field value, in the field\u02bcs\n * unit, or false on failure.\n *\/"
            },
            {
                "name": "getLeastMaximum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the smallest local maximum for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getleastmaximum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a field value in the field\u02bcs\n * unit or false on failure.\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "localeType",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the locale associated with the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getlocale.php\n * @param localeType int <p>\n * Whether to fetch the actual locale (the locale from which the calendar\n * data originates, with Locale::ACTUAL_LOCALE) or the\n * valid locale, i.e., the most specific locale supported by ICU relatively\n * to the requested locale \u2013 see Locale::VALID_LOCALE.\n * From the most general to the most specific, the locales are ordered in\n * this fashion \u2013 actual locale, valid locale, requested locale.\n * <\/p>\n * @return string A locale string or false on failure.\n *\/"
            },
            {
                "name": "getMaximum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the global maximum value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getmaximum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a field value in the field\u02bcs\n * unit or false on failure.\n *\/"
            },
            {
                "name": "getMinimalDaysInFirstWeek",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get minimal number of days the first week in a year or month can have\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getminimaldaysinfirstweek.php\n * @return int An int representing a number of days or false on failure.\n *\/"
            },
            {
                "name": "getMinimum",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "field",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the global minimum value for a field\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getminimum.php\n * @param field int &reference.intl.incfieldparam;\n * @return int An int representing a value for the given\n * field in the field\u02bcs unit or false on failure.\n *\/"
            },
            {
                "name": "getTimeZone",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the object\u02bcs timezone\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.gettimezone.php\n * @return IntlTimeZone An IntlTimeZone object corresponding to the one used\n * internally in this object.\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the calendar type\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.gettype.php\n * @return string A string representing the calendar type, such as\n * 'gregorian', 'islamic', etc.\n *\/"
            },
            {
                "name": "getWeekendTransition",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dayOfWeek",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get time of the day at which weekend begins or ends\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.getweekendtransition.php\n * @param dayOfWeek string <p>\n * One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY.\n * <\/p>\n * @return int The number of milliseconds into the day at which the the weekend begins or\n * ends or false on failure.\n *\/"
            },
            {
                "name": "inDaylightTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Whether the object\u02bcs time is in Daylight Savings Time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.indaylighttime.php\n * @return bool true if the date is in Daylight Savings Time, false otherwise.\n * The value false may also be returned on failure, for instance after\n * specifying invalid field values on non-lenient mode; use exceptions or query\n * intl_get_error_code to disambiguate.\n *\/"
            },
            {
                "name": "isEquivalentTo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Whether another calendar is equal but for a different time\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.isequivalentto.php\n * @param other IntlCalendar <p>\n * The other calendar against which the comparison is to be made.\n * <\/p>\n * @return bool Assuming there are no argument errors, returns true iif the calendars are\n * equivalent except possibly for their set time.\n *\/"
            },
            {
                "name": "isLenient",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Whether date\/time interpretation is in lenient mode\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.islenient.php\n * @return bool A bool representing whether the calendar is set to lenient mode.\n *\/"
            },
            {
                "name": "isWeekend",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "date",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Whether a certain date\/time is in the weekend\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.isweekend.php\n * @param date float[optional] <p>\n * An optional timestamp representing the number of milliseconds since the\n * epoch, excluding leap seconds. If &null;, this object\u02bcs current time is\n * used instead.\n * <\/p>\n * @return bool A bool indicating whether the given or this object\u02bcs time occurs\n * in a weekend.\n * <\/p>\n * <p>\n * The value false may also be returned on failure, for instance after giving\n * a date out of bounds on non-lenient mode; use exceptions or query\n * intl_get_error_code to disambiguate.\n *\/"
            },
            {
                "name": "setFirstDayOfWeek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dayOfWeek",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the day on which the week is deemed to start\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.setfirstdayofweek.php\n * @param dayOfWeek int <p>\n * One of the constants IntlCalendar::DOW_SUNDAY,\n * IntlCalendar::DOW_MONDAY, \u2026,\n * IntlCalendar::DOW_SATURDAY.\n * <\/p>\n * @return bool true on success. Failure can only happen due to invalid parameters.\n *\/"
            },
            {
                "name": "setLenient",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "isLenient",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set whether date\/time interpretation is to be lenient\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.setlenient.php\n * @param isLenient string <p>\n * Use true to activate the lenient mode; false otherwise.\n * <\/p>\n * @return ReturnType true on success. Failure can only happen due to invalid parameters.\n *\/"
            },
            {
                "name": "setMinimalDaysInFirstWeek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "minimalDays",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set minimal number of days the first week in a year or month can have\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.setminimaldaysinfirstweek.php\n * @param minimalDays int <p>\n * The number of minimal days to set.\n * <\/p>\n * @return bool true on success, false on failure.\n *\/"
            },
            {
                "name": "equals",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "other",
                        "type": "IntlCalendar",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Compare time of two IntlCalendar objects for equality\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.equals.php\n * @param other IntlCalendar <p>\n * The calendar to compare with the primary object.\n * <\/p>\n * @return bool true if the current time of both this and the passed in\n * IntlCalendar object are the same, or false\n * otherwise. The value false can also be returned on failure. This can only\n * happen if bad arguments are passed in. In any case, the two cases can be\n * distinguished by calling intl_get_error_code.\n *\/"
            },
            {
                "name": "fromDateTime",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "dateTime",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create an IntlCalendar from a DateTime object or string\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.fromdatetime.php\n * @param dateTime mixed <p>\n * A DateTime object or a string that\n * can be passed to DateTime::__construct.\n * <\/p>\n * @return IntlCalendar The created IntlCalendar object or &null; in case of\n * failure. If a string is passed, any exception that occurs\n * inside the DateTime constructor is propagated.\n *\/"
            },
            {
                "name": "toDateTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Convert an IntlCalendar into a DateTime object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.todatetime.php\n * @return DateTime A DateTime object with the same timezone as this\n * object (though using PHP\u02bcs database instead of ICU\u02bcs) and the same time,\n * except for the smaller precision (second precision instead of millisecond).\n * Returns false on failure.\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.geterrorcode.php\n * @return int An ICU error code indicating either success, failure or a warning.\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlcalendar.geterrormessage.php\n * @return string The error message associated with last error that occurred in a function call\n * on this object, or a string indicating the non-existance of an error.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "Spoofchecker",
        "fqn": "\\Spoofchecker",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Constructor\n * @link http:\/\/www.php.net\/manual\/en\/spoofchecker.construct.php\n *\/"
            },
            {
                "name": "isSuspicious",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "text",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "error",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Checks if a given text contains any suspicious characters\n * @link http:\/\/www.php.net\/manual\/en\/spoofchecker.issuspicious.php\n * @param text string <p>\n * <\/p>\n * @param error string[optional] <p>\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "areConfusable",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "s1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "s2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "error",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Checks if a given text contains any confusable characters\n * @link http:\/\/www.php.net\/manual\/en\/spoofchecker.areconfusable.php\n * @param s1 string <p>\n * <\/p>\n * @param s2 string <p>\n * <\/p>\n * @param error string[optional] <p>\n * <\/p>\n * @return bool\n *\/"
            },
            {
                "name": "setAllowedLocales",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "locale_list",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Locales to use when running checks\n * @link http:\/\/www.php.net\/manual\/en\/spoofchecker.setallowedlocales.php\n * @param locale_list string <p>\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setChecks",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "checks",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the checks to run\n * @link http:\/\/www.php.net\/manual\/en\/spoofchecker.setchecks.php\n * @param checks string <p>\n * <\/p>\n * @return void\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "SINGLE_SCRIPT_CONFUSABLE",
                "value": 1,
                "doc": null
            },
            {
                "name": "MIXED_SCRIPT_CONFUSABLE",
                "value": 2,
                "doc": null
            },
            {
                "name": "WHOLE_SCRIPT_CONFUSABLE",
                "value": 4,
                "doc": null
            },
            {
                "name": "ANY_CASE",
                "value": 8,
                "doc": null
            },
            {
                "name": "SINGLE_SCRIPT",
                "value": 16,
                "doc": null
            },
            {
                "name": "INVISIBLE",
                "value": 32,
                "doc": null
            },
            {
                "name": "CHAR_LIMIT",
                "value": 64,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlException",
        "fqn": "\\IntlException",
        "type": 0,
        "extends": "Exception",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param message[optional]\n * @param code[optional]\n * @param previous[optional]\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlIterator",
        "fqn": "\\IntlIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the current element\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.current.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the current key\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.key.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Move forward to the next element\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.next.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rewind the iterator to the first element\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.rewind.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check if curent position is valid\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.valid.php\n * @return ReturnType\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlBreakIterator",
        "fqn": "\\IntlBreakIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "createWordInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for word breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createwordinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createLineInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for logically possible line breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createlineinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createCharacterInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for boundaries of combining character sequences\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createcharacterinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createSentenceInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for sentence breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createsentenceinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createTitleInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for title-casing breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createtitleinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createCodePointInstance",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create break iterator for boundaries of code points\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createcodepointinstance.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getText",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the text being scanned\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.gettext.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "setText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_text_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the text being scanned\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.settext.php\n * @param _text_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "first",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set position to the first character in the text\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.first.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "last",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set the iterator position to index beyond the last character\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.last.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "previous",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set the iterator position to the boundary immediately before the current\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.previous.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Advance the iterator the next boundary\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.next.php\n * @param _offset_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get index of current position\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.current.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "following",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Advance the iterator to the first boundary following specified offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.following.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "preceding",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the iterator position to the first boundary before an offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.preceding.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "isBoundary",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Tell whether an offset is a boundary\u02bcs offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.isboundary.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_type_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the locale associated with the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.getlocale.php\n * @param _locale_type_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "getPartsIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_key_type_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create iterator for navigating fragments between boundaries\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.getpartsiterator.php\n * @param _key_type_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.geterrorcode.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.geterrormessage.php\n * @return ReturnType\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DONE",
                "value": null,
                "doc": null
            },
            {
                "name": "WORD_NONE",
                "value": 0,
                "doc": null
            },
            {
                "name": "WORD_NONE_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "WORD_NUMBER",
                "value": 100,
                "doc": null
            },
            {
                "name": "WORD_NUMBER_LIMIT",
                "value": 200,
                "doc": null
            },
            {
                "name": "WORD_LETTER",
                "value": 200,
                "doc": null
            },
            {
                "name": "WORD_LETTER_LIMIT",
                "value": 300,
                "doc": null
            },
            {
                "name": "WORD_KANA",
                "value": 300,
                "doc": null
            },
            {
                "name": "WORD_KANA_LIMIT",
                "value": 400,
                "doc": null
            },
            {
                "name": "WORD_IDEO",
                "value": 400,
                "doc": null
            },
            {
                "name": "WORD_IDEO_LIMIT",
                "value": 500,
                "doc": null
            },
            {
                "name": "LINE_SOFT",
                "value": 0,
                "doc": null
            },
            {
                "name": "LINE_SOFT_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "LINE_HARD",
                "value": 100,
                "doc": null
            },
            {
                "name": "LINE_HARD_LIMIT",
                "value": 200,
                "doc": null
            },
            {
                "name": "SENTENCE_TERM",
                "value": 0,
                "doc": null
            },
            {
                "name": "SENTENCE_TERM_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "SENTENCE_SEP",
                "value": 100,
                "doc": null
            },
            {
                "name": "SENTENCE_SEP_LIMIT",
                "value": 200,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlRuleBasedBreakIterator",
        "fqn": "\\IntlRuleBasedBreakIterator",
        "type": 0,
        "extends": "IntlBreakIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "rules",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "areCompiled",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create iterator from ruleset\n * @link http:\/\/www.php.net\/manual\/en\/intlrulebasedbreakiterator.construct.php\n * @param rules\n * @param areCompiled[optional]\n *\/"
            },
            {
                "name": "getRules",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the rule set used to create this object\n * @link http:\/\/www.php.net\/manual\/en\/intlrulebasedbreakiterator.getrules.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getRuleStatus",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the largest status value from the break rules that determined the current break position\n * @link http:\/\/www.php.net\/manual\/en\/intlrulebasedbreakiterator.getrulestatus.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getRuleStatusVec",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the status values from the break rules that determined the current break position\n * @link http:\/\/www.php.net\/manual\/en\/intlrulebasedbreakiterator.getrulestatusvec.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "createWordInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for word breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createwordinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createLineInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for logically possible line breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createlineinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createCharacterInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for boundaries of combining character sequences\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createcharacterinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createSentenceInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for sentence breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createsentenceinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createTitleInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for title-casing breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createtitleinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createCodePointInstance",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create break iterator for boundaries of code points\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createcodepointinstance.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getText",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the text being scanned\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.gettext.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "setText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_text_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the text being scanned\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.settext.php\n * @param _text_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "first",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set position to the first character in the text\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.first.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "last",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set the iterator position to index beyond the last character\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.last.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "previous",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set the iterator position to the boundary immediately before the current\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.previous.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Advance the iterator the next boundary\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.next.php\n * @param _offset_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get index of current position\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.current.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "following",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Advance the iterator to the first boundary following specified offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.following.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "preceding",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the iterator position to the first boundary before an offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.preceding.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "isBoundary",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Tell whether an offset is a boundary\u02bcs offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.isboundary.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_type_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the locale associated with the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.getlocale.php\n * @param _locale_type_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "getPartsIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_key_type_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create iterator for navigating fragments between boundaries\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.getpartsiterator.php\n * @param _key_type_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.geterrorcode.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.geterrormessage.php\n * @return ReturnType\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DONE",
                "value": null,
                "doc": null
            },
            {
                "name": "WORD_NONE",
                "value": 0,
                "doc": null
            },
            {
                "name": "WORD_NONE_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "WORD_NUMBER",
                "value": 100,
                "doc": null
            },
            {
                "name": "WORD_NUMBER_LIMIT",
                "value": 200,
                "doc": null
            },
            {
                "name": "WORD_LETTER",
                "value": 200,
                "doc": null
            },
            {
                "name": "WORD_LETTER_LIMIT",
                "value": 300,
                "doc": null
            },
            {
                "name": "WORD_KANA",
                "value": 300,
                "doc": null
            },
            {
                "name": "WORD_KANA_LIMIT",
                "value": 400,
                "doc": null
            },
            {
                "name": "WORD_IDEO",
                "value": 400,
                "doc": null
            },
            {
                "name": "WORD_IDEO_LIMIT",
                "value": 500,
                "doc": null
            },
            {
                "name": "LINE_SOFT",
                "value": 0,
                "doc": null
            },
            {
                "name": "LINE_SOFT_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "LINE_HARD",
                "value": 100,
                "doc": null
            },
            {
                "name": "LINE_HARD_LIMIT",
                "value": 200,
                "doc": null
            },
            {
                "name": "SENTENCE_TERM",
                "value": 0,
                "doc": null
            },
            {
                "name": "SENTENCE_TERM_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "SENTENCE_SEP",
                "value": 100,
                "doc": null
            },
            {
                "name": "SENTENCE_SEP_LIMIT",
                "value": 200,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlCodePointBreakIterator",
        "fqn": "\\IntlCodePointBreakIterator",
        "type": 0,
        "extends": "IntlBreakIterator",
        "methods": [
            {
                "name": "getLastCodePoint",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last code point passed over after advancing or receding the iterator\n * @link http:\/\/www.php.net\/manual\/en\/intlcodepointbreakiterator.getlastcodepoint.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "createWordInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for word breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createwordinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createLineInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for logically possible line breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createlineinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createCharacterInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for boundaries of combining character sequences\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createcharacterinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createSentenceInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for sentence breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createsentenceinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createTitleInstance",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create break iterator for title-casing breaks\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createtitleinstance.php\n * @param _locale_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "createCodePointInstance",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Create break iterator for boundaries of code points\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.createcodepointinstance.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getText",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the text being scanned\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.gettext.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "setText",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_text_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the text being scanned\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.settext.php\n * @param _text_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "first",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set position to the first character in the text\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.first.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "last",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set the iterator position to index beyond the last character\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.last.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "previous",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Set the iterator position to the boundary immediately before the current\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.previous.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Advance the iterator the next boundary\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.next.php\n * @param _offset_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get index of current position\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.current.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "following",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Advance the iterator to the first boundary following specified offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.following.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "preceding",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the iterator position to the first boundary before an offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.preceding.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "isBoundary",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_offset_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Tell whether an offset is a boundary\u02bcs offset\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.isboundary.php\n * @param _offset_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "getLocale",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_locale_type_",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Get the locale associated with the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.getlocale.php\n * @param _locale_type_ string\n * @return ReturnType\n *\/"
            },
            {
                "name": "getPartsIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "_key_type_",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Create iterator for navigating fragments between boundaries\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.getpartsiterator.php\n * @param _key_type_ string[optional]\n * @return ReturnType\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.geterrorcode.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/intlbreakiterator.geterrormessage.php\n * @return ReturnType\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DONE",
                "value": null,
                "doc": null
            },
            {
                "name": "WORD_NONE",
                "value": 0,
                "doc": null
            },
            {
                "name": "WORD_NONE_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "WORD_NUMBER",
                "value": 100,
                "doc": null
            },
            {
                "name": "WORD_NUMBER_LIMIT",
                "value": 200,
                "doc": null
            },
            {
                "name": "WORD_LETTER",
                "value": 200,
                "doc": null
            },
            {
                "name": "WORD_LETTER_LIMIT",
                "value": 300,
                "doc": null
            },
            {
                "name": "WORD_KANA",
                "value": 300,
                "doc": null
            },
            {
                "name": "WORD_KANA_LIMIT",
                "value": 400,
                "doc": null
            },
            {
                "name": "WORD_IDEO",
                "value": 400,
                "doc": null
            },
            {
                "name": "WORD_IDEO_LIMIT",
                "value": 500,
                "doc": null
            },
            {
                "name": "LINE_SOFT",
                "value": 0,
                "doc": null
            },
            {
                "name": "LINE_SOFT_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "LINE_HARD",
                "value": 100,
                "doc": null
            },
            {
                "name": "LINE_HARD_LIMIT",
                "value": 200,
                "doc": null
            },
            {
                "name": "SENTENCE_TERM",
                "value": 0,
                "doc": null
            },
            {
                "name": "SENTENCE_TERM_LIMIT",
                "value": 100,
                "doc": null
            },
            {
                "name": "SENTENCE_SEP",
                "value": 100,
                "doc": null
            },
            {
                "name": "SENTENCE_SEP_LIMIT",
                "value": 200,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IntlPartsIterator",
        "fqn": "\\IntlPartsIterator",
        "type": 0,
        "extends": "IntlIterator",
        "methods": [
            {
                "name": "getBreakIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get IntlBreakIterator backing this parts iterator\n * @link http:\/\/www.php.net\/manual\/en\/intlpartsiterator.getbreakiterator.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the current element\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.current.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the current key\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.key.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Move forward to the next element\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.next.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Rewind the iterator to the first element\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.rewind.php\n * @return ReturnType\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Check if curent position is valid\n * @link http:\/\/www.php.net\/manual\/en\/intliterator.valid.php\n * @return ReturnType\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "KEY_SEQUENTIAL",
                "value": 0,
                "doc": null
            },
            {
                "name": "KEY_LEFT",
                "value": 1,
                "doc": null
            },
            {
                "name": "KEY_RIGHT",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "UConverter",
        "fqn": "\\UConverter",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "destination_encoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "source_encoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Create UConverter object\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.construct.php\n * @param destination_encoding[optional]\n * @param source_encoding[optional]\n *\/"
            },
            {
                "name": "setSourceEncoding",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "encoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the source encoding\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.setsourceencoding.php\n * @param encoding string <p>\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "setDestinationEncoding",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "encoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the destination encoding\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.setdestinationencoding.php\n * @param encoding string <p>\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "getSourceEncoding",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the source encoding\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getsourceencoding.php\n * @return string\n *\/"
            },
            {
                "name": "getDestinationEncoding",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the destination encoding\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getdestinationencoding.php\n * @return string\n *\/"
            },
            {
                "name": "getSourceType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the source convertor type\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getsourcetype.php\n * @return integer\n *\/"
            },
            {
                "name": "getDestinationType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the destination converter type\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getdestinationtype.php\n * @return integer\n *\/"
            },
            {
                "name": "getSubstChars",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get substitution chars\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getsubstchars.php\n * @return string\n *\/"
            },
            {
                "name": "setSubstChars",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "chars",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Set the substitution chars\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.setsubstchars.php\n * @param chars string <p>\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "toUCallback",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "reason",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "codeUnits",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "error",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Default \"to\" callback function\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.toucallback.php\n * @param reason integer <p>\n * <\/p>\n * @param source string <p>\n * <\/p>\n * @param codeUnits string <p>\n * <\/p>\n * @param error integer <p>\n * <\/p>\n * @return mixed\n *\/"
            },
            {
                "name": "fromUCallback",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "reason",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "source",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "codePoint",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "error",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Default \"from\" callback function\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.fromucallback.php\n * @param reason integer <p>\n * <\/p>\n * @param source string <p>\n * <\/p>\n * @param codePoint string <p>\n * <\/p>\n * @param error integer <p>\n * <\/p>\n * @return mixed\n *\/"
            },
            {
                "name": "convert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "reverse",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Convert string from one charset to another\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.convert.php\n * @param str string <p>\n * <\/p>\n * @param reverse bool[optional] <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "transcode",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "toEncoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fromEncoding",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Convert string from one charset to another\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.transcode.php\n * @param str string <p>\n * <\/p>\n * @param toEncoding string <p>\n * <\/p>\n * @param fromEncoding string <p>\n * <\/p>\n * @param options array[optional] <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "getErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error code on the object\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.geterrorcode.php\n * @return integer\n *\/"
            },
            {
                "name": "getErrorMessage",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get last error message on the object\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.geterrormessage.php\n * @return string\n *\/"
            },
            {
                "name": "reasonText",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "reason",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get string representation of the callback reason\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.reasontext.php\n * @param reason integer[optional] <p>\n * <\/p>\n * @return string\n *\/"
            },
            {
                "name": "getAvailable",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get the available canonical converter names\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getavailable.php\n * @return array\n *\/"
            },
            {
                "name": "getAliases",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get the aliases of the given name\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getaliases.php\n * @param name string[optional] <p>\n * <\/p>\n * @return array\n *\/"
            },
            {
                "name": "getStandards",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Get standards associated to converter names\n * @link http:\/\/www.php.net\/manual\/en\/uconverter.getstandards.php\n * @return array\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "REASON_UNASSIGNED",
                "value": 0,
                "doc": null
            },
            {
                "name": "REASON_ILLEGAL",
                "value": 1,
                "doc": null
            },
            {
                "name": "REASON_IRREGULAR",
                "value": 2,
                "doc": null
            },
            {
                "name": "REASON_RESET",
                "value": 3,
                "doc": null
            },
            {
                "name": "REASON_CLOSE",
                "value": 4,
                "doc": null
            },
            {
                "name": "REASON_CLONE",
                "value": 5,
                "doc": null
            },
            {
                "name": "UNSUPPORTED_CONVERTER",
                "value": null,
                "doc": null
            },
            {
                "name": "SBCS",
                "value": 0,
                "doc": null
            },
            {
                "name": "DBCS",
                "value": 1,
                "doc": null
            },
            {
                "name": "MBCS",
                "value": 2,
                "doc": null
            },
            {
                "name": "LATIN_1",
                "value": 3,
                "doc": null
            },
            {
                "name": "UTF8",
                "value": 4,
                "doc": null
            },
            {
                "name": "UTF16_BigEndian",
                "value": 5,
                "doc": null
            },
            {
                "name": "UTF16_LittleEndian",
                "value": 6,
                "doc": null
            },
            {
                "name": "UTF32_BigEndian",
                "value": 7,
                "doc": null
            },
            {
                "name": "UTF32_LittleEndian",
                "value": 8,
                "doc": null
            },
            {
                "name": "EBCDIC_STATEFUL",
                "value": 9,
                "doc": null
            },
            {
                "name": "ISO_2022",
                "value": 10,
                "doc": null
            },
            {
                "name": "LMBCS_1",
                "value": 11,
                "doc": null
            },
            {
                "name": "LMBCS_2",
                "value": 12,
                "doc": null
            },
            {
                "name": "LMBCS_3",
                "value": 13,
                "doc": null
            },
            {
                "name": "LMBCS_4",
                "value": 14,
                "doc": null
            },
            {
                "name": "LMBCS_5",
                "value": 15,
                "doc": null
            },
            {
                "name": "LMBCS_6",
                "value": 16,
                "doc": null
            },
            {
                "name": "LMBCS_8",
                "value": 17,
                "doc": null
            },
            {
                "name": "LMBCS_11",
                "value": 18,
                "doc": null
            },
            {
                "name": "LMBCS_16",
                "value": 19,
                "doc": null
            },
            {
                "name": "LMBCS_17",
                "value": 20,
                "doc": null
            },
            {
                "name": "LMBCS_18",
                "value": 21,
                "doc": null
            },
            {
                "name": "LMBCS_19",
                "value": 22,
                "doc": null
            },
            {
                "name": "LMBCS_LAST",
                "value": 22,
                "doc": null
            },
            {
                "name": "HZ",
                "value": 23,
                "doc": null
            },
            {
                "name": "SCSU",
                "value": 24,
                "doc": null
            },
            {
                "name": "ISCII",
                "value": 25,
                "doc": null
            },
            {
                "name": "US_ASCII",
                "value": 26,
                "doc": null
            },
            {
                "name": "UTF7",
                "value": 27,
                "doc": null
            },
            {
                "name": "BOCU1",
                "value": 28,
                "doc": null
            },
            {
                "name": "UTF16",
                "value": 29,
                "doc": null
            },
            {
                "name": "UTF32",
                "value": 30,
                "doc": null
            },
            {
                "name": "CESU8",
                "value": 31,
                "doc": null
            },
            {
                "name": "IMAP_MAILBOX",
                "value": 32,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_create",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_compare",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_attribute",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_set_attribute",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_strength",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_set_strength",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_sort",
        "params": [
            {
                "name": "objectarray",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arr",
                "type": null,
                "byRef": true,
                "default": ""
            },
            {
                "name": "sort_flags",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_sort_with_sort_keys",
        "params": [
            {
                "name": "objectarray",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arr",
                "type": null,
                "byRef": true,
                "default": ""
            },
            {
                "name": "sort_flags",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_asort",
        "params": [
            {
                "name": "objectarray",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arr",
                "type": null,
                "byRef": true,
                "default": ""
            },
            {
                "name": "sort_flags",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_locale",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_error_code",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_error_message",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "collator_get_sort_key",
        "params": [
            {
                "name": "object",
                "type": "Collator",
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "style",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_format",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "num",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_parse",
        "params": [
            {
                "name": "formatter",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "string",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_format_currency",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "num",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "currency",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_parse_currency",
        "params": [
            {
                "name": "formatter",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "string",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "currency",
                "type": null,
                "byRef": true,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_attribute",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_attribute",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_text_attribute",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "value",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_text_attribute",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_symbol",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "symbol",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_symbol",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "attr",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_set_pattern",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_pattern",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_locale",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "type",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_error_code",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "numfmt_get_error_message",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "normalizer_normalize",
        "params": [
            {
                "name": "input",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "form",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "normalizer_is_normalized",
        "params": [
            {
                "name": "input",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "form",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_default",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_set_default",
        "params": [
            {
                "name": "name",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_primary_language",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_script",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_region",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_keywords",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_script",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_region",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_name",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_language",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_display_variant",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_compose",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_parse",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_get_all_variants",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_filter_matches",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg3",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_canonicalize",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_lookup",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg2",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg3",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "arg4",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "locale_accept_from_http",
        "params": [
            {
                "name": "arg1",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_format",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "args",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_format_message",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "args",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_parse",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "source",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_parse_message",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "source",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_set_pattern",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_pattern",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_locale",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_error_code",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "msgfmt_get_error_message",
        "params": [
            {
                "name": "coll",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "date_type",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "time_type",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "timezone_str",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "calendar",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_datetype",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_timetype",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_calendar",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_calendar_object",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_calendar",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "calendar",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_locale",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_timezone_id",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_timezone_id",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "timezone",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_timezone",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_timezone",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "timezone",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_pattern",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_pattern",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "pattern",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_is_lenient",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_set_lenient",
        "params": [
            {
                "name": "mf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_format",
        "params": [
            {
                "name": "args",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "array",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_format_object",
        "params": [
            {
                "name": "object",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "format",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_parse",
        "params": [
            {
                "name": "formatter",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "string",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_localtime",
        "params": [
            {
                "name": "formatter",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "string",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "position",
                "type": null,
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_error_code",
        "params": [
            {
                "name": "nf",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "datefmt_get_error_message",
        "params": [
            {
                "name": "coll",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strlen",
        "params": [
            {
                "name": "input",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strpos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_stripos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strrpos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strripos",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "offset",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_substr",
        "params": [
            {
                "name": "string",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "start",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "length",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_strstr",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "before_needle",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_stristr",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "needle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "before_needle",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "grapheme_extract",
        "params": [
            {
                "name": "haystack",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "size",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "extract_type",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "start",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "next",
                "type": null,
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "idn_to_ascii",
        "params": [
            {
                "name": "utf8_domain",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "errorcode",
                "type": null,
                "byRef": true,
                "default": null
            },
            {
                "name": "domain",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "options",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "variant",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "idna_info",
                "type": "array",
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "idn_to_utf8",
        "params": [
            {
                "name": "ascii_domain",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "errorcode",
                "type": null,
                "byRef": true,
                "default": null
            },
            {
                "name": "domain",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "options",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "variant",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "idna_info",
                "type": "array",
                "byRef": true,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_create",
        "params": [
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "bundlename",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "fallback",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_get",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "index",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "fallback",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_count",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_locales",
        "params": [
            {
                "name": "bundlename",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_get_error_code",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "resourcebundle_get_error_message",
        "params": [
            {
                "name": "bundle",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_create",
        "params": [
            {
                "name": "id",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "direction",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_create_from_rules",
        "params": [
            {
                "name": "rules",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "direction",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_list_ids",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_create_inverse",
        "params": [
            {
                "name": "orig_trans",
                "type": "Transliterator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_transliterate",
        "params": [
            {
                "name": "trans",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "subject",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "start",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "end",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_get_error_code",
        "params": [
            {
                "name": "trans",
                "type": "Transliterator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "transliterator_get_error_message",
        "params": [
            {
                "name": "trans",
                "type": "Transliterator",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_create_time_zone",
        "params": [
            {
                "name": "zoneId",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_from_date_time_zone",
        "params": [
            {
                "name": "dateTimeZone",
                "type": "IntlDateTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_create_default",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_id",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_gmt",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_create_enumeration",
        "params": [
            {
                "name": "countryOrRawOffset",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_count_equivalent_ids",
        "params": [
            {
                "name": "zoneId",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_canonical_id",
        "params": [
            {
                "name": "zoneId",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "isSystemID",
                "type": null,
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_tz_data_version",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_equivalent_id",
        "params": [
            {
                "name": "zoneId",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "index",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_use_daylight_time",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_offset",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            },
            {
                "name": "date",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "local",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "rawOffset",
                "type": null,
                "byRef": true,
                "default": ""
            },
            {
                "name": "dstOffset",
                "type": null,
                "byRef": true,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_raw_offset",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_has_same_rules",
        "params": [
            {
                "name": "timeZoneIntlTimeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            },
            {
                "name": "otherTimeZone",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_display_name",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            },
            {
                "name": "isDaylight",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "style",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_dst_savings",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_to_date_time_zone",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_error_code",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intltz_get_error_message",
        "params": [
            {
                "name": "timeZone",
                "type": "IntlTimeZone",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_create_instance",
        "params": [
            {
                "name": "timeZone",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_keyword_values_for_locale",
        "params": [
            {
                "name": "key",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "locale",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "commonlyUsed",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_now",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_available_locales",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_time",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_set_time",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "date",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_add",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "amount",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_set_time_zone",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "timeZone",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_after",
        "params": [
            {
                "name": "calendarIntlCalendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "otherCalendar",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_before",
        "params": [
            {
                "name": "calendarIntlCalendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "otherCalendar",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_set",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "fieldOrYear",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "valueOrMonth",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "dayOfMonth",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "hour",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "minute",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "second",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_roll",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "amountOrUpOrDown",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_clear",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_field_difference",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "when",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_actual_maximum",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_actual_minimum",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_day_of_week_type",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "dayOfWeek",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_first_day_of_week",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_greatest_minimum",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_least_maximum",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_locale",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "localeType",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_maximum",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_minimal_days_in_first_week",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_minimum",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_time_zone",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_type",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_weekend_transition",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "dayOfWeek",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_in_daylight_time",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_is_equivalent_to",
        "params": [
            {
                "name": "calendarIntlCalendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "otherCalendar",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_is_lenient",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_is_set",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "field",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_is_weekend",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "date",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_set_first_day_of_week",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "dayOfWeek",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_set_lenient",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "isLenient",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_set_minimal_days_in_first_week",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "numberOfDays",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_equals",
        "params": [
            {
                "name": "calendarIntlCalendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "otherCalendar",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_from_date_time",
        "params": [
            {
                "name": "dateTime",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_to_date_time",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_error_code",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlcal_get_error_message",
        "params": [
            {
                "name": "calendar",
                "type": "IntlCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlgregcal_create_instance",
        "params": [
            {
                "name": "timeZoneOrYear",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "localeOrMonth",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "dayOfMonth",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "hour",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "minute",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "second",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlgregcal_set_gregorian_change",
        "params": [
            {
                "name": "calendar",
                "type": "IntlGregorianCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "date",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlgregcal_get_gregorian_change",
        "params": [
            {
                "name": "calendar",
                "type": "IntlGregorianCalendar",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intlgregcal_is_leap_year",
        "params": [
            {
                "name": "calendar",
                "type": "IntlGregorianCalendar",
                "byRef": false,
                "default": ""
            },
            {
                "name": "year",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_get_error_code",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_get_error_message",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_is_failure",
        "params": [
            {
                "name": "error_code",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "intl_error_name",
        "params": [
            {
                "name": "error_code",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Constant",
        "name": "INTL_MAX_LOCALE_LEN",
        "value": 80
    },
    {
        "stmtType": "Constant",
        "name": "INTL_ICU_VERSION",
        "value": "4.4.2"
    },
    {
        "stmtType": "Constant",
        "name": "INTL_ICU_DATA_VERSION",
        "value": "4.4.2"
    },
    {
        "stmtType": "Constant",
        "name": "ULOC_ACTUAL_LOCALE",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "ULOC_VALID_LOCALE",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "GRAPHEME_EXTR_COUNT",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "GRAPHEME_EXTR_MAXBYTES",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "GRAPHEME_EXTR_MAXCHARS",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "U_USING_FALLBACK_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_ERROR_WARNING_START",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_USING_DEFAULT_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_SAFECLONE_ALLOCATED_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_STATE_OLD_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_STRING_NOT_TERMINATED_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_SORT_KEY_TOO_SHORT_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_AMBIGUOUS_ALIAS_WARNING",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_DIFFERENT_UCA_VERSION",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_ERROR_WARNING_LIMIT",
        "value": null
    },
    {
        "stmtType": "Constant",
        "name": "U_ZERO_ERROR",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_ARGUMENT_ERROR",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "U_MISSING_RESOURCE_ERROR",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_FORMAT_ERROR",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "U_FILE_ACCESS_ERROR",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "U_INTERNAL_PROGRAM_ERROR",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "U_MESSAGE_PARSE_ERROR",
        "value": 6
    },
    {
        "stmtType": "Constant",
        "name": "U_MEMORY_ALLOCATION_ERROR",
        "value": 7
    },
    {
        "stmtType": "Constant",
        "name": "U_INDEX_OUTOFBOUNDS_ERROR",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "U_PARSE_ERROR",
        "value": 9
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_CHAR_FOUND",
        "value": 10
    },
    {
        "stmtType": "Constant",
        "name": "U_TRUNCATED_CHAR_FOUND",
        "value": 11
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_CHAR_FOUND",
        "value": 12
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_TABLE_FORMAT",
        "value": 13
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_TABLE_FILE",
        "value": 14
    },
    {
        "stmtType": "Constant",
        "name": "U_BUFFER_OVERFLOW_ERROR",
        "value": 15
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_ERROR",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "U_RESOURCE_TYPE_MISMATCH",
        "value": 17
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_ESCAPE_SEQUENCE",
        "value": 18
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_ESCAPE_SEQUENCE",
        "value": 19
    },
    {
        "stmtType": "Constant",
        "name": "U_NO_SPACE_AVAILABLE",
        "value": 20
    },
    {
        "stmtType": "Constant",
        "name": "U_CE_NOT_FOUND_ERROR",
        "value": 21
    },
    {
        "stmtType": "Constant",
        "name": "U_PRIMARY_TOO_LONG_ERROR",
        "value": 22
    },
    {
        "stmtType": "Constant",
        "name": "U_STATE_TOO_OLD_ERROR",
        "value": 23
    },
    {
        "stmtType": "Constant",
        "name": "U_TOO_MANY_ALIASES_ERROR",
        "value": 24
    },
    {
        "stmtType": "Constant",
        "name": "U_ENUM_OUT_OF_SYNC_ERROR",
        "value": 25
    },
    {
        "stmtType": "Constant",
        "name": "U_INVARIANT_CONVERSION_ERROR",
        "value": 26
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_STATE_ERROR",
        "value": 27
    },
    {
        "stmtType": "Constant",
        "name": "U_COLLATOR_VERSION_MISMATCH",
        "value": 28
    },
    {
        "stmtType": "Constant",
        "name": "U_USELESS_COLLATOR_ERROR",
        "value": 29
    },
    {
        "stmtType": "Constant",
        "name": "U_NO_WRITE_PERMISSION",
        "value": 30
    },
    {
        "stmtType": "Constant",
        "name": "U_STANDARD_ERROR_LIMIT",
        "value": 31
    },
    {
        "stmtType": "Constant",
        "name": "U_BAD_VARIABLE_DEFINITION",
        "value": 65536
    },
    {
        "stmtType": "Constant",
        "name": "U_PARSE_ERROR_START",
        "value": 65536
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_RULE",
        "value": 65537
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_SET",
        "value": 65538
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_SYMBOL_REFERENCE",
        "value": 65539
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_UNICODE_ESCAPE",
        "value": 65540
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_VARIABLE_DEFINITION",
        "value": 65541
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_VARIABLE_REFERENCE",
        "value": 65542
    },
    {
        "stmtType": "Constant",
        "name": "U_MISMATCHED_SEGMENT_DELIMITERS",
        "value": 65543
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_ANCHOR_START",
        "value": 65544
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_CURSOR_OFFSET",
        "value": 65545
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_QUANTIFIER",
        "value": 65546
    },
    {
        "stmtType": "Constant",
        "name": "U_MISSING_OPERATOR",
        "value": 65547
    },
    {
        "stmtType": "Constant",
        "name": "U_MISSING_SEGMENT_CLOSE",
        "value": 65548
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_ANTE_CONTEXTS",
        "value": 65549
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_CURSORS",
        "value": 65550
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_POST_CONTEXTS",
        "value": 65551
    },
    {
        "stmtType": "Constant",
        "name": "U_TRAILING_BACKSLASH",
        "value": 65552
    },
    {
        "stmtType": "Constant",
        "name": "U_UNDEFINED_SEGMENT_REFERENCE",
        "value": 65553
    },
    {
        "stmtType": "Constant",
        "name": "U_UNDEFINED_VARIABLE",
        "value": 65554
    },
    {
        "stmtType": "Constant",
        "name": "U_UNQUOTED_SPECIAL",
        "value": 65555
    },
    {
        "stmtType": "Constant",
        "name": "U_UNTERMINATED_QUOTE",
        "value": 65556
    },
    {
        "stmtType": "Constant",
        "name": "U_RULE_MASK_ERROR",
        "value": 65557
    },
    {
        "stmtType": "Constant",
        "name": "U_MISPLACED_COMPOUND_FILTER",
        "value": 65558
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_COMPOUND_FILTERS",
        "value": 65559
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_RBT_SYNTAX",
        "value": 65560
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_PROPERTY_PATTERN",
        "value": 65561
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_PRAGMA",
        "value": 65562
    },
    {
        "stmtType": "Constant",
        "name": "U_UNCLOSED_SEGMENT",
        "value": 65563
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_CHAR_IN_SEGMENT",
        "value": 65564
    },
    {
        "stmtType": "Constant",
        "name": "U_VARIABLE_RANGE_EXHAUSTED",
        "value": 65565
    },
    {
        "stmtType": "Constant",
        "name": "U_VARIABLE_RANGE_OVERLAP",
        "value": 65566
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_CHARACTER",
        "value": 65567
    },
    {
        "stmtType": "Constant",
        "name": "U_INTERNAL_TRANSLITERATOR_ERROR",
        "value": 65568
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_ID",
        "value": 65569
    },
    {
        "stmtType": "Constant",
        "name": "U_INVALID_FUNCTION",
        "value": 65570
    },
    {
        "stmtType": "Constant",
        "name": "U_PARSE_ERROR_LIMIT",
        "value": 65571
    },
    {
        "stmtType": "Constant",
        "name": "U_UNEXPECTED_TOKEN",
        "value": 65792
    },
    {
        "stmtType": "Constant",
        "name": "U_FMT_PARSE_ERROR_START",
        "value": 65792
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_DECIMAL_SEPARATORS",
        "value": 65793
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_DECIMAL_SEPERATORS",
        "value": 65793
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_EXPONENTIAL_SYMBOLS",
        "value": 65794
    },
    {
        "stmtType": "Constant",
        "name": "U_MALFORMED_EXPONENTIAL_PATTERN",
        "value": 65795
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_PERCENT_SYMBOLS",
        "value": 65796
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_PERMILL_SYMBOLS",
        "value": 65797
    },
    {
        "stmtType": "Constant",
        "name": "U_MULTIPLE_PAD_SPECIFIERS",
        "value": 65798
    },
    {
        "stmtType": "Constant",
        "name": "U_PATTERN_SYNTAX_ERROR",
        "value": 65799
    },
    {
        "stmtType": "Constant",
        "name": "U_ILLEGAL_PAD_POSITION",
        "value": 65800
    },
    {
        "stmtType": "Constant",
        "name": "U_UNMATCHED_BRACES",
        "value": 65801
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_PROPERTY",
        "value": 65802
    },
    {
        "stmtType": "Constant",
        "name": "U_UNSUPPORTED_ATTRIBUTE",
        "value": 65803
    },
    {
        "stmtType": "Constant",
        "name": "U_FMT_PARSE_ERROR_LIMIT",
        "value": 65809
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_INTERNAL_ERROR",
        "value": 66048
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_ERROR_START",
        "value": 66048
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_HEX_DIGITS_EXPECTED",
        "value": 66049
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_SEMICOLON_EXPECTED",
        "value": 66050
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_RULE_SYNTAX",
        "value": 66051
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_UNCLOSED_SET",
        "value": 66052
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_ASSIGN_ERROR",
        "value": 66053
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_VARIABLE_REDFINITION",
        "value": 66054
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_MISMATCHED_PAREN",
        "value": 66055
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_NEW_LINE_IN_QUOTED_STRING",
        "value": 66056
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_UNDEFINED_VARIABLE",
        "value": 66057
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_INIT_ERROR",
        "value": 66058
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_RULE_EMPTY_SET",
        "value": 66059
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_UNRECOGNIZED_OPTION",
        "value": 66060
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_MALFORMED_RULE_TAG",
        "value": 66061
    },
    {
        "stmtType": "Constant",
        "name": "U_BRK_ERROR_LIMIT",
        "value": 66062
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INTERNAL_ERROR",
        "value": 66304
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_ERROR_START",
        "value": 66304
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_RULE_SYNTAX",
        "value": 66305
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INVALID_STATE",
        "value": 66306
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_BAD_ESCAPE_SEQUENCE",
        "value": 66307
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_PROPERTY_SYNTAX",
        "value": 66308
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_UNIMPLEMENTED",
        "value": 66309
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_MISMATCHED_PAREN",
        "value": 66310
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_NUMBER_TOO_BIG",
        "value": 66311
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_BAD_INTERVAL",
        "value": 66312
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_MAX_LT_MIN",
        "value": 66313
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INVALID_BACK_REF",
        "value": 66314
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_INVALID_FLAG",
        "value": 66315
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_LOOK_BEHIND_LIMIT",
        "value": 66316
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_SET_CONTAINS_STRING",
        "value": 66317
    },
    {
        "stmtType": "Constant",
        "name": "U_REGEX_ERROR_LIMIT",
        "value": 66324
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_PROHIBITED_ERROR",
        "value": 66560
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ERROR_START",
        "value": 66560
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_UNASSIGNED_ERROR",
        "value": 66561
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_CHECK_BIDI_ERROR",
        "value": 66562
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_STD3_ASCII_RULES_ERROR",
        "value": 66563
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ACE_PREFIX_ERROR",
        "value": 66564
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_VERIFICATION_ERROR",
        "value": 66565
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_LABEL_TOO_LONG_ERROR",
        "value": 66566
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ZERO_LENGTH_LABEL_ERROR",
        "value": 66567
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR",
        "value": 66568
    },
    {
        "stmtType": "Constant",
        "name": "U_IDNA_ERROR_LIMIT",
        "value": 66569
    },
    {
        "stmtType": "Constant",
        "name": "U_STRINGPREP_PROHIBITED_ERROR",
        "value": 66560
    },
    {
        "stmtType": "Constant",
        "name": "U_STRINGPREP_UNASSIGNED_ERROR",
        "value": 66561
    },
    {
        "stmtType": "Constant",
        "name": "U_STRINGPREP_CHECK_BIDI_ERROR",
        "value": 66562
    },
    {
        "stmtType": "Constant",
        "name": "U_ERROR_LIMIT",
        "value": 66818
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_DEFAULT",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ALLOW_UNASSIGNED",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_USE_STD3_RULES",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_CHECK_BIDI",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_CHECK_CONTEXTJ",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_NONTRANSITIONAL_TO_ASCII",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_NONTRANSITIONAL_TO_UNICODE",
        "value": 32
    },
    {
        "stmtType": "Constant",
        "name": "INTL_IDNA_VARIANT_2003",
        "value": 0
    },
    {
        "stmtType": "Constant",
        "name": "INTL_IDNA_VARIANT_UTS46",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_EMPTY_LABEL",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LABEL_TOO_LONG",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_DOMAIN_NAME_TOO_LONG",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LEADING_HYPHEN",
        "value": 8
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_TRAILING_HYPHEN",
        "value": 16
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_HYPHEN_3_4",
        "value": 32
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LEADING_COMBINING_MARK",
        "value": 64
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_DISALLOWED",
        "value": 128
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_PUNYCODE",
        "value": 256
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_LABEL_HAS_DOT",
        "value": 512
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_INVALID_ACE_LABEL",
        "value": 1024
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_BIDI",
        "value": 2048
    },
    {
        "stmtType": "Constant",
        "name": "IDNA_ERROR_CONTEXTJ",
        "value": 4096
    }
]
