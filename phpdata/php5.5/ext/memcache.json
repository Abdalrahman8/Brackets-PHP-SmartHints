[
    {
        "stmtType": "Class",
        "name": "MemcachePool",
        "fqn": "\\MemcachePool",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "connect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "addserver",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setserverparams",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setfailurecallback",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getserverstatus",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "findserver",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getversion",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "add",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "set",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "replace",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "cas",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "prepend",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getstats",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getextendedstats",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "setcompressthreshold",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "increment",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "decrement",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "close",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "flush",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "Memcache",
        "fqn": "\\Memcache",
        "type": 0,
        "extends": "MemcachePool",
        "methods": [
            {
                "name": "connect",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Open memcached server connection\n * @link http:\/\/www.php.net\/manual\/en\/memcache.connect.php\n * @param host string <p>\n * Point to the host where memcached is listening for connections. This parameter\n * may also specify other transports like unix:\/\/\/path\/to\/memcached.sock\n * to use UNIX domain sockets, in this case port must also\n * be set to 0.\n * <\/p>\n * @param port int[optional] <p>\n * Point to the port where memcached is listening for connections. Set this\n * parameter to 0 when using UNIX domain sockets.\n * <\/p>\n * <p>\n * Please note: port defaults to\n * memcache.default_port\n * if not specified. For this reason it is wise to specify the port\n * explicitly in this method call.\n * <\/p>\n * @param timeout int[optional] <p>\n * Value in seconds which will be used for connecting to the daemon. Think\n * twice before changing the default value of 1 second - you can lose all\n * the advantages of caching if your connection is too slow.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "pconnect",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Open memcached server persistent connection\n * @link http:\/\/www.php.net\/manual\/en\/memcache.pconnect.php\n * @param host string <p>\n * Point to the host where memcached is listening for connections. This parameter\n * may also specify other transports like unix:\/\/\/path\/to\/memcached.sock\n * to use UNIX domain sockets, in this case port must also\n * be set to 0.\n * <\/p>\n * @param port int[optional] <p>\n * Point to the port where memcached is listening for connections. Set this\n * parameter to 0 when using UNIX domain sockets.\n * <\/p>\n * @param timeout int[optional] <p>\n * Value in seconds which will be used for connecting to the daemon. Think\n * twice before changing the default value of 1 second - you can lose all\n * the advantages of caching if your connection is too slow.\n * <\/p>\n * @return mixed a Memcache object or false on failure.\n *\/"
            },
            {
                "name": "addserver",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "persistent",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "weight",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "retry_interval",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "status",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "failure_callback",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "timeoutms",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Add a memcached server to connection pool\n * @link http:\/\/www.php.net\/manual\/en\/memcache.addserver.php\n * @param host string <p>\n * Point to the host where memcached is listening for connections. This parameter\n * may also specify other transports like unix:\/\/\/path\/to\/memcached.sock\n * to use UNIX domain sockets, in this case port must also\n * be set to 0.\n * <\/p>\n * @param port int[optional] <p>\n * Point to the port where memcached is listening for connections.\n * Set this\n * parameter to 0 when using UNIX domain sockets.\n * <\/p>\n * <p>\n * Please note: port defaults to\n * memcache.default_port\n * if not specified. For this reason it is wise to specify the port\n * explicitly in this method call.\n * <\/p>\n * @param persistent bool[optional] <p>\n * Controls the use of a persistent connection. Default to true.\n * <\/p>\n * @param weight int[optional] <p>\n * Number of buckets to create for this server which in turn control its\n * probability of it being selected. The probability is relative to the\n * total weight of all servers.\n * <\/p>\n * @param timeout int[optional] <p>\n * Value in seconds which will be used for connecting to the daemon. Think\n * twice before changing the default value of 1 second - you can lose all\n * the advantages of caching if your connection is too slow.\n * <\/p>\n * @param retry_interval int[optional] <p>\n * Controls how often a failed server will be retried, the default value\n * is 15 seconds. Setting this parameter to -1 disables automatic retry.\n * Neither this nor the persistent parameter has any\n * effect when the extension is loaded dynamically via dl.\n * <\/p>\n * <p>\n * Each failed connection struct has its own timeout and before it has expired\n * the struct will be skipped when selecting backends to serve a request. Once\n * expired the connection will be successfully reconnected or marked as failed\n * for another retry_interval seconds. The typical\n * effect is that each web server child will retry the connection about every\n * retry_interval seconds when serving a page.\n * <\/p>\n * @param status bool[optional] <p>\n * Controls if the server should be flagged as online. Setting this parameter\n * to false and retry_interval to -1 allows a failed\n * server to be kept in the pool so as not to affect the key distribution\n * algorithm. Requests for this server will then failover or fail immediately\n * depending on the memcache.allow_failover setting.\n * Default to true, meaning the server should be considered online.\n * <\/p>\n * @param failure_callback callable[optional] <p>\n * Allows the user to specify a callback function to run upon encountering an\n * error. The callback is run before failover is attempted. The function takes\n * two parameters, the hostname and port of the failed server.\n * <\/p>\n * @param timeoutms int[optional] <p>\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "setserverparams",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "retry_interval",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "status",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "failure_callback",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Changes server parameters and status at runtime\n * @link http:\/\/www.php.net\/manual\/en\/memcache.setserverparams.php\n * @param host string <p>\n * Point to the host where memcached is listening for connections.\n * <\/p>\n * @param port int[optional] <p>\n * Point to the port where memcached is listening for connections.\n * <\/p>\n * @param timeout int[optional] <p>\n * Value in seconds which will be used for connecting to the daemon. Think\n * twice before changing the default value of 1 second - you can lose all\n * the advantages of caching if your connection is too slow.\n * <\/p>\n * @param retry_interval int[optional] <p>\n * Controls how often a failed server will be retried, the default value\n * is 15 seconds. Setting this parameter to -1 disables automatic retry.\n * Neither this nor the persistent parameter has any\n * effect when the extension is loaded dynamically via dl.\n * <\/p>\n * @param status bool[optional] <p>\n * Controls if the server should be flagged as online. Setting this parameter\n * to false and retry_interval to -1 allows a failed\n * server to be kept in the pool so as not to affect the key distribution\n * algoritm. Requests for this server will then failover or fail immediately\n * depending on the memcache.allow_failover setting.\n * Default to true, meaning the server should be considered online.\n * <\/p>\n * @param failure_callback callable[optional] <p>\n * Allows the user to specify a callback function to run upon encountering an\n * error. The callback is run before failover is attempted. The function takes\n * two parameters, the hostname and port of the failed server.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getserverstatus",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "host",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "port",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Returns server status\n * @link http:\/\/www.php.net\/manual\/en\/memcache.getserverstatus.php\n * @param host string <p>\n * Point to the host where memcached is listening for connections.\n * <\/p>\n * @param port int[optional] <p>\n * Point to the port where memcached is listening for connections.\n * <\/p>\n * @return int a the servers status. 0 if server is failed, non-zero otherwise\n *\/"
            },
            {
                "name": "getversion",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Return version of the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.getversion.php\n * @return string a string of server version number or false on failure.\n *\/"
            },
            {
                "name": "add",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "var",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "expire",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Add an item to the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.add.php\n * @param key string <p>\n * The key that will be associated with the item.\n * <\/p>\n * @param var mixed <p>\n * The variable to store. Strings and integers are stored as is, other\n * types are stored serialized.\n * <\/p>\n * @param flag int[optional] <p>\n * Use MEMCACHE_COMPRESSED to store the item\n * compressed (uses zlib).\n * <\/p>\n * @param expire int[optional] <p>\n * Expiration time of the item. If it's equal to zero, the item will never\n * expire. You can also use Unix timestamp or a number of seconds starting\n * from current time, but in the latter case the number of seconds may not\n * exceed 2592000 (30 days).\n * <\/p>\n * @return bool Returns true on success or false on failure.\n * Returns false if such key already exist. For the rest\n * Memcache::add behaves similarly to\n * Memcache::set.\n *\/"
            },
            {
                "name": "set",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "var",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "expire",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Store data at the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.set.php\n * @param key string <p>\n * The key that will be associated with the item.\n * <\/p>\n * @param var mixed <p>\n * The variable to store. Strings and integers are stored as is, other\n * types are stored serialized.\n * <\/p>\n * @param flag int[optional] <p>\n * Use MEMCACHE_COMPRESSED to store the item\n * compressed (uses zlib).\n * <\/p>\n * @param expire int[optional] <p>\n * Expiration time of the item. If it's equal to zero, the item will never\n * expire. You can also use Unix timestamp or a number of seconds starting\n * from current time, but in the latter case the number of seconds may not\n * exceed 2592000 (30 days).\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "replace",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "var",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flag",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "expire",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Replace value of the existing item\n * @link http:\/\/www.php.net\/manual\/en\/memcache.replace.php\n * @param key string <p>\n * The key that will be associated with the item.\n * <\/p>\n * @param var mixed <p>\n * The variable to store. Strings and integers are stored as is, other\n * types are stored serialized.\n * <\/p>\n * @param flag int[optional] <p>\n * Use MEMCACHE_COMPRESSED to store the item\n * compressed (uses zlib).\n * <\/p>\n * @param expire int[optional] <p>\n * Expiration time of the item. If it's equal to zero, the item will never\n * expire. You can also use Unix timestamp or a number of seconds starting\n * from current time, but in the latter case the number of seconds may not\n * exceed 2592000 (30 days).\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Retrieve item from the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.get.php\n * @param key string <p>\n * The key or array of keys to fetch.\n * <\/p>\n * @param flags int[optional] <p>\n * If present, flags fetched along with the values will be written to this parameter. These\n * flags are the same as the ones given to for example Memcache::set.\n * The lowest byte of the int is reserved for pecl\/memcache internal usage (e.g. to indicate\n * compression and serialization status).\n * <\/p>\n * @return string the string associated with the key or\n * an array of found key-value pairs when key is an array.\n * Returns false on failure, key is not found or\n * key is an empty array.\n *\/"
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "timeout",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Delete item from the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.delete.php\n * @param key string <p>\n * The key associated with the item to delete.\n * <\/p>\n * @param timeout int[optional] <p>\n * This deprecated parameter is not supported, and defaults to 0 seconds.\n * Do not use this parameter.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "getstats",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "slabid",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "limit",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get statistics of the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.getstats.php\n * @param type string[optional] <p>\n * The type of statistics to fetch. Valid values are {reset,\n * malloc, maps, cachedump, slabs, items, sizes}. According to\n * the memcached protocol spec these additional arguments \"are\n * subject to change for the convenience of memcache developers\".\n * <\/p>\n * @param slabid int[optional] <p>\n * Used in conjunction with type set to\n * cachedump to identify the slab to dump from. The cachedump\n * command ties up the server and is strictly to be used for\n * debugging purposes.\n * <\/p>\n * @param limit int[optional] <p>\n * Used in conjunction with type set to\n * cachedump to limit the number of entries to dump.\n * <\/p>\n * @return array an associative array of server statistics or false on failure.\n *\/"
            },
            {
                "name": "getextendedstats",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "slabid",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "limit",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Get statistics from all servers in pool\n * @link http:\/\/www.php.net\/manual\/en\/memcache.getextendedstats.php\n * @param type string[optional] <p>\n * The type of statistics to fetch. Valid values are {reset,\n * malloc, maps, cachedump, slabs, items, sizes}. According to\n * the memcached protocol spec these additional arguments \"are\n * subject to change for the convenience of memcache developers\".\n * <\/p>\n * @param slabid int[optional] <p>\n * Used in conjunction with type set to\n * cachedump to identify the slab to dump from. The cachedump\n * command ties up the server and is strictly to be used for\n * debugging purposes.\n * <\/p>\n * @param limit int[optional] <p>\n * Used in conjunction with type set to\n * cachedump to limit the number of entries to dump.\n * <\/p>\n * @return array a two-dimensional associative array of server statistics or false\n * on failure.\n *\/"
            },
            {
                "name": "setcompressthreshold",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "threshold",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "min_savings",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Enable automatic compression of large values\n * @link http:\/\/www.php.net\/manual\/en\/memcache.setcompressthreshold.php\n * @param threshold int <p>\n * Controls the minimum value length before attempting to compress automatically.\n * <\/p>\n * @param min_savings float[optional]\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "increment",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Increment item's value\n * @link http:\/\/www.php.net\/manual\/en\/memcache.increment.php\n * @param key string <p>\n * Key of the item to increment.\n * <\/p>\n * @param value int[optional] <p>\n * Increment the item by value.\n * <\/p>\n * @return int new items value on success  or false on failure.\n *\/"
            },
            {
                "name": "decrement",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Decrement item's value\n * @link http:\/\/www.php.net\/manual\/en\/memcache.decrement.php\n * @param key string <p>\n * Key of the item do decrement.\n * <\/p>\n * @param value int[optional] <p>\n * Decrement the item by value.\n * <\/p>\n * @return int item's new value on success or false on failure.\n *\/"
            },
            {
                "name": "close",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Close memcached server connection\n * @link http:\/\/www.php.net\/manual\/en\/memcache.close.php\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "flush",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Flush all existing items at the server\n * @link http:\/\/www.php.net\/manual\/en\/memcache.flush.php\n * @return bool Returns true on success or false on failure.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_connect",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_pconnect",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_add_server",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_set_server_params",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_set_failure_callback",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_get_server_status",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_get_version",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_add",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_set",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_replace",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_cas",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_append",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_prepend",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_get",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_delete",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_debug",
        "params": [
            {
                "name": "on_off",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_get_stats",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_get_extended_stats",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_set_compress_threshold",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_increment",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_decrement",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_close",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "memcache_flush",
        "params": [

        ]
    },
    {
        "stmtType": "Constant",
        "name": "MEMCACHE_COMPRESSED",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "MEMCACHE_USER1",
        "value": 65536
    },
    {
        "stmtType": "Constant",
        "name": "MEMCACHE_USER2",
        "value": 131072
    },
    {
        "stmtType": "Constant",
        "name": "MEMCACHE_USER3",
        "value": 262144
    },
    {
        "stmtType": "Constant",
        "name": "MEMCACHE_USER4",
        "value": 524288
    },
    {
        "stmtType": "Constant",
        "name": "MEMCACHE_HAVE_SESSION",
        "value": 1
    }
]
