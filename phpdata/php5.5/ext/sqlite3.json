[
    {
        "stmtType": "Class",
        "name": "SQLite3",
        "fqn": "\\SQLite3",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "open",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "encryption_key",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Opens an SQLite database\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.open.php\n * @param filename string <p>\n * Path to the SQLite database, or :memory: to use in-memory database.\n * <\/p>\n * @param flags int[optional] <p>\n * Optional flags used to determine how to open the SQLite database. By\n * default, open uses SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE.\n * <p>\n * SQLITE3_OPEN_READONLY: Open the database for\n * reading only.\n * <\/p>\n * @param encryption_key string[optional] <p>\n * An optional encryption key used when encrypting and decrypting an\n * SQLite database.\n * <\/p>\n * @return void\n *\/"
            },
            {
                "name": "close",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Closes the database connection\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.close.php\n * @return bool true on success, false on failure.\n *\/"
            },
            {
                "name": "exec",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Executes a result-less query against a given database\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.exec.php\n * @param query string <p>\n * The SQL query to execute (typically an INSERT, UPDATE, or DELETE\n * query).\n * <\/p>\n * @return bool true if the query succeeded, false on failure.\n *\/"
            },
            {
                "name": "version",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the SQLite3 library version as a string constant and as a number\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.version.php\n * @return array an associative array with the keys \"versionString\" and\n * \"versionNumber\".\n *\/"
            },
            {
                "name": "lastInsertRowID",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the row ID of the most recent INSERT into the database\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.lastinsertrowid.php\n * @return int the row ID of the most recent INSERT into the database\n *\/"
            },
            {
                "name": "lastErrorCode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the numeric result code of the most recent failed SQLite request\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.lasterrorcode.php\n * @return int an integer value representing the numeric result code of the most\n * recent failed SQLite request.\n *\/"
            },
            {
                "name": "lastErrorMsg",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns English text describing the most recent failed SQLite request\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.lasterrormsg.php\n * @return string an English string describing the most recent failed SQLite request.\n *\/"
            },
            {
                "name": "busyTimeout",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "msecs",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Sets the busy connection handler\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.busytimeout.php\n * @param msecs int <p>\n * The milliseconds to sleep. Setting this value to a value less than\n * or equal to zero, will turn off an already set timeout handler.\n * <\/p>\n * @return bool true on success, false on failure.\n *\/"
            },
            {
                "name": "loadExtension",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "shared_library",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Attempts to load an SQLite extension library\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.loadextension.php\n * @param shared_library string <p>\n * The name of the library to load. The library must be located in the\n * directory specified in the configure option sqlite3.extension_dir.\n * <\/p>\n * @return bool true if the extension is successfully loaded, false on failure.\n *\/"
            },
            {
                "name": "changes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n* Returns the number of database rows that were changed (or inserted or\n   deleted) by the most recent SQL statement\n* @link http:\/\/www.php.net\/manual\/en\/sqlite3.changes.php\n* @return int an integer value corresponding to the number of\n* database rows changed (or inserted or deleted) by the most recent SQL\n* statement.\n*\/"
            },
            {
                "name": "escapeString",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns a string that has been properly escaped\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.escapestring.php\n * @param value string <p>\n * The string to be escaped.\n * <\/p>\n * @return string a properly escaped string that may be used safely in an SQL\n * statement.\n *\/"
            },
            {
                "name": "prepare",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Prepares an SQL statement for execution\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.prepare.php\n * @param query string <p>\n * The SQL query to prepare.\n * <\/p>\n * @return SQLite3Stmt an SQLite3Stmt object on success or false on failure.\n *\/"
            },
            {
                "name": "query",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Executes an SQL query\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.query.php\n * @param query string <p>\n * The SQL query to execute.\n * <\/p>\n * @return SQLite3Result an SQLite3Result object if the query returns results. Otherwise,\n * returns true if the query succeeded, false on failure.\n *\/"
            },
            {
                "name": "querySingle",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "entire_row",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Executes a query and returns a single result\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.querysingle.php\n * @param query string <p>\n * The SQL query to execute.\n * <\/p>\n * @param entire_row bool[optional] <p>\n * By default, querySingle returns the value of the\n * first column returned by the query. If\n * entire_row is true, then it returns an array\n * of the entire first row.\n * <\/p>\n * @return mixed the value of the first column of results or an array of the entire\n * first row (if entire_row is true).\n * <\/p>\n * <p>\n * If the query is valid but no results are returned, then &null; will be\n * returned if entire_row is false, otherwise an\n * empty array is returned.\n * <\/p>\n * <p>\n * Invalid or failing queries will return false.\n *\/"
            },
            {
                "name": "createFunction",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "argument_count",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Registers a PHP function for use as an SQL scalar function\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.createfunction.php\n * @param name string <p>\n * Name of the SQL function to be created or redefined.\n * <\/p>\n * @param callback mixed <p>\n * The name of a PHP function or user-defined function to apply as a\n * callback, defining the behavior of the SQL function.\n * <\/p>\n * @param argument_count int[optional] <p>\n * The number of arguments that the SQL function takes. If\n * this parameter is negative, then the SQL function may take\n * any number of arguments.\n * <\/p>\n * @return bool true upon successful creation of the function, false on failure.\n *\/"
            },
            {
                "name": "createAggregate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "step_callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "final_callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "argument_count",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Registers a PHP function for use as an SQL aggregate function\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.createaggregate.php\n * @param name string <p>\n * Name of the SQL aggregate to be created or redefined.\n * <\/p>\n * @param step_callback mixed <p>\n * The name of a PHP function or user-defined function to apply as a\n * callback for every item in the aggregate.\n * <\/p>\n * @param final_callback mixed <p>\n * The name of a PHP function or user-defined function to apply as a\n * callback at the end of the aggregate data.\n * <\/p>\n * @param argument_count int[optional] <p>\n * The number of arguments that the SQL aggregate takes. If\n * this parameter is negative, then the SQL aggregate may take\n * any number of arguments.\n * <\/p>\n * @return bool true upon successful creation of the aggregate, false on\n * failure.\n *\/"
            },
            {
                "name": "createCollation",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Registers a PHP function for use as an SQL collating function\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.createcollation.php\n * @param name string <p>\n * Name of the SQL collating function to be created or redefined\n * <\/p>\n * @param callback callable <p>\n * The name of a PHP function or user-defined function to apply as a\n * callback, defining the behavior of the collation. It should accept two\n * strings and return as strcmp does, i.e. it should\n * return -1, 1, or 0 if the first string sorts before, sorts after, or is\n * equal to the second.\n * <\/p>\n * @return bool Returns true on success or false on failure.\n *\/"
            },
            {
                "name": "openBlob",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "table",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "column",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "rowid",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "dbname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param table\n * @param column\n * @param rowid\n * @param dbname[optional]\n *\/"
            },
            {
                "name": "enableExceptions",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "enableExceptions",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * @param enableExceptions\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "encryption_key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Instantiates an SQLite3 object and opens an SQLite 3 database\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3.construct.php\n * @param filename\n * @param flags\n * @param encryption_key\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SQLite3Stmt",
        "fqn": "\\SQLite3Stmt",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "paramCount",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the number of parameters within the prepared statement\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.paramcount.php\n * @return int the number of parameters within the prepared statement.\n *\/"
            },
            {
                "name": "close",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Closes the prepared statement\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.close.php\n * @return bool true\n *\/"
            },
            {
                "name": "reset",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Resets the prepared statement\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.reset.php\n * @return bool true if the statement is successfully reset, false on failure.\n *\/"
            },
            {
                "name": "clear",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Clears all current bound parameters\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.clear.php\n * @return bool true on successful clearing of bound parameters, false on\n * failure.\n *\/"
            },
            {
                "name": "execute",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Executes a prepared statement and returns a result set object\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.execute.php\n * @return SQLite3Result an SQLite3Result object on successful execution of the prepared\n * statement, false on failure.\n *\/"
            },
            {
                "name": "bindParam",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "sql_param",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "param",
                        "type": null,
                        "byRef": true,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Binds a parameter to a statement variable\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.bindparam.php\n * @param sql_param string <p>\n * An string identifying the statement variable to which the\n * parameter should be bound.\n * <\/p>\n * @param param mixed <p>\n * The parameter to bind to a statement variable.\n * <\/p>\n * @param type int[optional] <p>\n * The data type of the parameter to bind.\n * <p>\n * SQLITE3_INTEGER: The value is a signed integer,\n * stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of\n * the value.\n * <\/p>\n * @return bool true if the parameter is bound to the statement variable, false\n * on failure.\n *\/"
            },
            {
                "name": "bindValue",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "sql_param",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Binds the value of a parameter to a statement variable\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3stmt.bindvalue.php\n * @param sql_param string <p>\n * An string identifying the statement variable to which the\n * value should be bound.\n * <\/p>\n * @param value mixed <p>\n * The value to bind to a statement variable.\n * <\/p>\n * @param type int[optional] <p>\n * The data type of the value to bind.\n * <p>\n * SQLITE3_INTEGER: The value is a signed integer,\n * stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of\n * the value.\n * <\/p>\n * @return bool true if the value is bound to the statement variable, false\n * on failure.\n *\/"
            },
            {
                "name": "readOnly",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SQLite3Result",
        "fqn": "\\SQLite3Result",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "numColumns",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Returns the number of columns in the result set\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3result.numcolumns.php\n * @return int the number of columns in the result set.\n *\/"
            },
            {
                "name": "columnName",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "column_number",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns the name of the nth column\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3result.columnname.php\n * @param column_number int <p>\n * The numeric zero-based index of the column.\n * <\/p>\n * @return string the string name of the column identified by\n * column_number.\n *\/"
            },
            {
                "name": "columnType",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "column_number",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\n * Returns the type of the nth column\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3result.columntype.php\n * @param column_number int <p>\n * The numeric zero-based index of the column.\n * <\/p>\n * @return int the data type index of the column identified by\n * column_number (one of\n * SQLITE3_INTEGER, SQLITE3_FLOAT,\n * SQLITE3_TEXT, SQLITE3_BLOB, or\n * SQLITE3_NULL).\n *\/"
            },
            {
                "name": "fetchArray",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\n * Fetches a result row as an associative or numerically indexed array or both\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3result.fetcharray.php\n * @param mode int[optional] <p>\n * Controls how the next row will be returned to the caller. This value\n * must be one of either SQLITE3_ASSOC,\n * SQLITE3_NUM, or SQLITE3_BOTH.\n * <p>\n * SQLITE3_ASSOC: returns an array indexed by column\n * name as returned in the corresponding result set\n * <\/p>\n * @return array a result row as an associatively or numerically indexed array or\n * both. Alternately will return false if there are no more rows.\n *\/"
            },
            {
                "name": "reset",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Resets the result set back to the first row\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3result.reset.php\n * @return bool true if the result set is successfully reset\n * back to the first row, false on failure.\n *\/"
            },
            {
                "name": "finalize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\n * Closes the result set\n * @link http:\/\/www.php.net\/manual\/en\/sqlite3result.finalize.php\n * @return bool true.\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_ASSOC",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_NUM",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_BOTH",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_INTEGER",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_FLOAT",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_TEXT",
        "value": 3
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_BLOB",
        "value": 4
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_NULL",
        "value": 5
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_OPEN_READONLY",
        "value": 1
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_OPEN_READWRITE",
        "value": 2
    },
    {
        "stmtType": "Constant",
        "name": "SQLITE3_OPEN_CREATE",
        "value": 4
    }
]
